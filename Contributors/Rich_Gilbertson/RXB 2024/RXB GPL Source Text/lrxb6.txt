99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0001 
Version 2.0 (Weiand 1985)     Options : LCSFPF                                  
[0001]               ***********************************************************
[0002]                      TITL 'RXB 2024'
[0003]               ***********************************************************
[0004] 2002          FSLOC  EQU  >2002             Free Start LOCation in ERAM
[0005]               *                             Free end must follow it.
[0006]               ***********************************************************
[0007]               * RXB move INIT code to ROM 3                             *
[0008] 2006          INITF  EQU  >2006             INIT flag address INIT has be
[0009]               *                             called if ERAM (INITF)=>AA55
[0010]               * Free end initialized to >4000, (>FFF8 for debugger)
[0011]               * Free start is initialized to the first useable memory
[0012]               *  location for assembly language code
[0013]               * CPUBAS EQU  >A040             Expansion RAM base
[0014]               ***********************************************************
[0015]               *           GROM ADDRESSES
[0016]               ***********************************************************
[0017]               * GROM >6000
[0018] 6040          MSGFST EQU  >6040
[0019] 6065          MSG10  EQU  >6065
[0020] 6076          MSG14  EQU  >6076
[0021] 6083          MSG16  EQU  >6083
[0022] 609C          MSG17  EQU  >609C
[0023] 60AD          MSG19  EQU  >60AD
[0024] 60BB          MSG24  EQU  >60BB
[0025] 60D2          MSG25  EQU  >60D2
[0026] 60E4          MSG28  EQU  >60E4
[0027] 60F9          MSG34  EQU  >60F9
[0028] 6110          MSG36  EQU  >6110
[0029] 611C          MSG39  EQU  >611C
[0030] 6128          MSG40  EQU  >6128
[0031] 6137          MSG43  EQU  >6137
[0032] 6148          MSG44  EQU  >6148
[0033] 6159          MSG47  EQU  >6159
[0034] 616F          MSG48  EQU  >616F
[0035] 6189          MSG49  EQU  >6189
[0036] 6198          MSG51  EQU  >6198
[0037] 61AD          MSG54  EQU  >61AD
[0038] 61BE          MSG57  EQU  >61BE
[0039] 61CC          MSG60  EQU  >61CC
[0040] 61DB          MSG61  EQU  >61DB
[0041] 61EB          MSG67  EQU  >61EB
[0042] 61FA          MSG69  EQU  >61FA
[0043] 6215          MSG70  EQU  >6215
[0044] 622D          MSG74  EQU  >622D
[0045] 623A          MSG78  EQU  >623A
[0046] 624D          MSG79  EQU  >624D
[0047] 6257          MSG81  EQU  >6257
[0048] 626F          MSG83  EQU  >626F
[0049] 627B          MSG84  EQU  >627B
[0050] 6286          MSG97  EQU  >6286
[0051] 629B          MSG109 EQU  >629B
[0052] 62A6          MSG130 EQU  >62A6
[0053] 62B0          MSG135 EQU  >62B0
[0054] 62C5          MSG62  EQU  >62C5
[0055] 630A          MSGCIS EQU  >630A
[0056] 6319          MSGCF  EQU  >6319
[0057] 6324          MSG56  EQU  >6324
[0058] 6372          TOPLEV EQU  >6372             RXB PATCH for XBPGM
[0059] 6020          SZNEW  EQU  >6020             RXB PATCH for NEW
[0060] 63DD          TOPL15 EQU  >63DD             * Return from OLD or SAVE
[0061] 6433          TOPL42 EQU  >6433
[0062] 6462          TOPL55 EQU  >6462
[0063] 64EF          ILLST  EQU  >64EF
[0064] 66CF          EDITLN EQU  >66CF             * Edit a line into a program
[0065] 6A8A          READL3 EQU  >6A8A

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0002 
RXB 2024
[0066] 64A0          SZRUNL EQU  >64A0
[0067] 6D78          G6D78  EQU  >6D78             * GKXB ERR routine
[0068] 6E0E          ERPRNT EQU  >6E0E
[0069] 6E1B          ERPNT5 EQU  >6E1B
[0070] 6FBA          DISO   EQU  >6FBA
[0071]               * GROM >8000
[0072] 802A          GRMLST EQU  >802A
[0073]               * GROM >A000
[0074] A00A          ASC    EQU  >A00A
[0075] A01A          LNKRT2 EQU  >A01A             Return to XB
[0076] A01C          LNKRTN EQU  >A01C             ) and return to XB
[0077] BFE0          COMB   EQU  >BFE0
[0078] BFE2          STRFCH EQU  >BFE2
[0079] BFE4          STRPAR EQU  >BFE4 
[0080] BFE6          STRGET EQU  >BFE6
[0081] BFE8          NUMFCH EQU  >BFE8
[0082] BFEA          CFIFCH EQU  >BFEA
[0083] BFEC          GNRTN  EQU  >BFEC
[0084] BFEE          NGOOD  EQU  >BFEE
[0085] BFF0          SNDER  EQU  >BFF0
[0086] BFF2          CIFSND EQU  >BFF2
[0087] BFF4          SNDASS EQU  >BFF4
[0088] BFF6          SUBLP3 EQU  >BFF6 
[0089] BFF8          SUBLP4 EQU  >BFF8
[0090] BFFA          CLRFAC EQU  >BFFA
[0091] BFFC          GETNUM EQU  >BFFC
[0092]               * GROM >E000
[0093] E025          GE025  EQU  >E025             RXB PATCH for EA
[0094]               ***********************************************************
[0095]               *    EQUATES FOR ROUTINES FROM OTHER GROM SECTIONS
[0096] 6048          MSGBRK EQU  >6048             * BREAKPOINT
[0097] 6A74          LLIST  EQU  >6A74             List a line
[0098] 6A78          CHKEND EQU  >6A78             Check end of statement
[0099] 6A82          WARNZZ EQU  >6A82             WARNING MESSAGE ROUTINE
[0100] 6A84          ERRZZ  EQU  >6A84             ERROR MESSAGE ROUTINE
[0101]               * ERRZ   EQU  >6A84             ERRor routine
[0102]               * READL1 EQU  >6A86             Read a line from keyboard
[0103] 8012          CLSALL EQU  >8012
[0104] 802C          GRSUB2 EQU  >802C
[0105] 802E          GRSUB3 EQU  >802E
[0106]               ***********************************************************
[0107]               *    Equates for XMLs
[0108] 0000          SYNCHK EQU  >00               SYNCHK XML selector
[0109] 0003          SEETWO EQU  >03               SEETWO XML selector
[0110] 0020          ALSUP  EQU  >20               XML to user AssembLy SUBrouti
[0111] 0070          COMPCT EQU  >70               PREFORM A GARBAGE COLLECTION
[0112] 0071          GETSTR EQU  >71               SYSTEM GET STRING
[0113] 0073          XBCNS  EQU  >73               Convert number to string
[0114] 0074          PARSE  EQU  >74               Parse a value
[0115] 0075          CONT   EQU  >75               Continue parsing
[0116] 0077          VPUSH  EQU  >77               Push on value stack
[0117] 0078          VPOP   EQU  >78               Pop off value stack
[0118] 0079          PGMCHR EQU  >79               GET PROGRAM CHARACTER
[0119] 007A          SYM    EQU  >7A               Find SYMBOL entry
[0120] 007B          SMB    EQU  >7B               Find symbol table entry
[0121] 007C          ASSGNV EQU  >7C               Assign VARIABLE
[0122] 007E          SPEED  EQU  >7E               SPEED UP XML
[0123] 007F          CRUNCH EQU  >7F               Crunch an input line
[0124] 0080          CIF    EQU  >80               Convert INTEGER to FLOATING P
[0125] 0083          SCROLL EQU  >83               SCROLL THE SCREEN
[0126]               * GREAD  EQU  >85               READ DATA FROM ERAM
[0127]               * MVDN   EQU  >88               MOVE DATA IN VDP/ERAM
[0128] 0089          MVUP   EQU  >89               MOVE DATA IN VDP/ERAM
[0129]               * GREAD1 EQU  >8C               READ DATA FROM ERAM

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0003 
RXB 2024
[0130]               ***********************************************************
[0131]               *  XML for ROM3  
[0132] 0070          RROLL  EQU  >70               Right ROLL screen ASSEMBLY
[0133] 0071          LROLL  EQU  >71               Left ROLL screen ASSEMBLY
[0134] 0072          UROLL  EQU  >72               Up ROLL screen ASSEMBLY
[0135] 0073          DROLL  EQU  >73               Down ROLL screen ASSEMBLY
[0136] 0074          HCHAR  EQU  >74               HCHAR ASSEMBLY
[0137] 0075          VCHAR  EQU  >75               VCHAR ASSEMBLY
[0138] 0076          ASCHEX EQU  >76               ASC/HEX/DEC ASSEMBLY
[0139] 0077          HPUT   EQU  >77               HPUT ASSEMBLY
[0140] 0078          VPUT   EQU  >78               VPUT ASSEMBLY 
[0141] 0079          INVERS EQU  >79               INVERSE ASSEMBLY 
[0142] 007E          ALPHA  EQU  >7E               ALPHA LOCK ASSEMBLY
[0143] 0082          CHRPAT EQU  >82               CHARPAT ASSEMBLY
[0144] 008B          CINIT  EQU  >8B               CALL INIT ASSEMBLY
[0145]               ***********************************************************
[0146]               *    Temporary workspaces in EDIT
[0147] 8301          PAD1   EQU  >8301            TEMPORARY
[0148] 8302          PAD2   EQU  >8302            Ussually a counter
[0149] 8302          CHKSUM EQU  >8302            Check sum word
[0150] 8302          STPT   EQU  >8302            TWO BYTES
[0151] 8302          MNUM   EQU  >8302            Ussually a counter
[0152] 8304          PC     EQU  >8304            Address in ERAM to load next v
[0153] 8304          PAD4   EQU  >8304
[0154] 8304          PABPTR EQU  >8304            Pointer to current PAB
[0155] 8306          PAD6   EQU  >8306            Use in MVDN only
[0156] 8306          CCPPTR EQU  >8306            OFFSET WITHIN RECORED (1)
[0157]               *                             or Pointer to current column
[0158] 8306          OFFADD EQU  >8306            OFFADD of relocatable programs
[0159]               *                             loaded into ERAM.
[0160] 8307          RECLEN EQU  >8307            LENGTH OF CURRENT RECORD (1)
[0161] 8308          SETCRU EQU  >8308            SBO or SBZ bytes SAMS COMMAND
[0162] 8308          CCPADR EQU  >8308            RAM address of current refs
[0163]               *                             or Actual buffer address or c
[0164] 8308          FRESTA EQU  >8308            Start of free memory in ERAM
[0165]               *                         the end of the reloacatable progr
[0166]               *                         (start of next program) is stored
[0167]               *                         in FRESTA once a "0" tag is found
[0168] 830A          FREEND EQU  >830A            End of free memory in ERAM -
[0169]               *                         points to 1st character of last
[0170]               *                         entry into routine name table.
[0171]               *                         (must follow FRESTA!!!)
[0172] 830A          RAMPTR EQU  >830A            Pointer for crunching
[0173] 830C          BYTES  EQU  >830C            BYTE COUNTER
[0174]               *                             or String length for GETSTR
[0175] 830E          BUFPNT EQU  >830E            I/O buffer pointer
[0176] 830E          CURINC EQU  >830E            Increment for auto-num mode
[0177] 8310          VAR5   EQU  >8310            VAR5 through VAR5+3 used in RA
[0178] 8310          TAG    EQU  >8310            TAG FIELD
[0179] 8310          OLDS   EQU  >8310            FLAG BITS
[0180] 8310          TBLPTR EQU  >8310            Table pointer (CHARPAT)
[0181] 8311          FIELD  EQU  >8311            Value after TAG field, 4 bytes
[0182]               *                             (must follow TAG!!!)
[0183] 8311          VAR6   EQU  >8311
[0184] 8312          COUNT  EQU  >8312            FLAG BITS
[0185] 8312          STRPTR EQU  >8312            String pointer (CHARPAT)
[0186] 8314          CURLIN EQU  >8314            Current line for auto-num
[0187]               *                             or Starting line number for L
[0188] 8314          VAR9   EQU  >8314            Used in CHARLY
[0189] 8314          STORE  EQU  >8314            FLAG BITS
[0190] 8315          INDEXC EQU  >8315            Byte index for computing check
[0191] 8316          VARB   EQU  >8316            Source address for XML MVUP
[0192] 8316          TEMP   EQU  >8316            FLAG BITS
[0193] 8317          DEVNUM EQU  >8317            DEVice NUMber for Hard drive

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0004 
RXB 2024
[0194] 8317          DSRFLG EQU  >8317            INTERNAL =60, EXTERNAL =0 (1)
[0195]               ***********************************************************
[0196]               *    Permanent workspace variables
[0197] 831A          STREND EQU  >831A            String space ending
[0198] 831C          SREF   EQU  >831C            Temporary string pointer
[0199] 8320          VARW   EQU  >8320            Screen address (CURSOR)
[0200] 8322          ERRCOD EQU  >8322            Return error code from ALC
[0201] 8324          STVSPT EQU  >8324            Value-stack base
[0202] 832A          VARA   EQU  >832A            Ending display location
[0203] 832C          PGMPTR EQU  >832C            Program text pointer (TOKEN)
[0204] 832E          EXTRAM EQU  >832E            Line number table pointer
[0205] 8330          STLN   EQU  >8330            Start of line number table
[0206] 8332          ENLN   EQU  >8332            End of line number table
[0207] 8340          FREPTR EQU  >8340            Free space pointer
[0208] 8342          CHAT   EQU  >8342            Current charater/token
[0209] 8344          PRGFLG EQU  >8344            Program/imperative flag
[0210] 8345          FLAG   EQU  >8345            General 8-bit flag
[0211]               * BUFLEV EQU  >8346          Crunch-buffer destruction leve
[0212]               * FAC  EQU  >834A            Floating-point ACcurmulator
[0213] 834B          FAC1   EQU  >834B
[0214] 834C          FAC2   EQU  >834C
[0215] 834D          FAC3   EQU  >834D
[0216] 834E          FAC4   EQU  >834E
[0217] 834F          FAC5   EQU  >834F
[0218] 8350          FAC6   EQU  >8350
[0219] 8351          FAC7   EQU  >8351
[0220] 8352          FAC8   EQU  >8352
[0221] 8353          FAC9   EQU  >8353
[0222] 8354          FAC10  EQU  >8354
[0223] 8354          TEMP1  EQU  >8354            TEMPorary CPU location 1
[0224] 8355          FAC11  EQU  >8355
[0225] 8356          FAC12  EQU  >8356
[0226] 8356          TEMP2  EQU  >8356            TEMPorary CPU location 2
[0227] 8357          FAC13  EQU  >8357
[0228] 8358          FAC14  EQU  >8358
[0229] 8358          EEE1   EQU  >8358
[0230] 8359          FAC15  EQU  >8359
[0231] 835A          FAC16  EQU  >835A
[0232] 835B          FAC17  EQU  >835B
[0233]               * ARG  EQU  >835C            Floating-point ARGument
[0234] 835D          ARG1   EQU  >835D
[0235] 835E          ARG2   EQU  >835E
[0236] 835E          INDEX  EQU  >835E            Label or program ID - 8 bytes
[0237] 835F          ARG3   EQU  >835F
[0238] 8360          ARG4   EQU  >8360
[0239] 8361          ARG5   EQU  >8361
[0240] 8362          ARG6   EQU  >8362
[0241]               * FPERAD EQU  >836C            Value stack pointer
[0242]               * VSPTR  EQU  >836E          Value stack pointer
[0243] 8370          HIVDP  EQU  >8370
[0244]               ***********************************************************
[0245]               *    GPL Status Block
[0246]               * STACK  EQU  >8372             STACK FOR DATA
[0247]               * SUBSTK EQU  >8373             SUBROUTINE STACK
[0248] 8375          RKEY   EQU  >8375             KEY CODE
[0249] 8379          TIMER  EQU  >8379             TIMING REGISTER
[0250] 837C          ERCODE EQU  >837C             STATUS REGISTER
[0251] 837D          CB     EQU  >837D             Character Buffer
[0252]               ***********************************************************
[0253] 8384          RAMTOP EQU  >8384            Highest address in ERAM
[0254]               *                             = 0 if ERAM not present
[0255]               *                             (Starts at >8A)
[0256] 8386          RAMFRE EQU  >8386            Free pointer in the ERAM
[0257] 83C2          GKFLAG EQU  >83C2 * GKXB flag PEEK/LOAD VDP/GROM/QUIT KEY

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0005 
RXB 2024
[0258]               ***********************************************************
[0259]               *    VDP addresses
[0260] 02E2          NLNADD EQU  >02E2             New LiNe ADDress
[0261] 0371          LODFLG EQU  >0371             Auto-boot needed flag
[0262]               * Temporary
[0263]               *                              in FLMGRS (4 bytes used)
[0264] 0376          SYMBOL EQU  >0376             Saved symbol table pointer
[0265] 038C          BUFSRT EQU  >038C             Edit recall start addr (VARW)
[0266] 038E          BUFEND EQU  >038E             Edit recall end addr (VARA)
[0267] 039E          MRGPAB EQU  >039E             MERGEd temporary for pab ptr
[0268] 03A0          PMEM   EQU  >03A0             UPPER 24K MEMORY
[0269]               *----------------------------------------------------------
[0270]               *    Flag 0:  99/4  console, 5/29/81
[0271]               *         1:  99/4A console
[0272] 03BB          CONFLG EQU  >03BB
[0273]               *----------------------------------------------------------
[0274] 03C0          VROAZ  EQU  >03C0             Temporary roll-out area
[0275] 0820          CRNBUF EQU  >0820             CRuNch BUFfer address
[0276] 08C0          RECBUF EQU  >08C0             Edit RECall BUFfer
[0277] 0958          VRAMVS EQU  >0958             Default base of value stack
[0278]               ***********************************************************
[0279]               *    IMMEDITATE VALUES
[0280] 000A          DWNARR EQU  >0A
[0281] 000B          UPARR  EQU  >0B
[0282] 000D          CHRTN  EQU  >0D
[0283] 0060          OFFSET EQU  >60               OFFSET FOR VIDEO TABLES
[0284] 0065          STRING EQU  >65               String ID # for FAC
[0285]               ***********************************************************
[0286]               * Editting command equates & keys or tokens
[0287] 0005          OLDZ   EQU  >05               SAMS TOKEN OLD
[0288] 0007          SAVEZ  EQU  >07               SAMS TOKEN SAVE
[0289] 0020          SPACE  EQU  >20               Space key
[0290] 0032          SAMS2Z EQU  >32               SAMS TOKEN 2 
[0291] 0033          SAMS3Z EQU  >33               SAMS TOKEN 3
[0292] 0041          SAMSAZ EQU  >41               SAMS TOKEN A
[0293] 0042          SAMSBZ EQU  >42               SAMS TOKEN B
[0294] 0043          SAMSCZ EQU  >43               SAMS TOKEN C
[0295] 0044          SAMSDZ EQU  >44               SAMS TOKEN D
[0296] 0045          SAMSEZ EQU  >45               SAMS TOKEN E
[0297] 0046          SAMSFZ EQU  >46               SAMS TOKEN F
[0298]               ***********************************************************
[0299]               * PAB offset
[0300] 0001          FLG    EQU  1                 FLAG BYTE ENTRY
[0301] 0002          BUF    EQU  2                 BUFFER ENTRY
[0302] 0004          LEN    EQU  4                 RECORD LENGTH ENTRY
[0303] 0005          CHRCNT EQU  5                 CHARACTER COUNT
[0304] 0008          SCR    EQU  8                 SCREEN OFFSET ENTRY
[0305] 0009          NLEN   EQU  9                 NAME LENGTH
[0306] 000A          PABLEN EQU  10                ACTUAL PAB LENGTH
[0307]               ***********************************************************
[0308]               *    BASIC TOKEN TABLE
[0309]               *      EQU  >80               spare token
[0310] 0081          ELSEZ  EQU  >81               ELSE
[0311] 0082          SSEPZ  EQU  >82               ::
[0312] 0083          TREMZ  EQU  >83               $
[0313] 0084          IFZ    EQU  >84               IF
[0314] 0085          GOZ    EQU  >85               GO
[0315] 0086          GOTOZ  EQU  >86               GOTO
[0316] 0087          GOSUBZ EQU  >87               GOSUB
[0317] 0088          RETURZ EQU  >88               RETURN
[0318] 0089          DEFZ   EQU  >89               DEF
[0319] 008A          DIMZ   EQU  >8A               DIM
[0320] 008B          ENDZ   EQU  >8B               END
[0321] 008C          FORZ   EQU  >8C               FOR

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0006 
RXB 2024
[0322] 008D          LETZ   EQU  >8D               LET   * RXB REMOVED
[0323] 008E          BREAKZ EQU  >8E               BREAK
[0324] 008F          UNBREZ EQU  >8F               UNBREAK
[0325] 0090          TRACEZ EQU  >90               TRACE
[0326] 0091          UNTRAZ EQU  >91               UNTRACE
[0327] 0092          INPUTZ EQU  >92               INPUT
[0328] 0093          DATAZ  EQU  >93               DATA
[0329] 0094          RESTOZ EQU  >94               RESTORE
[0330] 0095          RANDOZ EQU  >95               RANDOMIZE
[0331] 0096          NEXTZ  EQU  >96               NEXT
[0332] 0097          READZ  EQU  >97               READ
[0333] 0098          STOPZ  EQU  >98               STOP
[0334] 0099          DELETZ EQU  >99               DELETE
[0335] 009A          REMZ   EQU  >9A               REM
[0336] 009B          ONZ    EQU  >9B               ON
[0337] 009C          PRINTZ EQU  >9C               PRINT
[0338] 009D          CALLZ  EQU  >9D               CALL
[0339] 009E          OPTIOZ EQU  >9E               OPTION
[0340] 009F          OPENZ  EQU  >9F               OPEN
[0341] 00A0          CLOSEZ EQU  >A0               CLOSE
[0342] 00A1          SUBZ   EQU  >A1               SUB
[0343] 00A2          DISPLZ EQU  >A2               DISPLAY
[0344] 00A3          IMAGEZ EQU  >A3               IMAGE
[0345] 00A4          ACCEPZ EQU  >A4               ACCEPT
[0346] 00A5          ERRORZ EQU  >A5               ERROR
[0347] 00A6          WARNZ  EQU  >A6               WARNING
[0348] 00A7          SUBXTZ EQU  >A7               SUBEXIT
[0349] 00A8          SUBNDZ EQU  >A8               SUBEND
[0350] 00A9          RUNZ   EQU  >A9               RUN
[0351] 00AA          LINPUZ EQU  >AA               LINPUT
[0352]               *      EQU  >AB               spare token (LIBRARY)
[0353]               *      EQU  >AC               spare token (REAL)
[0354]               *      EQU  >AD               spare token (INTEGER)
[0355]               *      EQU  >AE               spare token (SCRATCH)
[0356]               *      EQU  >AF               spare token
[0357] 00B0          THENZ  EQU  >B0               THEN
[0358] 00B1          TOZ    EQU  >B1               TO
[0359] 00B2          STEPZ  EQU  >B2               STEP
[0360] 00B3          COMMAZ EQU  >B3               ,
[0361] 00B4          SEMICZ EQU  >B4               ;
[0362] 00B5          COLONZ EQU  >B5               :
[0363] 00B6          RPARZ  EQU  >B6               )
[0364] 00B7          LPARZ  EQU  >B7               (
[0365] 00B8          CONCZ  EQU  >B8               &          (CONCATENATE)
[0366]               *      EQU  >B9               spare token
[0367] 00BA          ORZ    EQU  >BA               OR
[0368] 00BB          ANDZ   EQU  >BB               AND
[0369] 00BC          XORZ   EQU  >BC               XOR
[0370] 00BD          NOTZ   EQU  >BD               NOT
[0371] 00BE          EQUALZ EQU  >BE               =
[0372] 00BF          LESSZ  EQU  >BF               <
[0373] 00C0          GREATZ EQU  >C0               >
[0374] 00C1          PLUSZ  EQU  >C1               +
[0375] 00C2          MINUSZ EQU  >C2               -
[0376] 00C3          MULTZ  EQU  >C3               *
[0377] 00C4          DIVIZ  EQU  >C4               /
[0378] 00C5          CIRCUZ EQU  >C5               ^
[0379]               *      EQU  >C6               spare token
[0380] 00C7          STRINZ EQU  >C7               QUOTED STRING
[0381] 00C8          UNQSTZ EQU  >C8               UNQUOTED STRING
[0382] 00C8          NUMZ   EQU  >C8               ALSO NUMERICAL STRING
[0383] 00C8          NUMCOZ EQU  >C8               ALSO UNQUOTED STRING
[0384] 00C9          LNZ    EQU  >C9               LINE NUMBER CONSTANT
[0385] 00CA          EOFZ   EQU  >CA               EOF

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0007 
RXB 2024
[0386] 00CB          ABSZ   EQU  >CB               ABS
[0387] 00CC          ATNZ   EQU  >CC               ATN
[0388] 00CD          COSZ   EQU  >CD               COS
[0389] 00CE          EXPZZ  EQU  >CE               EXP
[0390] 00CF          INTZ   EQU  >CF               INT
[0391] 00D0          LOGZ   EQU  >D0               LOG
[0392] 00D1          SGNZZ  EQU  >D1               SGN
[0393] 00D2          SINZ   EQU  >D2               SIN
[0394] 00D3          SQRZ   EQU  >D3               SQR
[0395] 00D4          TANZ   EQU  >D4               TAN
[0396] 00D5          LENZ   EQU  >D5               LEN
[0397] 00D6          CHRZZ  EQU  >D6               CHR$
[0398] 00D7          RNDZ   EQU  >D7               RND
[0399] 00D8          SEGZZ  EQU  >D8               SEG$
[0400] 00D9          POSZ   EQU  >D9               POS
[0401] 00DA          VALZ   EQU  >DA               VAL
[0402] 00DB          STRZZ  EQU  >DB               STR$
[0403] 00DC          ASCZ   EQU  >DC               ASC
[0404] 00DD          PIZ    EQU  >DD               PI
[0405] 00DE          RECZ   EQU  >DE               REC
[0406] 00DF          MAXZ   EQU  >DF               MAX
[0407] 00E0          MINZ   EQU  >E0               MIN
[0408] 00E1          RPTZZ  EQU  >E1               RPT$
[0409]               *      EQU  >E2               unused
[0410]               *      EQU  >E3               unused
[0411]               *      EQU  >E4               unused
[0412]               *      EQU  >E5               unused
[0413]               *      EQU  >E6               unused
[0414]               *      EQU  >E7               unused
[0415] 00E8          NUMERZ EQU  >E8               NUMERIC
[0416] 00E9          DIGITZ EQU  >E9               DIGIT
[0417] 00EA          UALPHZ EQU  >EA               UALPHA
[0418] 00EB          SIZEZ  EQU  >EB               SIZE
[0419] 00EC          ALLZ   EQU  >EC               ALL
[0420] 00ED          USINGZ EQU  >ED               USING
[0421] 00EE          BEEPZ  EQU  >EE               BEEP
[0422] 00EF          ERASEZ EQU  >EF               ERASE
[0423] 00F0          ATZ    EQU  >F0               AT
[0424] 00F1          BASEZ  EQU  >F1               BASE
[0425]               *      EQU  >F2               spare token (TEMPORARY)
[0426] 00F3          VARIAZ EQU  >F3               VARIABLE
[0427] 00F4          RELATZ EQU  >F4               RELATIVE
[0428] 00F5          INTERZ EQU  >F5               INTERNAL
[0429] 00F6          SEQUEZ EQU  >F6               SEQUENTIAL
[0430] 00F7          OUTPUZ EQU  >F7               OUTPUT
[0431] 00F8          UPDATZ EQU  >F8               UPDATE
[0432] 00F9          APPENZ EQU  >F9               APPEND
[0433] 00FA          FIXEDZ EQU  >FA               FIXED
[0434] 00FB          PERMAZ EQU  >FB               PERMANENT
[0435] 00FC          TABZ   EQU  >FC               TAB
[0436] 00FD          NUMBEZ EQU  >FD               #
[0437] 00FE          VALIDZ EQU  >FE               VALIDATE
[0438]               *      EQU  >FF               ILLEGAL VALUE
[0439]               ***********************************************************
[0440]                      GROM >C000
[0441]                      AORG 0
[0442] C000 AA,18           DATA >AA18      * VALID GROM / VERSION 2224
[0443] C002 00,00           DATA >0000      * (FUTURE EXPANSION)
[0444] C004 00,00           DATA >0000      * POWERUP
[0445] C006 00,00           DATA >0000      * PROGRAMS
[0446] C008 00,00           DATA >0000      * DSR 
[0447] C00A 00,00           DATA >0000      * CALL
[0448] C00C 00,00           DATA >0000      * INTERUPT
[0449] C00E 00,00           DATA >0000      * BASIC CALL

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0008 
RXB 2024
[0450]               ***********************************************************
[0451]               * ASSEMBLY LANGUAGE SUPPORT FOR 99/4
[0452]               *
[0453]               * LOAD, INIT, PEEK, LINK, CHARPAT      JDH  08/21/80
[0454]               ***********************************************************
[0455]               * FORMAT FOR LOAD:
[0456]               *  CALL LOAD open load-directive (comma load-directive)
[0457]               *            close
[0458]               *    load-directive = file-name / address (comma data)
[0459]               *                     (null / file-name)
[0460]               *    file-name      = string-expression
[0461]               *    address        = numeric-expression
[0462]               *    data           = numeric-expression
[0463]               *
[0464]               *  FILE TYPE = FIXED 80, DISPLAY , SEQUENTIAL FILE
[0465]               *
[0466]               * FUNCTION:
[0467]               *  LOADS ASSEMBLY LANGUAGE CODE INTO EXPANSION RAM
[0468]               *  ADDRESSES: >2000 - >>3FFF RELOCATING
[0469]               *  RELOCATABLE CODE INTO AVAILABLE MEMORY, ABSOLUTE CODE
[0470]               *  IS LOADED
[0471]               *  INTO ITS ABSOLUTE ADDRESS, ENTRY POINTS ARE DEFINED BY
[0472]               *  'DEF' STATEMENTS, AND ARE LOADED INTO HIGH END OF ERAM
[0473]               *
[0474]               *  RELOACATABLE OR ABSOLUTE CODE MAY BE STORED ON A FILE
[0475]               *  9900 OBJECT CODE FORMAT.
[0476]               *   VALID TAGS = 0, 5, 6, 7, 9, A, B, C, F,:
[0477]               *         TAGS 1, 2, I, M, ARE IGNORED
[0478]               *  THE SYMT OPTION IS NOT SUPPORTED.
[0479]               *  ABSOLUTE CODE MAY BE LOADED DIRECTLY FROM PROGRAM
[0480]               *  BY SPECIFYING AN ADDRESS INSTEAD OF A FILE NAME,
[0481]               *  FOLLOWED BY THE DATA TO BE LOADED (WHICH IS PUT IN THE
[0482]               *   RANGE 0 to 255
[0483]               *  THE RANGE OF THE ADDRESS OR DATA IS LIMITED TO
[0484]               *   32767 to -32768
[0485]               *  MULTIPLE DIRECT LOADS CAN BE IN THE SAME LOAD COMMAND
[0486]               *  PROVIDED THEY ARE SEPARATED BY EITHER A FILENAME OR A
[0487]               *   NULL STRING.
[0488]               *
[0489]               * RXB CHANGED MVUP TO GPL MOVE AS MOVING 2 BYTES USING 14 
[0490]               * BYTES OF GPL TO MOVE RAM TO SCRATCH PAD WAS SLOWER.
[0491]               *
[0492]               *  MVUP WAS USED TO TRANSFER DATA FROM CPU RAM TO ERAM
[0493]               *  SINCE IT WAS NOT KNOWN AT FIRST THAT THE MOVE
[0494]               *  INSTRUCTION COULD TRANSFER FROM CPU RAM TO ERAM
[0495]               *   (PROVIDED THAT >8300 IS SUBTRACTED FROM THE ADDRESSES)
[0496]               ***********************************************************
[0497]               * RXB PATCH CHANGED CALL INIT TO ROM 3
[0498]               * REPLACING ORIGINAL TO ASSEMBY IN 1 CHUNK
[0499]               ***********************************************************
[0500]               * RXB BRANCH TABLE FOR LONG GROMS
[0501]               * >C010 was CALL LINK
[0502]               ***********************************************************
[0503]               * CALL LINK("subprogram-name",arguement-list,...)         *
[0504]               ***********************************************************
[0505] C010 C0,19           DATA SLOADF
[0506] C012 04,4C,49        STRI 'LINK'
       C015 4E,4B
[0507] C017 C3,14           DATA LINKIT
[0508]               ***********************************************************
[0509]               * CALL LOAD("pathname.file")                              *
[0510]               * CALL LOAD("access-name",byte1,byte2,byte3,...)          *
[0511]               ***********************************************************
[0512] C019 C0,22    SLOADF DATA SINITR

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0009 
RXB 2024
[0513] C01B 04,4C,4F        STRI 'LOAD'
       C01E 41,44
[0514] C020 C0,40           DATA LOAD
[0515]               ***********************************************************
[0516]               * CALL INIT                                               *
[0517]               ***********************************************************
[0518] C022 C0,2B    SINITR DATA SPEEK
[0519] C024 04,49,4E        STRI 'INIT'
       C027 49,54
[0520] C029 C2,AB           DATA INIT
[0521]               ***********************************************************
[0522]               * CALL PEEK(address,numeric-varible-list,...)             *
[0523]               ***********************************************************
[0524] C02B C0,34    SPEEK  DATA CHARPT
[0525] C02D 04,50,45        STRI 'PEEK'
       C030 45,4B
[0526] C032 C5,BE           DATA GKPEEK
[0527]               ***********************************************************
[0528]               * CALL CHARPAT(character#,string-variable,...)            *
[0529]               ***********************************************************
[0530] C034 C5,9A    CHARPT DATA POKEV
[0531] C036 07,43,48        STRI 'CHARPAT'
       C039 41,52,50
       C03C 41,54
[0532] C03E C4,1B           DATA GETCHR
[0533]               * LOAD - LDP1 - LDP4 - LDP5
[0534]               ** CHKSUM is also used as a flag to test if a file has been
[0535]               ** opened (so that it gets closed)
[0536]               ** it is initialized to >0001 and will be changed to some
[0537]               ** other value if a file is used
[0538]               ***********************************************************
[0539]               * CALL LOAD("DSK#.FILENAME"[,...])                         
[0540]               * CALL LOAD(ADDRESS,LIST[,...])                           *
[0541]               ***********************************************************
[0542] C040 BF,02,00 LOAD   DST  >0001,@CHKSUM     {INITIALIZE FILE FLAG}
       C043 01
[0543]               * GKXB Change load routine. Delete check for INIT
[0544]               *      add to clear flag bits.
[0545] C044 06,C5,95        CALL GKLOAD
[0546] C047 D6,42,B7 LPD0   CEQ  LPARZ,@CHAT       SYNTAX ERROR if no "("
[0547] C04A 44,BE           BR   ERRSY1
[0548] C04C 0F,79           XML  PGMCHR            Skip over
[0549]               * MAIN PARESE LOOP *
[0550]               * Check for file-name or address
[0551] C04E 0F,74    LDP1   XML  PARSE
[0552] C050 B6              BYTE RPARZ           * PARSE up to ")" or ","
[0553] C051 D6,4C,65        CEQ  STRING,@FAC2      Process file name
[0554] C054 60,8D           BS   LDP2
[0555]               * Otherwise it is an address
[0556]               * Convert address to integer, save in @PC
[0557] C056 0F,12           XML  CFI               Convert FAC to integer
[0558] C058 D6,54,03        CEQ  3,@FAC10          Check for overflow
[0559] C05B 64,B7           BS   ERRN01
[0560] C05D BD,04,4A        DST  @FAC,@PC          Save in ERAM location pointer
[0561]               * Check for "," if there then data should folow
[0562]               *  else end of load statement, goto LDP5
[0563] C060 D6,42,B3 LDP4   CEQ  COMMAZ,@CHAT
[0564] C063 40,85           BR   LDP5
[0565]               * DATA follows or a STRING if no more data
[0566] C065 0F,79           XML  PGMCHR            Skip ","
[0567] C067 0F,74           XML  PARSE             Get data value or string if
[0568]               *                              end of data
[0569] C069 B6              BYTE RPARZ           * Parse up to ")" or ","
[0570] C06A D6,4C,65        CEQ  STRING,@FAC2      No more data

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0010 
RXB 2024
[0571] C06D 60,8D           BS   LDP2
[0572]               * FAC contains a numeric
[0573] C06F 0F,12           XML  CFI               FAC to INTEGER
[0574] C071 D6,54,03        CEQ  3,@FAC10          Check for overflow
[0575] C074 64,B7           BS   ERRN01
[0576]               * GKXB Code for CPU write moved to LOADDT. Add code to
[0577]               *      check VDP or GRAM bits and write to VDP.
[0578] C076 DA,80,C2        CLOG >08,@GKFLAG       Check VDP bit
       C079 08
[0579] C07A 66,0B           BS   LDGRAM            No, check GRAM bit
[0580] C07C BC,B0,04        ST   @FAC1,V*PC        Yes, write to VDP
       C07F 4B
[0581] C080 91,04           DINC @PC               Point to next byte
[0582] C082 05,C0,60        B    LDP4              Continue with LOAD routine
[0583]               * GROM ADDRESS >C088 FOR LDP5
[0584]               * Check for ")"  IF there return ELSE SYNTAX ERROR
[0585] C085 D6,42,B6 LDP5   CEQ  RPARZ,@CHAT       Return
[0586] C088 61,DE           BS   LDRET
[0587] C08A 05,C4,BE        B    ERRSY1            SYNTAX ERROR
[0588]               * LDP2
[0589]               * Process file name
[0590] C08D 8E,51    LDP2   CZ   @FAC7             Check for null string
[0591] C08F 61,CF           BS   LDNE2
[0592]               * GKXB Change 'LOAD FILE' to check for INIT
[0593] C091 06,C5,AE        CALL GKINIT
[0594]               *************** LOAD DATA INTO ERAM ***********************
[0595]               * LOAD FRESTA, FREEND from ERAM
[0596] C094 BF,16,20        DST  FSLOC,@VARB          Source
       C097 02
[0597] C098 BF,00,83        DST  FRESTA,@PAD          Destination
       C09B 08
[0598] C09C BF,5C,00        DST  4,@ARG               # of bytes to move
       C09F 04
[0599] C0A0 0F,89           XML  MVUP                 Load
[0600]               * Initialize PC, OFFSET in case of no "0" tag
[0601] C0A2 BD,04,08        DST  @FRESTA,@PC
[0602] C0A5 BD,06,08        DST  @FRESTA,@OFFADD   Base address for load module
[0603]               * Read in one record, evaluate the TAG field
[0604]               * LDRD - LDTG
[0605] C0A8 BF,02,00 LDRD   DST  0,@CHKSUM         Clear check sum
       C0AB 00
[0606] C0AC 06,C2,54        CALL READIT            Rear in a record
[0607] C0AF 35,00,05 LDTG   MOVE 5,V*BUFPNT,@TAG   Get TAG & field
       C0B2 10,B0,0E
[0608] C0B5 06,C1,F1        CALL LDIPCS            Add 5 to BUFPNT, add ASCII
[0609] C0B8 05              BYTE 5               * Value of chars. Read to check
[0610]               * Convert @FIELD to numeric (from ASCII hex value)
[0611]               * Store result: HIGH BYTE to FIELD, LOW BYTE to FIELD+1
[0612]               * Convert HIGH BYTE first: @FIELD & @FIELD+1
[0613]               * Store result in field
[0614] C0B9 A6,11,30        SUB  >30,@FIELD        >30 = "0"
[0615] C0BC CE,11,09        CGT  9,@FIELD          Subtract ASCII difference
[0616]               *                              between "9" and "A"
[0617] C0BF 40,C4           BR   GC0C7
[0618] C0C1 A6,11,07        SUB  7,@FIELD
[0619] C0C4 E2,11,04 GC0C7  SLL  4,@FIELD          FIELD=FILED*32
[0620] C0C7 A6,12,30        SUB  >30,@FIELD+1
[0621] C0CA CE,12,09        CGT  9,@FIELD+1
[0622] C0CD 40,D2           BR   GC0D5
[0623] C0CF A6,12,07        SUB  7,@FIELD+1
[0624] C0D2 A0,11,12 GC0D5  ADD  @FIELD+1,@FIELD   Add to HIGH BYTE
[0625]               * Now convert LOW BYTE: @FIELD+2 & @FIELD+3
[0626]               * Store result in LOW BYTE of FIELD to FIELD+1
[0627] C0D5 A6,13,30        SUB  >30,@FIELD+2

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0011 
RXB 2024
[0628] C0D8 CE,13,09        CGT  9,@FIELD+2
[0629] C0DB 40,E0           BR   GC0E3
[0630] C0DD A6,13,07        SUB  7,@FIELD+2
[0631] C0E0 BC,12,13 GC0E3  ST   @FIELD+2,@FIELD+1 Store in LOW byte of result
[0632] C0E3 E2,12,04        SLL  4,@FIELD+1        FIELD+1 = FIELD+1*32
[0633] C0E6 A6,14,30        SUB  >30,@FIELD+3
[0634] C0E9 CE,14,09        CGT  9,@FIELD+3
[0635] C0EC 40,F1           BR   GC0F4
[0636] C0EE A6,14,07        SUB  7,@FIELD+3
[0637] C0F1 A0,12,14 GC0F4  ADD  @FIELD+3,@FIELD+1 Add to low byte
[0638]               * Branch to evaluation procedure for TAG
[0639] C0F4 A6,10,30        SUB  >30,@TAG          >30 = "0"
[0640] C0F7 D2,10,00        CGE  0,@TAG            If TAG < "0" ILLEGAL CHAR
[0641] C0FA 45,53           BR   ERRUC1
[0642] C0FC CE,10,0A        CGT  >0A,@TAG          TAGS "0" to ":"
[0643] C0FF 61,19           BS   GC11C
[0644] C101 8A,10           CASE @TAG
[0645] C103 41,45           BR   TAG0              "0" RELOCATABLE LENGTH
[0646] C105 40,AF           BR   LDTG              IGNORE "1" TAG
[0647] C107 40,AF           BR   LDTG              IGNORE "2" TAG
[0648] C109 45,53           BR   ERRUC1            No external REF "3"
[0649] C10B 45,53           BR   ERRUC1            No external REF "4"
[0650] C10D 41,5A           BR   TAG5              "5" relocatable entry DEF
[0651] C10F 41,5D           BR   TAG6              "6" Absolute entry    DEF
[0652] C111 41,8F           BR   TAG7              "7" check sum
[0653] C113 40,AF           BR   LDTG              "8" ignore check sum
[0654] C115 41,9C           BR   TAG9              "9" Absolute LOAD address
[0655] C117 41,B7           BR   LDDNE             ":" end of file
[0656] C119 A6,10,11 GC11C  SUB  >11,@TAG          Subtract offset so
[0657]               *                              that "A" is =0
[0658] C11C D2,10,00        CGE  0,@TAG            ";" to "@" illegal char
[0659] C11F 45,53           BR   ERRUC1
[0660]               * Skip over "I" tag - 8 char, program ID that follows
[0661] C121 D6,10,08        CEQ  8,@TAG
[0662] C124 61,53           BS   LDTG2
[0663]               * Skip over "M" TAG -10 char, program ID that follows
[0664] C126 D6,10,0C        CEQ  12,@TAG
[0665] C129 41,32           BR   LDTG3
[0666] C12B 06,C1,F1        CALL LDIPCS
[0667] C12E 0A              BYTE 10
[0668] C12F 05,C0,AF        B    LDTG
[0669] C132 CE,10,05 LDTG3  CGT  5,@TAG            TAGS "G" are legal
[0670] C135 65,53           BS   ERRUC1
[0671] C137 8A,10           CASE @TAG
[0672] C139 41,99           BR   TAGA              "A" RELOCATABLE PROGRAM ADDRE
[0673] C13B 41,A5           BR   TAGB              "B" ABSOLUTE VALUE
[0674] C13D 41,A2           BR   TAGC              "C" RELATIVE ADDRESS
[0675] C13F 45,53           BR   ERRUC1            "D" ERROR
[0676] C141 45,53           BR   ERRUC1            "E" ERROR - UNDEFINED
[0677] C143 40,A8           BR   LDRD              "F" END OF RECORD
[0678]               * TAG0 to TAGB
[0679]               * EVALUATE TAG FIELDS
[0680] C145 BD,06,08 TAG0   DST  @FRESTA,@OFFADD   NEW BASE ADDRESS
[0681] C148 BD,04,08        DST  @FRESTA,@PC       NEW PC
[0682] C14B A1,08,11        DADD @FIELD,@FRESTA    ADD LENGTH TO FIND END OF
[0683]               *                              RELOCATABLE PROGRAM WHICH IS
[0684]               *                              START OF NEXT PROGRAM
[0685]               * Make sure we won't run into routine name table now, so we
[0686]               *  don't have to check every time we load a value into ERAM
[0687]               *  routine table must make sure it doesn't run into
[0688]               *  relocatable assembly language code through.
[0689] C14E C9,08,0A        DCHE @FREEND,@FRESTA   OUT OF MEMORY
[0690] C151 64,E1           BS   ERRMF1
[0691]               * SKIP OVER PROGRAM ID - 8 BYTES

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0012 
RXB 2024
[0692] C153 06,C1,F1 LDTG2  CALL LDIPCS
[0693] C156 08              BYTE 8               * INC BUFPNT, COMPUTE CHECKSUM
[0694] C157 05,C0,AF        B    LDTG
[0695] C15A A1,11,06 TAG5   DADD @OFFADD,@FIELD    Add starting offset
[0696]               * TAG6 is an absolute address so do not need to add offset
[0697] C15D 35,00,06 TAG6   MOVE 6,V*BUFPNT,@INDEX    Get symbol name
       C160 5E,B0,0E
[0698] C163 06,C1,F1        CALL LDIPCS            INC BUPNT, COMPUT CHECKSUM
[0699] C166 06              BYTE 6              *  We read 6 chars
[0700]               * Add symbol and its address - stopped in field - to the
[0701]               *  routine entry table. It is put at the end of the table
[0702]               *  (the end of the table is towards the low end of memory)
[0703]               *  Since the table is searched from the end first, if there
[0704]               *  are any duplicate labels the last one entered will have
[0705]               *  precedence over the early one(s).
[0706] C167 97,0A           DDECT @FREEND          Set to address field
[0707]               * Load address (stored in field in CPU RAM) into routine
[0708]               *  Name table which is in expansion RAM
[0709] C169 BF,16,83        DST  FIELD,@VARB       Source
       C16C 11
[0710] C16D BD,00,0A        DST  @FREEND,@PAD      Destination
[0711] C170 BF,5C,00        DST  2,@ARG            # bytes to move
       C173 02
[0712] C174 0F,89           XML  MVUP              CPUR RAM to ERAM
[0713]               * Load symbol into routine name table
[0714] C176 A7,0A,00        DSUB 6,@FREEND         Set to symbol field
       C179 06
[0715] C17A BF,16,83        DST  INDEX,@VARB        Source
       C17D 5E
[0716] C17E BD,00,0A        DST  @FREEND,@PAD       Destination
[0717] C181 BF,5C,00        DST  6,@ARG             Move 6 bytes
       C184 06
[0718] C185 0F,89           XML  MVUP              CPU RAM to ERAM
[0719]               * Check to see if we've run into assembly language code
[0720] C187 C9,08,0A        DCHE @FREEND,@FRESTA   Out of memory
[0721] C18A 64,E1           BS   ERRMF1
[0722] C18C 05,C0,AF        B    LDTG              If not then continue
[0723]               ***********************************************************
[0724]               * ROUTINE NAME TABLE ENTRY
[0725]               *
[0726]               *                     0   1   2   3   4   5   6  7
[0727]               *                   -----------------------------------
[0728]               *        FREEND     | S | Y | M | B | O | L | ADDRESS |
[0729]               *    (AFTER ENTRY)  -----------------------------------
[0730]               *        FREEND     |   |   |   |   |   |   |         |
[0731]               *    (BEFORE ENTRY) -----------------------------------
[0732]               *
[0733]               *  FREEND is initialized to >4000 by INIT, address is at
[0734]               *   a higher memory location then symbol
[0735]               ***********************************************************
[0736] C18F 83,11    TAG7   DNEG @FIELD            Checksum is 1's compelement
[0737] C191 D5,02,11        DCEQ @FIELD,@CHKSUM    Check sum error
[0738] C194 45,3C           BR   ERRDE1
[0739] C196 05,C0,AF        B    LDTG
[0740] C199 A1,11,06 TAGA   DADD @OFFADD,@FIELD    PC = OFFADD ^ FIELD
[0741]               * TAG 9 is an absolute address so no need to add offset
[0742] C19C BD,04,11 TAG9   DST  @FIELD,@PC
[0743] C19F 05,C0,AF        B    LDTG
[0744] C1A2 A1,11,06 TAGC   DADD @OFFADD,@FIELD
[0745]               * TAG B is an absolute entry so no need to add offset
[0746]               * Relocatable code is checked to see if it will run into
[0747]               *  is no need to check now. Absolute code can go anywhere.
[0748]               *
[0749]               * Load field into expansion RAM using MVUP routine

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0013 
RXB 2024
[0750] C1A5 BD,00,04 TAGB   DST  @PC,@PAD           Destination
[0751] C1A8 BF,16,83        DST  FIELD,@VARB        Source
       C1AB 11
[0752] C1AC BF,5C,00        DST  2,@ARG             Move 2 bytes
       C1AF 02
[0753] C1B0 0F,89           XML  MVUP              CPU RAM to ERAM
[0754] C1B2 95,04           DINCT @PC              We loaded 2 bytes
[0755] C1B4 05,C0,AF        B    LDTG
[0756]               ********* END OF LOAD FOR CURRENT FILE ********************
[0757]               *
[0758]               * FRESTA & FREEND are stored in CPU RAM (>8308)
[0759]               * While loading a file into expansion RAM.
[0760]               * So if the values of FRESTA or FREEND are to be changed
[0761]               * then word locations >8308 and >830A must be changed and
[0762]               * not expansion RAM.
[0763]               *
[0764]               * LDDNE - LDNE2
[0765]               *
[0766]               *   DONE WITH LOAD
[0767]               * Put FRESTA, FREEND back into expansion RAM
[0768]               * If FRESTA is odd then make it even
[0769]               *  so that the next program starts on an even boundry
[0770] C1B7 DA,09,01 LDDNE  CLOG 1,@FRESTA+1       Low byte odd?
[0771] C1BA 61,BE           BS   GC1C1
[0772] C1BC 91,08           DINC @FRESTA           Force to next even boundry
[0773] C1BE BF,16,83 GC1C1  DST  FRESTA,@VARB         Source
       C1C1 08
[0774] C1C2 BF,00,20        DST  FSLOC,@PAD           Destination
       C1C5 02
[0775] C1C6 BF,5C,00        DST  4,@ARG               Load 4 bytes
       C1C9 04
[0776] C1CA 0F,89           XML  MVUP              CPU RAM to ERAM
[0777] C1CC 06,C2,68        CALL CLSIT             Close file
[0778]               * Check for end of load command ")"
[0779] C1CF D6,42,B6 LDNE2  CEQ  RPARZ,@CHAT       Check for ")"
[0780] C1D2 61,DE           BS   LDRET
[0781] C1D4 D6,42,B3        CEQ  COMMAZ,@CHAT      Syntax error
[0782] C1D7 44,BE           BR   ERRSY1
[0783] C1D9 0F,79           XML  PGMCHR            Skip comma
[0784] C1DB 05,C0,4E        B    LDP1              Continue in main loop
[0785]               *************** LDRET - LDRET2 ****************************
[0786]               *
[0787]               * Return to calling routine
[0788] C1DE 0F,79    LDRET  XML  PGMCHR            Skip over
[0789]               * Entry point for INIT
[0790] C1E0 06,6A,78 LDRET2 CALL CHKEND            Check for end of statement
[0791] C1E3 44,BE           BR   ERRSY1            If not end then syntax error
[0792] C1E5 06,00,12        CALL RETURN            Return to caller
[0793]               ********************** CHKIN ******************************
[0794]               * Check for INIT-FLAG = >AA55
[0795]               * MOVE ERAM(INITF) to CPU *FAC
[0796] C1E8          PAGE   EQU  $
[0797] C1E8 D7,8F,9D CHKIN  DCEQ >AA55,@INITF  *** RXB REPLACEMENT ROUTINE ****
       C1EB 06,AA,55
[0798] C1EE 44,C1           BR   ERRSYN          * SYNTAX ERROR
[0799]               * No files have been opened so if there is a syntax error
[0800]               *  goto ERRSYN!
[0801] C1F0 00               RTN                 * RETURN TO CALLING ROUTINE
[0802]               *********************** FILE ROUTINES *********************
[0803]               ***********************************************************
[0804]               * INCREMENT BUFFER POINTER by value after call statement
[0805]               * ADD VALUES READ TO CHECKSUM unless the first character
[0806]               * is a "7" = >37 , then add only "7" character to checksum
[0807]               * (other value is the checksum)

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0014 
RXB 2024
[0808]               *
[0809]               *************************** LDIPCS ************************
[0810] C1F1 88,15    LDIPCS FETCH @INDEXC          Index = # of bytes read
[0811] C1F3 D6,B0,0E        CEQ  >37,V*BUFPNT
       C1F6 37
[0812] C1F7 42,04           BR   GC213
[0813] C1F9 A3,02,00        DADD >0037,@CHKSUM     Add value of "7" to checksum
       C1FC 37
[0814] C1FD A3,0E,00        DADD 5,@BUFPNT         1 for "7", 4 for checksum
       C200 05
[0815] C201 05,C2,15        B    GC224
[0816] C204 BC,4B,B0 GC213  ST   V*BUFPNT,@FAC1    Convert to 2 byte value
       C207 0E
[0817] C208 86,4A           CLR  @FAC              -----------------------------
[0818] C20A A1,02,4A        DADD @FAC,@CHKSUM      Add char to checksum
[0819] C20D 91,0E           DINC @BUFPNT
[0820] C20F 92,15           DEC  @INDEXC           Do it index # of times
[0821] C211 8E,15           CZ   @INDEXC
[0822] C213 42,04           BR   GC213
[0823] C215 00       GC224  RTN
[0824]               ********************** OPENIT *****************************
[0825] C216 BD,0C,50 OPENIT DST  @FAC6,@BYTES      Store actual spec length
[0826] C219 A3,0C,00        DADD PABLEN+80,@BYTES  Add in the PAB length and
       C21C 5A
[0827]               *                              buffer length
[0828] C21D 0F,77           XML  VPUSH             Push possible temp string
[0829] C21F 0F,71           XML  GETSTR             and try to allocate space
[0830] C221 0F,78           XML  VPOP              Restore original string data
[0831]               *
[0832]               * THE FOLLOWING VARIABLES CONTAIN IMPORTANT INFO
[0833]               *
[0834]               *   FAC4, FAC5    Start address of original device specific
[0835]               *   FAC6, FAC7    Length of original device specifications
[0836]               *   SREF          Location of PAB in VDP memory
[0837]               *   BYTES         Length of entire PAB including specificat
[0838] C223 34,50,E0        MOVE @FAC6,V*FAC4,V@PABLEN(@SREF) * Device pathname
       C226 0A,1C,B0
       C229 4E
[0839] C22A 86,B0,1C        CLR  V*SREF               Clear the entire PAB
[0840] C22D 35,00,09        MOVE PABLEN-1,V*SREF,V@1(@SREF)   * Clear PAB
       C230 E0,01,1C
       C233 B0,1C
[0841] C235 BC,E0,09        ST   @FAC7,V@NLEN(@SREF)  Copy specifications length
       C238 1C,51
[0842] C23A BE,E0,08        ST   >60,V@SCR(@SREF)     Screen offset
       C23D 1C,60
[0843] C23F BE,E0,01        ST   4,V@FLG(@SREF)       Dis, fix, seq, input
       C242 1C,04
[0844] C244 A1,50,1C        DADD @SREF,@FAC6          Calculate the address of
[0845] C247 A3,50,00        DADD PABLEN,@FAC6          the buffer
       C24A 0A
[0846] C24B BD,E0,02        DST  @FAC6,V@BUF(@SREF) Store buffer address in PAB
       C24E 1C,50
[0847] C250 06,C2,6C        CALL DSRCAL
[0848] C253 00              RTN
[0849]               ***********************************************************
[0850] C254 BD,0E,E0 READIT DST  V@BUF(@SREF),@BUFPNT   INIT buffer pointer
       C257 02,1C
[0851] C259 BE,B0,1C        ST   2,V*SREF
       C25C 02
[0852] C25D BC,E0,05        ST   V@LEN(@SREF),V@CHRCNT(@SREF)
       C260 1C,E0,04
       C263 1C
[0853] C264 06,C2,6C        CALL DSRCAL

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0015 
RXB 2024
[0854] C267 00              RTN
[0855]               ************************* CLSIT ***************************
[0856] C268 BE,B0,1C CLSIT  ST   1,V*SREF          Prepare to close
       C26B 01
[0857]               ******************** DSRCAL - DSKERR **********************
[0858] C26C BD,56,1C DSRCAL DST  @SREF,@FAC12      Compute start address of spec
[0859] C26F A3,56,00        DADD NLEN,@FAC12       Ready to call DSR routine
       C272 09
[0860] C273 06,00,10        CALL LINK              Call DSR thourgh program link
[0861] C276 08              BYTE 8               * Type = DSR (8)
[0862] C277 62,81           BS   DSKERR            Couldn't find the DSR
[0863] C279 DA,E0,01        CLOG >E0,V@FLG(@SREF)  Set condition bit if no error
       C27C 1C,E0
[0864] C27E 42,81           BR   DSKERR
[0865] C280 00              RTN
[0866] C281 BD,04,40 DSKERR DST  @FREPTR,@PABPTR   Set up dummy PAB
[0867] C284 A7,04,00        DSUB 6,@PABPTR         Make it standard size
       C287 06
[0868] C288 BD,E0,04        DST  V*SREF,V@4(@PABPTR) Store error code
       C28B 04,B0,1C
[0869] C28E 06,C2,95        CALL CLSNOE              Close File
[0870] C291 06,6A,84        CALL ERRZZ               Issue I/O error
[0871] C294 24              BYTE 36              *
[0872]               ********************** CLSNOE *****************************
[0873]               * Try to close the current file
[0874]               * Ignore any errors from the closing of the file.
[0875]               * Since the PAB is not in the normal PAB list
[0876]               *  then we have to close the file in the load routine.
[0877]               * ERRZZ will close the rest of the files.
[0878]               *
[0879]               ** CLOSE IT ONLY IF IT HAS BEEN OPENED
[0880] C295 D7,02,00 CLSNOE DCEQ 1,@CHKSUM         Check file flag
       C298 01
[0881] C299 62,AA           BS   GC2B9
[0882] C29B BE,B0,1C        ST   1,V*SREF          Store close file code
       C29E 01
[0883] C29F BD,56,1C        DST  @SREF,@FAC12      Compute start address of spec
[0884] C2A2 A3,56,00        DADD NLEN,@FAC12       Ready to CALL DSR
       C2A5 09
[0885] C2A6 06,00,10        CALL LINK              CALL DSR through program link
[0886] C2A9 08              BYTE 8               * "8" is type of DSR
[0887] C2AA 00       GC2B9  RTN
[0888]               ***********************************************************
[0889]               * INIT                        JDH   9/02/80
[0890]               ***********************************************************
[0891]               * CALL INIT                                               *
[0892]               ***********************************************************
[0893]               * Check if expansion RAM present
[0894]               * Load support into expansion RAM from GROM
[0895] C2AB 8E,80,84 INIT   CZ   @RAMTOP           If no ERAM, SYNTAX ERROR
[0896] C2AE 64,C1           BS   ERRSYN
[0897]               ** Load Assembly header, support routines **
[0898]               * GKXB Correct INIT routine.
[0899] C2B0 86,8F,DD        CLR  @>6004           * Set ROM PAGE 3 at >6004
       C2B3 04
[0900] C2B4 0F,8B           XML  CINIT            * Move from ROM 3 to RAM
[0901] C2B6 05,C5,8F        B    ECRTN            * RXB custom return routine
[0902]               ***********************************************************
[0903]               * PEEK INSTRUCTION            JDH   9/04/80
[0904]               ***********************************************************
[0905]               *
[0906]               * FORMAT:
[0907]               *  CALL PEEK(address comma numeric-variable) * close
[0908]               * FUNCTION:

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0016 
RXB 2024
[0909]               *  RETURNS THE VALUE AT address IN ERAM INTO numeric-variab
[0910]               *  IF MORE THAN ONE numeric-variable IS SPECIFIED THEN
[0911]               *  address IS INCREMENTED AND THE VALUE IN ERAM AT THE NEW
[0912]               *  address IS ASSIGNED TO THE NEXT VARIABLE AND SO ON.
[0913]               *
[0914] C2B9 D6,42,B7 PEEK   CEQ  LPARZ,@CHAT       Chat = "("
[0915] C2BC 44,C1           BR   ERRSYN
[0916] C2BE 0F,79           XML  PGMCHR            Skip "("
[0917] C2C0 0F,74           XML  PARSE             Get value of address
[0918] C2C2 B6              BYTE RPARZ
[0919] C2C3 D6,4C,65        CEQ  STRING,@FAC2      Address MUST BE NUMERIC
[0920] C2C6 64,D1           BS   ERRSNM
[0921] C2C8 0F,12           XML  CFI               Convert FAC to integer
[0922] C2CA D6,54,03        CEQ  3,@FAC10          Overflow?
[0923] C2CD 64,BA           BS   ERRNO
[0924] C2CF BD,04,4A        DST  @FAC,@PC          Save peek address
[0925] C2D2 D6,42,B3        CEQ  COMMAZ,@CHAT      CHAT = "," ?
[0926] C2D5 44,C1           BR   ERRSYN
[0927] C2D7 0F,79    PEEK2  XML  PGMCHR            Skip ","
[0928]               * The following check has been put in SYM, 5/26/81
[0929]               * If @CHAT >= >80 then ERRSYN (Don't allow token)
[0930] C2D9 0F,7A           XML  SYM               Get symbol name
[0931] C2DB 0F,7B           XML  SMB               Get value pointer
[0932] C2DD 0F,77           XML  VPUSH             Save FAC on stack for ASSGNV
[0933] C2DF 8E,4C           CZ   @FAC2             Must be numeric
[0934] C2E1 44,D1           BR   ERRSNM
[0935] C2E3 86,4A           CLR  @FAC
[0936] C2E5 35,00,07        MOVE 7,@FAC,@FAC1      Clear FAC
       C2E8 4B,4A
[0937]               ** GET PEEK VALUE FROM ERAM INTO  @FAC1
[0938]               * GKXB Change PEEK routine to read VDP/GRAM. Move CPU read
[0939]               *      code to PEEKDT and add code for bite check and VDP
[0940]               *      read.
[0941] C2EA DA,80,C2        CLOG >08,@GKFLAG       Check VDP bit
       C2ED 08
[0942] C2EE 66,2A           BS   PKGRAM            No, check GROM bit
[0943] C2F0 BC,4B,B0        ST   V*PC,@FAC1        Yes, read VDP
       C2F3 04
[0944] C2F4 05,C2,F7        B    GC308
[0945] C2F7 0F,80    GC308  XML  CIF               Convert FAC to F.P. value
[0946] C2F9 0F,7C           XML  ASSGNV            Assign to numeric-variable
[0947] C2FB D6,42,B3        CEQ  COMMAZ,@CHAT
[0948] C2FE 43,05           BR   PEEK5
[0949] C300 91,04           DINC @PC               INC pointer to next ERAM addr
[0950] C302 05,C2,D7        B    PEEK2
[0951]               * CHECK FOR ")" AND END OF STATEMENT
[0952]               * IF ALL OK, THEN RETURN TO CALLER
[0953]               * GETCHR ALSO RETURNS TO HERE
[0954] C305 D6,42,B6 PEEK5  CEQ  RPARZ,@CHAT
[0955] C308 44,C1           BR   ERRSYN
[0956] C30A 0F,79           XML  PGMCHR            Skip ")"
[0957] C30C 06,6A,78 PEEK6  CALL CHKEND
[0958] C30F 44,C1           BR   ERRSYN
[0959] C311 06,00,12        CALL RETURN            RETURN TO CALLER
[0960]               ***********************************************************
[0961]               * LINK INSTRUCTION : SE Sep 1980
[0962]               ***********************************************************
[0963]               *  FORMAT:
[0964]               *  CALL LINK("file-name",parameter1,parameter2,...)
[0965]               *
[0966]               *  LINK ROUTINE READS THE FILE NAME SPECIFIED BY THE USER A
[0967]               *  SAVE THE ADDRESS OF THE NAME FOR LATER USE. THE FILE WIL
[0968]               *  BE SEARCHED IN UTILITY CODE LATER ON.
[0969]               *

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0017 
RXB 2024
[0970]               *  PARAMETERS ARE PASSED EITHER BY REFERENCE OR BY VALUE.
[0971]               *  NUMERIC OR STRING VARIABLES AND NUMERIC OR STRING ARRAYS
[0972]               *  ARE PASSED BY REFERENCE AND ALL OTHERS INCLUDING A USER
[0973]               *  DEFINED FUNCTION ARE PASSED BY VALUE.
[0974]               *
[0975]               *  PARAMETER INFORMATION IS STORED IN CPU >8300 THROUGH >83
[0976]               *  THAT GIVES A PARAMETER TYPE CODE OF EACH PARAMETER.
[0977]               *        CODE 0 ... Numeric expression
[0978]               *        CODE 1 ... String experession
[0979]               *        CODE 2 ... Numeric variable
[0980]               *        CODE 3 ... String variable
[0981]               *        CODE 4 ... Numeric array
[0982]               *        CODE 5 ... String array
[0983]               *
[0984]               *  IF A PARAMETER IS PASSED AS A NUMERIC EXPRESSION ITSL
[0985]               *  ACTUAL VALUE GETS PUSHED INTO THE VALUE STACK. IN CASE O
[0986]               *  A STRING EXPRESSION , ITS VALUE STACK CONTAINS AN ID(>65
[0987]               *  POINTER TO THE VALUE SPACE AND ITS LENGTH. IF A PARAMETE
[0988]               *  GETS PASSED AS A REFERENCE THE PRODUCT OF XML SYM AND XM
[0989]               *  SMB IN THE @FAC AREA GETS PUSHED INTO STACK.
[0990]               *
[0991]               *  AFTER AN ASSEMBLY LANGUAGE SUBPROGRAM IS EXECUTED LINK
[0992]               *  ROUTINE WILL POP THE STACK TO GET RID OF PARAMETER
[0993]               *  INFORMATION. CONTROL WILL BE TRANSFERED TO THE XB MAIN
[0994]               *  PROGRAM AFTERWARDS.
[0995]               *
[0996]               ***********************************************************
[0997]               * CALL LINK("PGNAME",numeric variable,...)                *
[0998]               ***********************************************************
[0999] C314 06,C1,E8 LINKIT CALL CHKIN             Check if INIT has been called
[1000] C317 BD,10,6E        DST  @VSPTR,@OLDS      Save VSPTR for later use
[1001] C31A D6,42,B7        CEQ  LPARZ,@CHAT       Check for "("
[1002] C31D 44,C1           BR   ERRSYN
[1003] C31F 0F,79           XML  PGMCHR            Advance program pointer
[1004] C321 0F,74           XML  PARSE             Get the routine name.
[1005] C323 B6              BYTE RPARZ           * Read up to ")"
[1006] C324 D6,4C,65        CEQ  >65,@FAC2         Should be a string
[1007] C327 45,28           BR   ERRBA
[1008] C329 8F,50           DCZ  @FAC6             Don't accept null string
[1009] C32B 65,28           BS   ERRBA
[1010] C32D C6,51,06        CH   6,@FAC7           Should be less then 6 char
[1011] C330 65,28           BS   ERRBA
[1012] C332 0F,77           XML  VPUSH             Push to make it semi-permanen
[1013] C334 86,12           CLR  @COUNT            Initialize parameter counter
[1014]               ***********************************************************
[1015]               * PARAMETERS get evaluated here
[1016]               ***********************************************************
[1017] C336 D6,42,B6 PAR01  CEQ  RPARZ,@CHAT       No arg. So execute it
[1018] C339 63,F4           BS   EXE01
[1019] C33B D6,42,B3        CEQ  COMMAZ,@CHAT      Should have a comma
[1020] C33E 44,C1           BR   ERRSYN
[1021] C340 BD,22,2C        DST  @PGMPTR,@ERRCOD   Save text pointer
[1022] C343 0F,79           XML  PGMCHR            Get the character
[1023] C345 CA,42,80        CHE  >80,@CHAT         Must be an expression
[1024] C348 63,B6           BS   VAL01
[1025]               * If CHAT = LPARZ then pass by expression
[1026] C34A 06,BF,FA        CALL CLRFAC            Clear FAC entry for SYM
[1027] C34D 0F,7A           XML  SYM               Read in the symbol table info
[1028]               * After XML SYM @FAC area contains a pointer to symbo table
[1029]               * Below statement checks if it is a UDF.
[1030] C34F DA,B0,4A        CLOG >40,V*FAC         Pass by value
       C352 40
[1031] C353 43,B6           BR   VAL01
[1032] C355 D6,42,B3        CEQ  COMMAZ,@CHAT      Pass by reference

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0018 
RXB 2024
[1033] C358 63,D4           BS   REF01
[1034] C35A D6,42,B6        CEQ  RPARZ,@CHAT       Pass by reference
[1035] C35D 63,D4           BS   REF01
[1036] C35F D6,42,B7        CEQ  LPARZ,@CHAT       An array
[1037] C362 63,6B           BS   ARRAY
[1038] C364 CA,42,80        CHE  >80,@CHAT         Pass by value
[1039] C367 63,B6           BS   VAL01
[1040] C369 44,C1           BR   ERRSYN
[1041]               ***********************************************************
[1042]               * ARRAY case gets checked here
[1043]               ***********************************************************
[1044]               * Should look like A(,,) etc.
[1045]               * Stack entry for an array will look like
[1046]               * +--------------+-------+---+-------------+---------------
[1047]               * | Pointer to   |  >00  |   | Pointer to  |
[1048]               * | symbol table |   or  |   | dim info in |
[1049]               * | entry        |  >65  |   | real v.s.   |
[1050]               * +- FAC --------+ FAC2 -+---+- FAC4 ------+- FAC6 --------
[1051]               *
[1052] C36B 0F,79    ARRAY  XML  PGMCHR            Get the next character
[1053] C36D D6,42,B6        CEQ  RPARZ,@CHAT       Pass by reference
[1054] C370 63,7E           BS   ARRAY2
[1055] C372 D6,42,B3        CEQ  COMMAZ,@CHAT      More array information
[1056] C375 63,6B           BS   ARRAY
[1057] C377 93,2C           DDEC @PGMPTR           Adjust the pointer
[1058] C379 BE,42,B7        ST   LPARZ,@CHAT
[1059] C37C 43,D4           BR   REF01             Pass by reference
[1060]               * In array cases the symbol table address gets stored at FA
[1061]               * area, and the pointer to the value space (dimension info)
[1062]               * goes into FAC4
[1063] C37E 0F,79    ARRAY2 XML  PGMCHR            Advance the program pointer
[1064] C380 DA,B0,4A        CLOG >80,V*FAC         Test string bit
       C383 80
[1065] C384 43,8C           BR   GC39D
[1066] C386 BE,90,12        ST   4,*COUNT          Numeric array
       C389 04
[1067] C38A 43,90           BR   GC3A1
[1068] C38C BE,90,12 GC39D  ST   5,*COUNT          String array case
       C38F 05
[1069]               * Check if array is being shared. If it is then go back
[1070]               * through the linkage to get the actuals symbol table
[1071]               * pointer. Put the pointer to the value space (dimension in
[1072]               * into FAC4.
[1073] C390 DA,B0,4A GC3A1  CLOG >20,V*FAC         Shared array?
       C393 20
[1074] C394 63,AD           BS   GC3BE
[1075] C396 35,00,02        MOVE 2,V@6(@FAC),@FAC4 If so, get pointer
       C399 4E,E0,06
       C39C 4A
[1076] C39D DA,EF,FF        CLOG >20,V@-6(@FAC4)   Shared also?
       C3A0 FA,4E,20
[1077] C3A3 63,AB           BS   GC3BC
[1078] C3A5 35,00,02        MOVE 2,V*FAC4,@FAC4    Array is not shared
       C3A8 4E,B0,4E
[1079] C3AB 43,B4    GC3BC  BR   GC3C5
[1080] C3AD BD,4E,4A GC3BE  DST  @FAC,@FAC4        Array is not shared
[1081] C3B0 A3,4E,00        DADD 6,@FAC4           Point to value space
       C3B3 06
[1082] C3B4 43,E9    GC3C5  BR   PUSH
[1083]               ***********************************************************
[1084]               * VALUE
[1085]               *  Passing the parameter by value
[1086]               ***********************************************************
[1087] C3B6 BD,2C,22 VAL01  DST  @ERRCOD,@PGMPTR   Restore program pointer

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0019 
RXB 2024
[1088] C3B9 0F,79           XML  PGMCHR            Skip the first character
[1089] C3BB BD,16,0C        DST  @BYTES,@TEMP      In case of passing a string
[1090] C3BE 0F,74           XML  PARSE             Parsing up to comma
[1091] C3C0 B6              BYTE RPARZ
[1092] C3C1 BD,0C,16        DST  @TEMP,@BYTES      Restore the value in >0C area
[1093]               * After parsing @FAC area contains its actual numeric value
[1094]               *  in a numeric case, and the following information in a
[1095]               *  string case.
[1096]               * +----------------+-----+--+------------+-----------------
[1097]               * | >001C  or      | >65 |  | Pointer to | Length of string
[1098]               * | value pointer  |     |  | string     | string
[1099]               * | address        |     |  |            |
[1100]               * +- FAC ----------+-FAC2+--+-FAC4 ------+- FAC6 ----------
[1101]               *
[1102] C3C4 CE,4C,63        CGT  >63,@FAC2         If more then 99 then
[1103] C3C7 43,CF           BR   GC3E0
[1104] C3C9 BE,90,12        ST   1,*COUNT          Store flag for string express
       C3CC 01
[1105] C3CD 43,D2           BR   GC3E3
[1106] C3CF 86,90,12 GC3E0  CLR  *COUNT            Otherwise it is a numeric exp
[1107] C3D2 43,E9    GC3E3  BR   PUSH              Push into stack
[1108]               ***********************************************************
[1109]               * REFERENCE
[1110]               *   Passing the parameter by reference
[1111]               ***********************************************************
[1112]               * Variables, array element and whole array passing.
[1113]               *
[1114]               * After SMB @FAC entry shold look like;
[1115]               * +--------------+------+-----+-------------+--------------
[1116]               * | Pointer to   | >00  |     | Pointer to  |
[1117]               * | symbol table |      |     | value space |
[1118]               * | entry        |      |     |             |
[1119]               * +-- FAC -------+ FAC2 +-----+- FAC4 ------+- FAC6 -------
[1120]               *  for numeric case, and
[1121]               * +--------------+------+-----+-------------+--------------
[1122]               * | Pointer to   | >65  |     | Pointer to  | String
[1123]               * | value space  |      |     | string      | length
[1124]               * | entry        |      |     |             |
[1125]               * +- FAC --------+ FAC2 +-----+- FAC4 ------+- FAC6 -------
[1126]               * for a string case.
[1127] C3D4 0F,7B    REF01  XML  SMB               Get the location
[1128] C3D6 CA,42,B8        CHE  >B8,@CHAT         Pass array expression
[1129] C3D9 63,B6           BS   VAL01
[1130] C3DB 8E,4C           CZ   @FAC2
[1131] C3DD 43,E5           BR   GC3F6
[1132] C3DF BE,90,12        ST   2,*COUNT          Must be a numeric variable
       C3E2 02
[1133] C3E3 43,E9           BR   PUSH
[1134] C3E5 BE,90,12 GC3F6  ST   3,*COUNT          Must be a string variable
       C3E8 03
[1135]               ***********************************************************
[1136]               * PUSH routine
[1137]               *  Pushes @FAC entry into a value stack.
[1138]               ***********************************************************
[1139] C3E9 90,12    PUSH   INC  @COUNT
[1140] C3EB CE,12,10        CGT  16,@COUNT         Too many parameters
[1141] C3EE 65,28           BS   ERRBA
[1142] C3F0 0F,77           XML  VPUSH
[1143] C3F2 43,36           BR   PAR01             Get the next argument.
[1144]               ***********************************************************
[1145]               * EXECUTE routine
[1146]               *  Restore file name info transfer control over to ALC
[1147]               ***********************************************************
[1148] C3F4 BE,4A,20 EXE01  ST   >20,@FAC          Store blank in the FAC area.

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0020 
RXB 2024
[1149] C3F7 35,00,05        MOVE 5,@FAC,@FAC1
       C3FA 4B,4A
[1150] C3FC 35,00,04        MOVE 4,V@12(@OLDS),@STORE   Get the file name info
       C3FF 14,E0,0C
       C402 10
[1151] C403 34,16,4A        MOVE @STORE+2,V*STORE,@FAC  Move to FAC
       C406 B0,14
[1152] C408 87,22           DCLR @ERRCOD           Clear program pointer for
[1153]               *                              error code
[1154] C40A 0F,20           XML  ALSUP             Go to CPU at >2000 to execute
[1155] C40C 64,57           BS   ERROR             Error found
[1156]               *                             If no error, start checking s
[1157]               ***********************************************************
[1158]               * RETURN to the XB main program.
[1159]               ***********************************************************
[1160] C40E C5,6E,10 NOERR  DCH  @OLDS,@VSPTR      Pop the stack
[1161] C411 44,18           BR   GC429
[1162] C413 0F,78           XML  VPOP              Pop the stack
[1163] C415 05,C4,0E        B    NOERR
[1164] C418 05,A0,1C GC429  B    LNKRTN            Check ")" and end of statemen
[1165]               ***********************************************************
[1166]               *  CALL CHARPAT(numeric-expression,string-variable,...)   *
[1167]               ***********************************************************
[1168] C41B 06,BF,E0 GETCHR CALL COMB              Check for (?
[1169] C41E 0F,79    GCHR2  XML  PGMCHR          Skip "(" or ","
[1170] C420 0F,74           XML  PARSE           Get char number 
[1171] C422 B6              BYTE RPARZ
[1172] C423 0F,7E           XML  SPEED  * CHECK FROM
[1173] C425 02,1E           DATA >021E  * 30 TO 159
[1174] C427 00,9F           DATA >009F  *
[1175] C429 BD,14,4A        DST  @FAC,@VAR9      Move to PAD2 30 - 159 
[1176] C42C BF,0C,00        DST  16,@BYTES       16 byte string in string space
       C42F 10
[1177] C430 0F,71           XML  GETSTR          Get VDP string space
[1178]               * SREF string pointer space
[1179] C432 0F,79           XML  PGMCHR            Skip comma
[1180] C434 06,BF,F0        CALL SNDER * Get symbol table info for next arguemen
[1181] C437 D6,4C,65        CEQ  STRING,@FAC2      Must be a stirng variable
[1182] C43A 44,D1           BR   ERRSNM            ERROR STRING NUMBER MISMATCH
[1183] C43C BF,4A,00        DST  >001C,@FAC        Temp string so use SREF as ad
       C43F 1C
[1184] C440 BD,4E,1C        DST  @SREF,@FAC4       Pointer to string
[1185] C443 BF,50,00        DST  16,@FAC6          String length
       C446 10
[1186] C447 0F,7C           XML  ASSGNV            Assign to string variable
[1187]               * VAR9 = 30 TO 159 CHARACTER
[1188]               * FAC4 = String pointer 
[1189] C449 86,8F,DD        CLR  @>6004          Set ROM 3 page
       C44C 04
[1190] C44D 0F,82           XML  CHRPAT
[1191] C44F D6,42,B3        CEQ  COMMAZ,@CHAT      Comma?
[1192] C452 64,1E           BS   GCHR2             Restart again
[1193] C454 05,C3,05        B    PEEK5
[1194]               ***********************************************************
[1195]               ************** ERROR BRANCH TABLE FOR LINK ****************
[1196]               ***********************************************************
[1197] C457 8A,22    ERROR  CASE  @ERRCOD
[1198] C459 44,0E           BR   NOERR
[1199] C45B 44,0E           BR   NOERR
[1200] C45D 44,BA           BR   ERRNO             2 Numeric Overflow
[1201] C45F 44,C1           BR   ERRSYN            3 SYNtax error
[1202] C461 44,C5           BR   ERRIBS            4 Illegal after subprogram
[1203] C463 44,C9           BR   ERRNQS            5 unmatched quotes
[1204] C465 44,CD           BR   ERRNTL            6 Name Too Long

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0021 
RXB 2024
[1205] C467 44,D1           BR   ERRSNM            7 String Number Mismatch
[1206] C469 44,D5           BR   ERROBE            8 Option Base Error
[1207] C46B 44,D9           BR   ERRMUV            9 iMproperly Used name
[1208] C46D 44,DD           BR   ERRIM            10 IMage error
[1209] C46F 44,E4           BR   ERRMEM           11 MEMory full
[1210] C471 44,E8           BR   ERRSO            12 Stack Overflow
[1211] C473 44,EC           BR   ERRNWF           13 Next Without For
[1212] C475 44,F0           BR   ERRFNN           14 For Next Nesting
[1213] C477 44,F4           BR   ERRSNS           15 must be in subprogram
[1214] C479 44,F8           BR   ERRRSC           16 Recursive Subprogram Call
[1215] C47B 44,FC           BR   ERRMS            17 Missing Subend
[1216] C47D 45,00           BR   ERRRWG           18 Return Without Gosub
[1217] C47F 45,04           BR   ERRST            19 String Truncated
[1218] C481 45,08           BR   ERRBS            20 Bad Subscript
[1219] C483 45,0C           BR   ERRSSL           21 Speech String too Long
[1220] C485 45,10           BR   ERRLNF           22 Line Not Found
[1221] C487 45,14           BR   ERRBLN           23 Bad Line Number
[1222] C489 45,18           BR   ERRLTL           24 Line Too Long
[1223] C48B 45,1C           BR   ERRCC            25 Can't Continue
[1224] C48D 45,20           BR   ERRCIP           26 Command Illegal in Program
[1225] C48F 45,24           BR   ERROLP           27 Only Legal in a Program
[1226] C491 45,28           BR   ERRBA            28 Bad Argument
[1227] C493 45,2C           BR   ERRNPP           29 No Program Present
[1228] C495 45,30           BR   ERRBV            30 Bad Value
[1229] C497 45,34           BR   ERRIAL           31 Incorrect Argument List
[1230] C499 45,38           BR   ERRINP           32 INPut error
[1231] C49B 45,3F           BR   ERRDAT           33 DATa error
[1232] C49D 45,43           BR   ERRFE            34 File Error
[1233] C49F 44,0E           BR   NOERR
[1234] C4A1 45,47           BR   ERRIO            36 I/O error
[1235] C4A3 45,4B           BR   ERRSNF           37 Subprogram Not Found
[1236] C4A5 44,0E           BR   NOERR
[1237] C4A7 45,4F           BR   ERRPV            39 Protected Violation
[1238] C4A9 45,56           BR   ERRIVN           40 unrecognized Character
[1239] C4AB 45,5A           BR   WRNNO            41 Numeric Number Overflow
[1240] C4AD 45,60           BR   WRNST            42 String Truncated
[1241] C4AF 45,66           BR   WRNNPP           43 No Program Present
[1242] C4B1 45,6C           BR   WRNINP           44 INPut error
[1243] C4B3 45,72           BR   WRNIO            45 I/O error
[1244] C4B5 45,78           BR   WRNLNF           46 Line Not Found
[1245]               ***********************************************************
[1246]               **************** ERROR HANDLING SECTION *******************
[1247]               ***********************************************************
[1248] C4B7 06,C2,95 ERRN01 CALL CLSNOE            * ENTRY FOR LOAD
[1249] C4BA 06,6A,84 ERRNO  CALL ERRZZ             * Numeric Overflow
[1250] C4BD 02              BYTE 2
[1251] C4BE 06,C2,95 ERRSY1 CALL CLSNOE            * ENTRY FOR LOAD
[1252] C4C1 06,6A,84 ERRSYN CALL ERRZZ             * SYNtax error
[1253] C4C4 03              BYTE 3
[1254] C4C5 06,6A,84 ERRIBS CALL ERRZZ             * Illegal after subprogram
[1255] C4C8 04              BYTE 4
[1256] C4C9 06,6A,84 ERRNQS CALL ERRZZ             * uNmatched QuoteS
[1257] C4CC 05              BYTE 5
[1258] C4CD 06,6A,84 ERRNTL CALL ERRZZ             * Name Too Long
[1259] C4D0 06              BYTE 6
[1260] C4D1 06,6A,84 ERRSNM CALL ERRZZ             * String Number Mismatch
[1261] C4D4 07              BYTE 7
[1262] C4D5 06,6A,84 ERROBE CALL ERRZZ             * Option Base Error
[1263] C4D8 08              BYTE 8
[1264] C4D9 06,6A,84 ERRMUV CALL ERRZZ             * Improperly used name
[1265] C4DC 09              BYTE 9
[1266] C4DD 06,6A,84 ERRIM  CALL ERRZZ             * Image Error
[1267] C4E0 0A              BYTE 10
[1268] C4E1 06,C2,95 ERRMF1 CALL CLSNOE            * ENTRY FOR LOAD

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0022 
RXB 2024
[1269] C4E4 06,6A,84 ERRMEM CALL ERRZZ             * MEMory full
[1270] C4E7 0B              BYTE 11
[1271] C4E8 06,6A,84 ERRSO  CALL ERRZZ             * Stack Overflow
[1272] C4EB 0C              BYTE 12
[1273] C4EC 06,6A,84 ERRNWF CALL ERRZZ             * Next Without For
[1274] C4EF 0D              BYTE 13
[1275] C4F0 06,6A,84 ERRFNN CALL ERRZZ             * For-Next Nesting
[1276] C4F3 0E              BYTE 14
[1277] C4F4 06,6A,84 ERRSNS CALL ERRZZ             * must be in subprogram
[1278] C4F7 0F              BYTE 15
[1279] C4F8 06,6A,84 ERRRSC CALL ERRZZ             * Recursive Subprogram Call
[1280] C4FB 10              BYTE 16
[1281] C4FC 06,6A,84 ERRMS  CALL ERRZZ             * Missing Subend
[1282] C4FF 11              BYTE 17
[1283] C500 06,6A,84 ERRRWG CALL ERRZZ             * Return Without Gosub
[1284] C503 12              BYTE 18
[1285] C504 06,6A,84 ERRST  CALL ERRZZ             * String Truncated
[1286] C507 13              BYTE 19
[1287] C508 06,6A,84 ERRBS  CALL ERRZZ             * Bad Subscript
[1288] C50B 14              BYTE 20
[1289] C50C 06,6A,84 ERRSSL CALL ERRZZ             * Speech String too Long
[1290] C50F 15              BYTE 21
[1291] C510 06,6A,84 ERRLNF CALL ERRZZ             * Line Not Found
[1292] C513 16              BYTE 22
[1293] C514 06,6A,84 ERRBLN CALL ERRZZ             * Bad Line Number
[1294] C517 17              BYTE 23
[1295] C518 06,6A,84 ERRLTL CALL ERRZZ             * Line Too Long
[1296] C51B 18              BYTE 24
[1297] C51C 06,6A,84 ERRCC  CALL ERRZZ             * Can't Continue
[1298] C51F 19              BYTE 25
[1299] C520 06,6A,84 ERRCIP CALL ERRZZ             * Command Illegal in Program
[1300] C523 1A              BYTE 26
[1301] C524 06,6A,84 ERROLP CALL ERRZZ             * Only Legal in a Program
[1302] C527 1B              BYTE 27
[1303] C528 06,6A,84 ERRBA  CALL ERRZZ             * Bad Argument
[1304] C52B 1C              BYTE 28
[1305] C52C 06,6A,84 ERRNPP CALL ERRZZ             * No Program Present
[1306] C52F 1D              BYTE 29
[1307] C530 06,6A,84 ERRBV  CALL ERRZZ             * Bad Value
[1308] C533 1E              BYTE 30
[1309] C534 06,6A,84 ERRIAL CALL ERRZZ             * Incorrect Argument List
[1310] C537 1F              BYTE 31
[1311] C538 06,6A,84 ERRINP CALL ERRZZ             * INPut error
[1312] C53B 29              BYTE 41
[1313] C53C 06,C2,95 ERRDE1 CALL CLSNOE            * ENTRY FOR LOAD
[1314] C53F 06,6A,84 ERRDAT CALL ERRZZ             * DATa error / Checksum error
[1315] C542 21              BYTE 33
[1316] C543 06,6A,84 ERRFE  CALL ERRZZ             * File Error
[1317] C546 22              BYTE 34
[1318] C547 06,6A,84 ERRIO  CALL ERRZZ             * I/O error
[1319] C54A 24              BYTE 36
[1320] C54B 06,6A,84 ERRSNF CALL ERRZZ             * Subprogram Not Found
[1321] C54E 25              BYTE 37
[1322] C54F 06,6A,84 ERRPV  CALL ERRZZ             * Protection Violation
[1323] C552 27              BYTE 39
[1324] C553 06,C2,95 ERRUC1 CALL CLSNOE            * ENTRY FOR LOAD
[1325] C556 06,6A,84 ERRIVN CALL ERRZZ             * Unrecognized character / il
[1326] C559 28              BYTE 40
[1327] C55A 06,6A,82 WRNNO  CALL WARNZZ            * Numeric Overflow
[1328] C55D 02              BYTE 2
[1329] C55E 44,0E           BR   NOERR
[1330] C560 06,6A,82 WRNST  CALL WARNZZ            * String Truncated
[1331] C563 13              BYTE 19
[1332] C564 44,0E           BR   NOERR

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0023 
RXB 2024
[1333] C566 06,6A,82 WRNNPP CALL WARNZZ            * No Program Present
[1334] C569 1D              BYTE 29
[1335] C56A 44,0E           BR   NOERR
[1336] C56C 06,6A,82 WRNINP CALL WARNZZ            * INPut Error
[1337] C56F 20              BYTE 32
[1338] C570 44,0E           BR   NOERR
[1339] C572 06,6A,82 WRNIO  CALL WARNZZ            * I/O error
[1340] C575 23              BYTE 35
[1341] C576 44,0E           BR   NOERR
[1342] C578 06,6A,82 WRNLNF CALL WARNZZ            * Line Not Found
[1343] C57B 26              BYTE 38
[1344] C57C 44,0E           BR   NOERR
[1345]               ***********************************************************
[1346]               * RXB COPY OF CHKEND FROM GROM 4 FOR CALL INIT ERROR
[1347]               ***********************************************************
[1348]               * If it's no DISPLAY keyword ( AT, SIZE, BEEP or USING) it
[1349]               * has to be a print separator or colon ":"
[1350]               * If anything is specified is has to be a colon or end of
[1351]               * line... for end-of-line output current record
[1352]               * Check for end of statement
[1353] C57E DA,42,80 ENDCHK CLOG >80,@CHAT
[1354] C581 65,88           BS   ECSET
[1355] C583 CA,42,84        CHE  TREMZ+1,@CHAT
[1356] C586 45,8B           BR   ECSET2
[1357] C588 8E,42    ECSET  CZ   @CHAT         Set COND according to CHAT
[1358] C58A 01              RTNC
[1359] C58B D4,00,00 ECSET2 CEQ  @>8300,@>8300     Force COND to "SET"
[1360] C58E 01              RTNC                   Exit with no COND change
[1361]               **************************
[1362] C58F 06,C5,7E ECRTN  CALL ENDCHK        Use this CHKEND instead
[1363] C592 06,00,12        CALL RETURN
[1364]               ***********************************************************
[1365]               * Set-up for CALL GKLOAD routine
[1366]               *
[1367] C595 B2,80,C2 GKLOAD AND  >F0,@GKFLAG  Reset flag bits
       C598 F0
[1368] C599 00              RTN               Return
[1369]              
[1370]              
[1371]               ***********************************************************
[1372]               * CALL POKEV(VDP address,numeric variable,...)            *
[1373]               ***********************************************************
[1374] C59A C5,C5    POKEV  DATA PEEKV
[1375] C59C 05,50,4F        STRI 'POKEV'
       C59F 4B,45,56
[1376] C5A2 C5,A4           DATA POV
[1377] C5A4 06,C5,D5 POV    CALL GKSETV       Set VDP bit
[1378] C5A7 BF,02,00        DST  1,@CHKSUM    For GKLOAD routine
       C5AA 01
[1379] C5AB 05,C0,47        B    LPD0         Goto GKLOAD
[1380]               ***********************************************************
[1381]               * Check for CALL GKINIT on 'LOAD FILE'
[1382]               *
[1383] C5AE 0F,77    GKINIT XML  VPUSH        Save FAC
[1384] C5B0 06,C1,E8        CALL CHKIN        Check for GKINIT
[1385] C5B3 0F,78           XML  VPOP         Restore FAC
[1386] C5B5 DA,80,C2        CLOG >C,@GKFLAG   Error if POKEG or POKEV
       C5B8 0C
[1387] C5B9 44,C1           BR   ERRSYN
[1388] C5BB 05,C2,16        B    OPENIT       Open the file
[1389]               *
[1390]               * New entry point for CALL PEEK,
[1391]               * clears flag bits.
[1392]               *

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0024 
RXB 2024
[1393] C5BE B2,80,C2 GKPEEK AND  >F0,@GKFLAG
       C5C1 F0
[1394] C5C2 05,C2,B9        B    PEEK
[1395]               ***********************************************************
[1396]               * CALL PEEKV(VDP address,numeric variable,...)            *
[1397]               ***********************************************************
[1398] C5C5 C5,E7    PEEKV  DATA PEEKG
[1399] C5C7 05,50,45        STRI 'PEEKV'
       C5CA 45,4B,56
[1400] C5CD C5,CF           DATA PKV
[1401] C5CF 06,C5,D5 PKV    CALL GKSETV       Set VDP bit
[1402] C5D2 05,C2,B9        B    PEEK         Use PEEK routine
[1403]               ***********************************************************
[1404]               * Set flag bit for VDP read & write
[1405]               *
[1406] C5D5 B2,80,C2 GKSETV AND  >F0,@GKFLAG  Reset both bits
       C5D8 F0
[1407] C5D9 B6,80,C2        OR   8,@GKFLAG    Set VDP bit
       C5DC 08
[1408] C5DD 00              RTN               Return
[1409]               *
[1410]               * Set flag bit for GROM read & write
[1411]               *
[1412] C5DE B2,80,C2 GKSETG AND  >F0,@GKFLAG  Reset both bits
       C5E1 F0
[1413] C5E2 B6,80,C2        OR   4,@GKFLAG    Set GROM bit
       C5E5 04
[1414] C5E6 00              RTN               Return
[1415]               ***********************************************************
[1416]               * CALL PEEKG(GROM address,numeric variable,...)           *
[1417]               ***********************************************************
[1418] C5E7 C5,F7    PEEKG  DATA POKEG
[1419] C5E9 05,50,45        STRI 'PEEKG'
       C5EC 45,4B,47
[1420] C5EF C5,F1           DATA PKG
[1421] C5F1 06,C5,DE PKG    CALL GKSETG       Set flag bit
[1422] C5F4 05,C2,B9        B    PEEK         Use PEEK routine
[1423]               ***********************************************************
[1424]               * CALL POKEG(GROM address,numeric variable,...)           *
[1425]               ***********************************************************
[1426] C5F7 C6,55    POKEG  DATA CATLOG
[1427] C5F9 05,50,4F        STRI 'POKEG'
       C5FC 4B,45,47
[1428] C5FF C6,01           DATA POG
[1429] C601 06,C5,DE POG    CALL GKSETG       Set flag bit
[1430] C604 BF,02,00        DST  1,@CHKSUM    For LOAD routine
       C607 01
[1431] C608 05,C0,47        B    LPD0         Use LOAD routine
[1432]               ***********************************************************
[1433]               * Routine to write to GRAM
[1434]               *
[1435] C60B DA,80,C2 LDGRAM CLOG 4,@GKFLAG    Check GROM bit
       C60E 04
[1436] C60F 66,1D           BS   LOADDT       No, CPU load
[1437] C611 2D,00,01        MOVE 1,@FAC1,G@0(@PC) Write to GRAM
       C614 00,00,04
       C617 4B
[1438] C618 91,04           DINC @PC          Point to next byte
[1439] C61A 05,C0,60        B    LDP4         Continue
[1440]               *
[1441]               * Relocated data from GKLOAD routine.
[1442]               *
[1443] C61D 35,00,01 LOADDT MOVE 1,@FAC1,@0(@PC)   Read byte
       C620 CF,7D,00

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0025 
RXB 2024
       C623 04,4B
[1444] C625 91,04           DINC @PC                INC ERAM address
[1445] C627 05,C0,60        B    LDP4              Continue with next byte
[1446]               *
[1447]               * Routine to read GRAM/GROM
[1448]               *
[1449] C62A DA,80,C2 PKGRAM CLOG 4,@GKFLAG    Check flag
       C62D 04
[1450] C62E 66,3A           BS   PEEKDT       No, CPU peek
[1451] C630 33,00,01        MOVE 1,G@0(@PC),@FAC1 Yes, read GRAM
       C633 4B,00,00
       C636 04
[1452] C637 05,C2,F7        B    GC308        Continue
[1453]               *
[1454]               * Relocated data for CPU PEEK
[1455]               *
[1456] C63A 35,00,01 PEEKDT MOVE 1,@0(@PC),@FAC1        Read byte
       C63D 4B,CF,7D
       C640 00,04
[1457] C642 05,C2,F7        B    GC308              Continue
[1458]               ***********************************************************
[1459] C645 00,10,18 DARROW DATA  >0010,>18FC,>1810,>0000 * RIGHT ARROW
       C648 FC,18,10
       C64B 00,00
[1460] C64D 00,20,60        DATA  >0020,>60FC,>6020,>0000 * LEFT ARROW
       C650 FC,60,20
       C653 00,00
[1461]               ***********************************************************
[1462]               *
[1463]               * CALL CAT(pathname)                                      *
[1464]               ***********************************************************
[1465] C655 C6,5D    CATLOG DATA DIRECT
[1466] C657 03,43,41        STRI 'CAT'             CALL CAT(path)
       C65A 54
[1467] C65B C6,65           DATA GKCAT
[1468]               ***********************************************************
[1469]               * CALL DIR(pathname)                                      *
[1470]               ***********************************************************
[1471] C65D C9,1E    DIRECT DATA SAMS                                      
[1472] C65F 03,44,49        STRI 'DIR'             
       C662 52
[1473] C663 C6,65           DATA GKCAT
[1474]               *
[1475]               *
[1476]               *  X-BASIC DEVICE CATALOGER
[1477]               *  Accessed with a CALL
[1478]               *  PAB is installed in crunch buffer area
[1479]               *
[1480]               *  D.C. Warren 12/17/85
[1481]               *  with modifications by Danny Michael, Jan. 86
[1482]               *
[1483]               *
[1484] C665 06,BF,E0 GKCAT  CALL COMB              Do we have a '(' ?
[1485] C668 06,C8,C7 GKCATA CALL DSKNAM            Get path
[1486]               *
[1487]               * Set up PAB at V>8C0
[1488]               *  Put disk information on the screen
[1489]               *
[1490] C66B 07,80           ALL  >80                 Clear screen
[1491] C66D BD,16,50        DST  @FAC6,@VARB         Get name length
[1492] C670 BF,0C,00        DST  160,@BYTES          Length of CAT PAB use
       C673 A0
[1493] C674 0F,71           XML  GETSTR              Get some string space
[1494] C676 35,00,A0        MOVE 160,V@RECBUF,V*SREF Save USER PAB area

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0026 
RXB 2024
       C679 B0,1C,A8
       C67C C0
[1495] C67D 31,00,09        MOVE 9,G@GKPABD,V@RECBUF Install PAB
       C680 A8,C0,C6
       C683 F8
[1496] C684 BC,A8,C9        ST   @FAC7,V@>08C9       Save Length 
       C687 51
[1497] C688 34,16,A8        MOVE @VARB,V*FAC4,V@>08CA Get PATH
       C68B CA,B0,4E
[1498]               *
[1499]               * Open Device
[1500]               *
[1501] C68E 06,C6,E3        CALL GKDSRL            Link to device
[1502]               *
[1503]               * Read first record
[1504]               *
[1505] C691 BF,A8,C0        DST  >020D,V@RECBUF    Make PAB a read
       C694 02,0D
[1506] C696 06,C6,E3 GKCAT2 CALL GKDSRL            Link to device
[1507]               *
[1508] C699 BE,02,B9        ST   >B9,@PAD2         Y with offset
[1509] C69C 06,C7,01        CALL GKSCRN            Set up header
[1510] C69F 86,01           CLR  @PAD1             For GKSCRL routine
[1511] C6A1 06,C7,68 GKCATL CALL GKTKEY            Check for pause or quit
[1512] C6A4 66,B3           BS   GKDONE            Stop!
[1513] C6A6 06,C7,7E        CALL GKSCRL            Scroll the screen
[1514] C6A9 06,C6,E3        CALL GKDSRL            Read a record
[1515] C6AC 06,C7,A1        CALL GKFNAM            Print it on screen
[1516] C6AF 66,B3           BS   GKDONE            If finished
[1517] C6B1 46,A1           BR   GKCATL            Loop
[1518] C6B3 06,C6,D3 GKDONE CALL GKCLSF            Close file
[1519] C6B6 D6,42,B3        CEQ  COMMAZ,@CHAT      Comma?
[1520] C6B9 66,68           BS   GKCATA            Yes, another drive.
[1521] C6BB D6,42,B6        CEQ  RPARZ,@CHAT       Last char a ) ?
[1522] C6BE 44,C1           BR   ERRSYN            No, error
[1523] C6C0 0F,79           XML  PGMCHR            Parse past ')'
[1524] C6C2 43,0C           BR   PEEK6
[1525]               *
[1526]               * File error
[1527]               *
[1528] C6C4 BF,04,08 GKERR  DST  RECBUF-4,@PABPTR  Fake a BASIC PAB
       C6C7 BC
[1529] C6C8 BD,10,A8        DST  V@RECBUF,@VAR5    Save error
       C6CB C0
[1530] C6CC 06,C6,D3        CALL GKCLSF            Close file
[1531] C6CF 06,6D,78        CALL G6D78             Return through ERR
[1532] C6D2 24              BYTE 36 *              I/O ERROR XX
[1533]               *
[1534]               *
[1535]               * Subroutines
[1536]               *
[1537]               *
[1538]               * Close file
[1539]               *
[1540] C6D3 BF,A8,C0 GKCLSF DST  >010D,V@RECBUF    A close operation
       C6D6 01,0D
[1541] C6D8 06,C6,EF        CALL GKDSR              Link to device
[1542] C6DB 35,00,97        MOVE 151,V*SREF,V@RECBUF Restore USER PAB area
       C6DE A8,C0,B0
       C6E1 1C
[1543] C6E2 00              RTN                     Return to caller
[1544]               *
[1545]               * DSR LINK with error handling
[1546]               *

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0027 
RXB 2024
[1547] C6E3 06,C6,EF GKDSRL CALL GKDSR
[1548] C6E6 66,C4           BS   GKERR             Branch on no-device
[1549] C6E8 D6,A8,C1        CEQ  >0D,V@>08C1       Check for device errors
       C6EB 0D
[1550] C6EC 46,C4           BR   GKERR                .
[1551] C6EE 00              RTN                    Return to caller
[1552]               *
[1553]               * DSR LINK routine
[1554]               *
[1555] C6EF BF,56,08 GKDSR  DST  >08C9,@FAC12      Name length pointer
       C6F2 C9
[1556] C6F3 06,00,10        CALL >10               Call DSR
[1557] C6F6 08              BYTE 8 *               DSR call
[1558] C6F7 01              RTNC                   Return with COND bit
[1559] C6F8 00,0D,09 GKPABD BYTE 0,>D,9,0,0,0,0,0,0
       C6FB 00,00,00
       C6FE 00,00,00
[1560]               *
[1561]               * Screen - prints initial screen and disk info
[1562]               *
[1563] C701 08       GKSCRN FMT
[1564] C702 FC,60            SCRO >60
[1565] C704 FE,01            ROW  1
[1566] C706 FF,02            COL  2
[1567] C708 0A,44,49         HTEX 'DIRECTORY =' 
       C70B 52,45,43
       C70E 54,4F,52
       C711 59,20,3D
[1568] C714 A0               ROW+ 1
[1569] C715 FF,03            COL  3
[1570] C717 1B,46,69         HTEX 'Filename  Size    Type     P'
       C71A 6C,65,6E
       C71D 61,6D,65
       C720 20,20,53
       C723 69,7A,65
       C726 20,20,20
       C729 20,54,79
       C72C 70,65,20
       C72F 20,20,20
       C732 20,50
[1571] C734 A0               ROW+ 1
[1572] C735 FF,02            COL 2
[1573] C737 1C,2D,2D         HTEX '---------- ---- ----------- -'
       C73A 2D,2D,2D
       C73D 2D,2D,2D
       C740 2D,2D,20
       C743 2D,2D,2D
       C746 2D,20,2D
       C749 2D,2D,2D
       C74C 2D,2D,2D
       C74F 2D,2D,2D
       C752 2D,20,2D
[1574] C755 FB              FEND
[1575] C756 06,C8,8E        CALL GKDSTR       Get path $ into FAC
[1576] C759 8E,4B           CZ   @FAC1        Skip if zero length
[1577] C75B 67,67           BS   GKCAT3
[1578] C75D 08              FMT
[1579] C75E FC,60            SCRO >60
[1580] C760 FE,01            ROW 1
[1581] C762 FF,0E            COL 14
[1582] C764 E9,4C            HSTR 10,@FAC2
[1583] C766 FB              FEND
[1584] C767 00       GKCAT3 RTN               Return
[1585]               *

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0028 
RXB 2024
[1586]               * Test for space and FCTN 4
[1587]               *
[1588] C768 03       GKTKEY SCAN              Scan the keyboard
[1589] C769 47,78           BR   GKTKE1       Continue if no new key
[1590] C76B D6,75,20        CEQ  SPACE,@RKEY  SPACE key?
[1591] C76E 47,79           BR   GKTKE2       NO! Abort.
[1592] C770 03       GKTKE3 SCAN              Scan keyboard
[1593] C771 47,70           BR   GKTKE3       Loop until new key press
[1594] C773 D6,75,20        CEQ  SPACE,@RKEY  SPACE key?
[1595] C776 47,79           BR   GKTKE2       NO! Abort.
[1596] C778 00       GKTKE1 RTN               Return
[1597] C779 86,00    GKTKE2 CLR  @PAD         Clear a byte
[1598] C77B 8E,00           CZ   @PAD         Set COND bit
[1599] C77D 01              RTNC              Return w/COND
[1600]               *
[1601]               * Scroll the screen
[1602]               *
[1603] C77E C6,01,13 GKSCRL CH   19,@PAD1           Check line counter
[1604] C781 67,98           BS   GKSCL1             Short scroll
[1605] C783 90,01           INC  @PAD1              Line count +1
[1606] C785 35,02,80        MOVE >280,V@>A0,V@>80   Scroll screen
       C788 A0,80,A0
       C78B A0
[1607] C78C BE,A2,E0 GKSCL2 ST   SPACE+OFFSET,V@>2E0 Clear last line
       C78F 80
[1608] C790 35,00,1F        MOVE >1F,V@>2E0,V@>2E1
       C793 A2,E1,A2
       C796 E0
[1609] C797 00              RTN                     Return
[1610] C798 35,02,60 GKSCL1 MOVE >260,V@>A0,V@>80
       C79B A0,80,A0
       C79E A0
[1611] C79F 47,8C           BR   GKSCL2
[1612]               *
[1613]               * Display one file on screen
[1614]               *
[1615] C7A1 06,C8,8E GKFNAM CALL GKDSTR       Get string into FAC
[1616] C7A4 8E,4B           CZ   @FAC1        Skip display if zero
[1617] C7A6 67,B2           BS   GKCAT5        length
[1618] C7A8 08              FMT
[1619] C7A9 FC,60            SCRO >60         Put disk name on screen
[1620] C7AB FE,17            ROW   23            .
[1621] C7AD FF,02            COL   02            .
[1622] C7AF E9,4C            HSTR 10,@FAC2       .
[1623] C7B1 FB              FEND                 .
[1624] C7B2 A1,10,4A GKCAT5 DADD @FAC,@VAR5   Go to next field
[1625] C7B5 A3,10,00        DADD 10,@VAR5     Continue another field
       C7B8 0A
[1626] C7B9 8F,B0,10        DCZ  V*VAR5       Time to get out if
[1627] C7BC 68,63           BS   GKFNA1        zero file size
[1628] C7BE BF,14,02        DST  >02EA,@VAR9  Set up screen address
       C7C1 EA
[1629] C7C2 06,C8,68        CALL GKDNUM       Display file length
[1630] C7C5 A7,10,00        DSUB 9,@VAR5      Back a field
       C7C8 09
[1631] C7C9 35,00,08        MOVE 8,V*VAR5,@FAC Move it into FAC
       C7CC 4A,B0,10
[1632] C7CF 0F,12           XML  CFI          Convert it to an int.
[1633] C7D1 8E,4A           CZ   @FAC         Non-negative?
[1634] C7D3 67,DB           BS   GKCAT7       YES! File not protected
[1635] C7D5 BE,A2,FE        ST   185,V@>02FE   Put a 'Y' on screen
       C7D8 B9
[1636] C7D9 83,4A           DNEG @FAC         Make number positive
[1637] C7DB 92,4B    GKCAT7 DEC  @FAC1        Adjust for CASE

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0029 
RXB 2024
[1638] C7DD 8A,4B           CASE @FAC1        Show file type
[1639] C7DF 47,EB           BR   GKDF
[1640] C7E1 47,FD           BR   GKDV
[1641] C7E3 48,0F           BR   GKIF
[1642] C7E5 48,21           BR   GKIV
[1643] C7E7 48,33           BR   GKPR
[1644] C7E9 48,44           BR   GKDIR
[1645] C7EB 08       GKDF   FMT
[1646] C7EC FC,60            SCRO >60
[1647] C7EE FE,17            ROW   23
[1648] C7F0 FF,12            COL   18
[1649] C7F2 06,44,69         HTEX 'Dis/Fix'
       C7F5 73,2F,46
       C7F8 69,78
[1650] C7FA FB              FEND
[1651] C7FB 48,57           BR   GKCAT6
[1652] C7FD 08       GKDV   FMT
[1653] C7FE FC,60            SCRO >60
[1654] C800 FE,17            ROW   23
[1655] C802 FF,12            COL   18
[1656] C804 06,44,69         HTEX 'Dis/Var'
       C807 73,2F,56
       C80A 61,72
[1657] C80C FB              FEND
[1658] C80D 48,57           BR   GKCAT6
[1659] C80F 08       GKIF   FMT
[1660] C810 FC,60            SCRO >60
[1661] C812 FE,17            ROW   23
[1662] C814 FF,12            COL   18
[1663] C816 06,49,6E         HTEX 'Int/Fix'
       C819 74,2F,46
       C81C 69,78
[1664] C81E FB              FEND
[1665] C81F 48,57           BR   GKCAT6
[1666] C821 08       GKIV   FMT
[1667] C822 FC,60            SCRO >60
[1668] C824 FE,17            ROW   23
[1669] C826 FF,12            COL   18
[1670] C828 06,49,6E         HTEX 'Int/Var'
       C82B 74,2F,56
       C82E 61,72
[1671] C830 FB              FEND
[1672] C831 48,57           BR   GKCAT6
[1673] C833 08       GKPR   FMT
[1674] C834 FC,60            SCRO >60
[1675] C836 FE,17            ROW   23
[1676] C838 FF,12            COL   18
[1677] C83A 06,50,72         HTEX 'Program'
       C83D 6F,67,72
       C840 61,6D
[1678] C842 FB              FEND
[1679] C843 00              RTN
[1680] C844 08       GKDIR  FMT
[1681] C845 FC,60           SCRO  >60
[1682] C847 FE,17           ROW   23
[1683] C849 FF,12           COL   18
[1684] C84B 08,44,69        HTEX  'Directory'
       C84E 72,65,63
       C851 74,6F,72
       C854 79
[1685] C855 FB              FEND
[1686] C856 00              RTN               Return
[1687] C857 A3,10,00 GKCAT6 DADD 18,@VAR5     Advavce two fields
       C85A 12

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0030 
RXB 2024
[1688] C85B BF,14,02        DST  >02F6,@VAR9  Set up screen address
       C85E F6
[1689] C85F 06,C8,68        CALL GKDNUM       Display record length
[1690] C862 00              RTN               Return
[1691] C863 86,00    GKFNA1 CLR  @PAD         Clear a byte
[1692] C865 8E,00           CZ   @PAD         Set COND bit
[1693] C867 01              RTNC              Return w/COND
[1694]               * Display number subroutine
[1695]               *  ENTER: Floating number in FAC for GKDNU1
[1696]               *         Screen address in VAR9
[1697]               *
[1698] C868 35,00,08 GKDNUM MOVE 8,V*VAR5,@FAC Move FLP number to FAC
       C86B 4A,B0,10
[1699]                
[1700] C86E 86,55    GKDNU1 CLR  @FAC11       Indicate a free format
[1701] C870 0F,73           XML  XBCNS        Convert FAC to a string
[1702] C872 BF,16,00        DST  7,@VARB      Right justify number
       C875 07
[1703] C876 A4,17,56        SUB  @FAC12,@VARB+1
[1704] C879 A1,14,16        DADD @VARB,@VAR9
[1705] C87C A2,90,55 GKDNU2 ADD  >60,*FAC11      Add offset to string
       C87F 60
[1706] C880 BC,B0,14        ST   *FAC11,V*VAR9   Put a char on the screen
       C883 90,55
[1707] C885 91,14           DINC @VAR9           Increment screen addr.
[1708] C887 90,55           INC  @FAC11          Increment FAC addr.
[1709] C889 92,56           DEC  @FAC12          Decrement string length count
[1710] C88B 48,7C           BR   GKDNU2          Loop until done
[1711] C88D 00              RTN                  Return to caller
[1712]               *
[1713]               * Prepare a VDP string for FORMAT statement
[1714]               *  LEAVE: FAC has string length (word)
[1715]               *         FAC2  has string
[1716]               *         VAR5 pointing to next string in record
[1717]               *
[1718] C88E BF,10,09 GKDSTR DST  >0900,@VAR5   Get buffer address
       C891 00
[1719] C892 86,4A           CLR  @FAC          Clear MSB of FAC word
[1720] C894 BC,4B,B0        ST   V*VAR5,@FAC1  Store disk name length
       C897 10
[1721] C898 91,10           DINC @VAR5         Point to string
[1722] C89A BE,4C,20        ST   >20,@FAC2     Clear out string space
[1723] C89D 35,00,09        MOVE 9,@FAC2,@FAC3  
       C8A0 4D,4C
[1724] C8A2 34,4A,4C        MOVE @FAC,V*VAR5,@FAC2 Move disk name into FAC
       C8A5 B0,10
[1725] C8A7 00              RTN
[1726]               ***********************************************************
[1727] C8A8 88,5A    DSKDSR FETCH @FAC16           * Get Length of name
[1728] C8AA 88,5B           FETCH @FAC17           * Get Subroutine #
[1729] C8AC BD,A3,C0        DST   @FAC16,V@VROAZ   * Load into PAB
       C8AF 5A
[1730] C8B0 BF,56,03        DST   VROAZ,@FAC12     * PAB address in VDP
       C8B3 C0
[1731] C8B4 06,00,10        CALL  LINK             * DSRLNK
[1732] C8B7 0A              BYTE  >0A              * Subroutine
[1733] C8B8 65,43           BS    ERRFE            * File Error
[1734] C8BA E6,50,05        SRL   5,@FAC6          *
[1735] C8BD 8E,50           CZ    @FAC6            *
[1736] C8BF 45,43           BR    ERRFE            * File Error
[1737] C8C1 00              RTN                    *
[1738]               *******************************
[1739] C8C2 44,53,4B DSKSUB TEXT 'DSK#.'
       C8C5 23,2E

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0031 
RXB 2024
[1740] C8C7 06,BF,E2 DSKNAM CALL STRFCH            Get path string
[1741] C8CA D6,4C,65        CEQ  >65,@FAC2         Do we have a string?
[1742] C8CD 68,FE           BS   DEV1              YES, normal execution
[1743] C8CF 0F,12           XML  CFI               Convert FAC to integer
[1744] C8D1 D6,54,03        CEQ  >03,@FAC10        OK?
[1745] C8D4 65,30           BS   ERRBV             No.
[1746] C8D6 CA,4B,1E        CHE  30,@FAC1          ASCII?
[1747] C8D9 68,E3           BS   DEVASC            Yes.
[1748] C8DB CA,4B,0A        CHE  10,@FAC1          Higher then 9?
[1749] C8DE 65,30           BS   ERRBV             No, error
[1750] C8E0 A2,4B,30        ADD  48,@FAC1          Make it ASCII.
[1751] C8E3 BC,54,4B DEVASC ST   @FAC1,@TEMP1      Save the number
[1752] C8E6 BF,0C,00 DEV0   DST  5,@BYTES          Set up for a string
       C8E9 05
[1753] C8EA 0F,71           XML  GETSTR            Get string space
[1754] C8EC 31,00,05        MOVE 5,G@DSKSUB,V*SREF Save the string
       C8EF B0,1C,C8
       C8F2 C2
[1755] C8F3 BC,E0,03        ST   @TEMP1,V@3(@SREF) Store the number
       C8F6 1C,54
[1756] C8F8 BD,50,0C        DST  @BYTES,@FAC6      Copy string length.
[1757] C8FB BD,4E,1C        DST  @SREF,@FAC4       Copy string address.
[1758] C8FE 8F,50    DEV1   DCZ  @FAC6             Is it a null string?
[1759] C900 65,28           BS   ERRBA             YES! Bad Argument
[1760] C902 BC,54,B0        ST   V*FAC4,@TEMP1     Save device number
       C905 4E
[1761] C906 D6,51,01        CEQ  1,@FAC7           Length 1?
[1762] C909 68,E6           BS   DEV0              Yes
[1763] C90B 00              RTN
[1764]               ***********************************************************
[1765]               * CPU PROGRAM FOR >8300 SCATCH PAD SUBROUTINE AMSCRU      *
[1766]               ***********************************************************
[1767]               *                 *        AORG >8300
[1768] C90C 83,02    AMSCRU DATA >8302 * AMSCRU DATA >8302     * First address.
[1769] C90E C0,4C           DATA >C04C *        MOV  R12,R1    * Save R12 
[1770] C910 02,0C           DATA >020C *        LI   R12,>1E00 * Load CRU bits
[1771] C912 1E,00           DATA >1E00 *
[1772] C914 1D,00           DATA >1D00 *        SBO  0         * Set bits ones
[1773] C916 C3,01           DATA >C301 *        MOV  R1,R12    * Restore R12
[1774] C918 04,E0           DATA >04E0 *        CLR  @>837C    * Clear for GPL
[1775] C91A 83,7C           DATA >837C *
[1776] C91C 04,5B           DATA >045B *        RT             * Return to GPL.
[1777]                                 *        END
[1778]               *******************************************************
[1779]               * CALL SAMS(memory-boundery,memory-page[,...])        *
[1780]               *******************************************************
[1781]               * SAMS replaced AMSPASS, AMSMAP, AMSOFF, AMSON      *
[1782]               * CALL SAMS("PASS",...)                             *
[1783]               * CALL SAMS("MAP",...)                              *
[1784]               * CALL SAMS("OFF",...)                              *
[1785]               * CALL SAMS("ON",...)                               *
[1786]               ***************************************************** 
[1787]               * SAMS replaced AMSBANK full RAM memory management  *
[1788]               ***************************************************** 
[1789]               * CALL SAMS(2,page,3,page,A,page,B,page,C,page,     * 
[1790]               * D,page,E,page,F,page,...)                         *
[1791]               *                                                   *
[1792]               * Numbers 2 is >2000, 3 is >3000                    *
[1793]               * Letters A is >A000, B is >B000, C is >C000        *
[1794]               * Letter  D is >D000, E is >D000, F is >F000        *
[1795]               * page now is SAMS 4K pages from 0 to 255           *
[1796]               *****************************************************
[1797]               * BSAVE and BLOAD replaced with full memory address *
[1798]               * 4K RAM boundries same as SAMS addressing RAM      *

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0032 
RXB 2024
[1799]               *****************************************************
[1800] C91E D3,76    SAMS   DATA BEEP
[1801] C920 04,53,41        STRI 'SAMS'        
       C923 4D,53
[1802] C925 C9,27           DATA $+2
[1803] C927 06,BF,E0        CALL COMB            * ( ?
[1804]               **************************************************
[1805]               * Get stirng or token or numeric                 *
[1806]               * String is for PASS,MAP,OFF, ON                 *
[1807]               * 2 and 3 are numeric as no token exist for them *
[1808]               * thus need a numeric interpetation for 2 and 3  *
[1809]               * A, B, C, D, E, F are tokenized already for use *
[1810]               **************************************************
[1811] C92A 0F,79    SAMS2  XML  PGMCHR          * Skip ( OR COMMA 
[1812] C92C D6,42,C7        CEQ  >C7,@CHAT       * STRING?
[1813] C92F 49,99           BR   SAMSPS          *  Must be a TOKEN?
[1814] C931 06,BF,E4 SAMSTR CALL STRPAR          * GET STRING?      
[1815] C934 D6,4C,65        CEQ  >65,@FAC2       * STRING?
[1816] C937 45,30           BR   ERRBV           * ERROR BAD VALUE
[1817] C939 8F,50           DCZ  @FAC6           * 0 Length?
[1818] C93B 65,28           BS   ERRBA           * ERROR BAD ARGUMENT 
[1819] C93D D7,B0,4E        DCEQ >5041,V*FAC4    * PA? PASS MODE
       C940 50,41
[1820] C942 49,49           BR   AMSMAP          * SAMS MAP
[1821]               * CALL AMSPASS ************** 
[1822] C944 06,C9,6D        CALL PASAMS          * SAMS PASS
[1823] C947 49,C6           BR   SAMS3           * CHECK FOR COMMA
[1824] C949 D7,B0,4E AMSMAP DCEQ >4D41,V*FAC4    * MA? MAP MODE
       C94C 4D,41
[1825] C94E 49,55           BR   AMSOFF          *SAMS OFF
[1826]               * CALL AMSMAP ***************
[1827] C950 06,C9,88        CALL MAPAMS          * SAMS MAP 
[1828] C953 49,C6           BR   SAMS3           * CHECK FOR COMMA
[1829] C955 D7,B0,4E AMSOFF DCEQ >4F46,V*FAC4    * OF? SAMS OFF
       C958 4F,46
[1830] C95A 49,61           BR   AMSON           * SAMS ON
[1831]               * CALL AMSOFF ***************
[1832] C95C 06,C9,7F        CALL OFFAMS          * AMS OFF
[1833] C95F 49,C6           BR   SAMS3           * CHECK FOR COMMA
[1834] C961 D7,B0,4E AMSON  DCEQ >4F4E,V*FAC4    * ON? SAMS ON
       C964 4F,4E
[1835] C966 45,28           BR   ERRBA           * ERROR BAD ARGUMENT 
[1836]               * CALL AMSON ****************
[1837] C968 06,C9,76        CALL ONAMS           * AMS ON
[1838] C96B 49,C6           BR   SAMS3           * CHECK FOR COMMA   
[1839]               ******************************************************
[1840]               * Moves 12 bytes ASSEMBLY into >8300 Scratch Pad RAM *
[1841]               * Executes address at >8300 BLWP FAC & ARG workspace *
[1842]               ******************************************************
[1843] C96D 06,C9,92 PASAMS CALL AMSSUB            * AMS PASS SUBROUTINE
[1844] C970 BF,08,1E        DST  >1E01,@SETCRU     * LOAD PASS VALUE 
       C973 01
[1845] C974 49,8F           BR   SAMSUB            * EXECUTE IT
[1846] C976 06,C9,92 ONAMS  CALL AMSSUB            * AMS ON SUBROUTINE
[1847] C979 BF,08,1D        DST  >1D00,@SETCRU     * LOAD ON VALUE
       C97C 00
[1848] C97D 49,8F           BR   SAMSUB            * EXECUTE IT
[1849] C97F 06,C9,92 OFFAMS CALL AMSSUB            * AMS OFF SUBROUTINE
[1850] C982 BF,08,1E        DST  >1E00,@SETCRU     * LOAD OFF VALUE
       C985 00
[1851] C986 49,8F           BR   SAMSUB            * EXECUTE IT
[1852] C988 06,C9,92 MAPAMS CALL AMSSUB            * AMS MAP SUBROUTINE
[1853] C98B BF,08,1D        DST  >1D01,@SETCRU     * LOAD MAP VALUE
       C98E 01

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0033 
RXB 2024
[1854] C98F 0F,F0    SAMSUB XML  >F0               * EXECUTE ASSEMBLY
[1855] C991 00              RTN                    * RETURN
[1856]               **********************************************************
[1857]               * MOVES CPU PROGRAM TO SCRATCH PAD                       *
[1858] C992 31,00,12 AMSSUB MOVE 18,G@AMSCRU,@>8300 * GET ASSEMBLY FROM GROM  *
       C995 00,C9,0C
[1859] C998 00              RTN                     * RETURN                  *
[1860]               **********************************************************
[1861]               * SAMS PAGE CHANGE    
[1862]               ******************************************************
[1863]               * SAMS PAGES 2,3,A,B,C,D,E,F TOKENS                  *
[1864]               * PAGES range from 0 to 255 now instead of 16 to 255 *
[1865]               * Also now all SAMS RAM range not just lower 8K      *
[1866]               ******************************************************
[1867] C999 06,C9,D5 SAMSPS CALL SAMS4A         * ADDRESS IN TEMP & PUSHED 
[1868] C99C D6,42,B3        CEQ  COMMAZ,@CHAT   * COMMA?
[1869] C99F 44,C1           BR   ERRSYN         * ERROR SYNTAX
[1870] C9A1 0F,79           XML  PGMCHR         * Skip COMMA
[1871] C9A3 06,BF,E4        CALL STRPAR         * Get Number
[1872] C9A6 0F,12           XML  CFI            * PAGE Convert to integer
[1873] C9A8 06,C9,88        CALL MAPAMS         * AMS MAP
[1874] C9AB 06,C9,76        CALL ONAMS          * AMS ON
[1875]               * TEMP has RAM address >A000 up to >F000 
[1876]               * Shift address to be 2* value for SAMS register
[1877]               * i.e. >F0 would be >1E so >401E would be register 15
[1878] C9AE E6,16,03        SRL  3,@TEMP        * MOVE TO LOWER NIBBLE
[1879] C9B1 C0,17,16        EX   @TEMP,@TEMP+1  * SWAP BYTES INDEX ADDRESS
[1880] C9B4 C0,4A,4B        EX   @FAC1,@FAC     * SWAP BYTES PAGE:BANK
[1881] C9B7 BC,CF,BD        ST   @FAC1,@>4001(@TEMP) * SET BANK
       C9BA 01,16,4B
[1882] C9BD BC,CF,BD        ST   @FAC,@>4000(@TEMP)  * SET PAGE
       C9C0 00,16,4A
[1883] C9C3 06,C9,7F        CALL OFFAMS        * AMS OFF
[1884] C9C6 D6,42,B3 SAMS3  CEQ  COMMAZ,@CHAT  * COMMA?
[1885] C9C9 69,2A           BS   SAMS2
[1886] C9CB D6,42,B6 SAMS4  CEQ  RPARZ,@CHAT   * )?
[1887] C9CE 44,C1           BR   ERRSYN        * SYNTAX ERROR
[1888] C9D0 0F,79           XML  PGMCHR        * Skip ")"
[1889] C9D2 06,00,12        CALL RETURN        * RETURN TO CALLER
[1890]               ****************************************************
[1891]               * SAMS PAGES 2,3,A,B,C,D,E,F                       *
[1892]               * Get 2 and 3 numeric or A to F tokens             *
[1893]               * input in CHAT is >C8 is numeric or must be token *
[1894]               * output TEMP has RAM ADDRESS of 4K page to save   *
[1895]               ****************************************************
[1896] C9D5 87,16    SAMS4A DCLR @TEMP      * Clear address storage
[1897] C9D7 D6,42,C8        CEQ  >C8,@CHAT  * NUMBER?
[1898] C9DA 49,F7           BR   SAMSAL     * No must be 2 or 3 or A to F 
[1899] C9DC 06,BF,E4        CALL STRPAR     * Get number 
[1900] C9DF 0F,12           XML  CFI        * Convert to integer
[1901] C9E1 CA,4B,04        CHE  4,@FAC1    * 1 or higher
[1902] C9E4 65,28           BS   ERRBA      * ERROR BAD ARGUEMENT
[1903] C9E6 BE,16,20        ST   >20,@TEMP  * Defualt address >2000
[1904] C9E9 D6,4B,02        CEQ  2,@FAC1    * 2?
[1905] C9EC 69,F6           BS   SAMSP3     * Ok so done
[1906] C9EE CA,4B,04        CHE  4,@FAC1    * 4 or higher?           
[1907] C9F1 65,28           BS   ERRBA      * ERROR BAD ARGUEMENT
[1908] C9F3 A2,16,10        ADD  >10,@TEMP  * Get address 
[1909] C9F6 00       SAMSP3 RTN             * RETURN
[1910]               * 24K ADDRESS PAGES
[1911] C9F7 CA,42,47 SAMSAL CHE  >47,@CHAT  * G OR HIGHER
[1912] C9FA 65,28           BS   ERRBA      * ERROR BAD ARGUEMENT
[1913] C9FC CA,42,41        CHE  >41,@CHAT  * A OR HIGHER?
[1914] C9FF 45,28           BR   ERRBA      * ERROR BAD ARGUEMENT

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0034 
RXB 2024
[1915] CA01 BC,5C,42        ST   @CHAT,@ARG * Save TOKEN
[1916] CA04 A6,5C,41        SUB  >41,@ARG   * 0 TO 5
[1917] CA07 BE,16,A0        ST   >A0,@TEMP  * Default address >A000
[1918] CA0A 8E,5C    SAMSLP CZ   @ARG       * 0?
[1919] CA0C 6A,16           BS   SAMSD      * RETURN 
[1920] CA0E A2,16,10        ADD  >10,@TEMP  * >B000 TO >F000 
[1921] CA11 92,5C           DEC  @ARG       * 5 TO 1
[1922] CA13 05,CA,0A        B    SAMSLP     * LOOP FOREVER
[1923] CA16 0F,79    SAMSD  XML  PGMCHR     * SKIP TOKEN
[1924] CA18 00              RTN             * RETURN
[1925]               ***********************************************************
[1926]               * CALL EXECUTE(address[,...])     BLWP @address           *
[1927]               ***********************************************************
[1928] CA19 CA,49    EXECLK DATA EXEBL
[1929] CA1B 07,45,58        STRI 'EXECUTE'
       CA1E 45,43,55
       CA21 54,45
[1930] CA23 CA,25           DATA  $+2
[1931] CA25 06,BF,E0        CALL COMB               (?
[1932] CA28 06,BF,F6 EXAGN  CALL SUBLP3             Get address
[1933] CA2B 31,00,0C        MOVE 12,G@CPUPGM,@PAD   Load PGM
       CA2E 00,CA,3D
[1934] CA31 BD,04,4A        DST  @FAC,@PAD4         Load address    
[1935] CA34 0F,F0           XML  >F0                Execute address 
[1936] CA36 D6,42,B3        CEQ  COMMAZ,@CHAT       Comma?
[1937] CA39 6A,28           BS   EXAGN              Repeat
[1938] CA3B 44,18           BR   GC429
[1939]               ***********************************************************
[1940]               * CPU PROGRAM FOR >8300 SCATCH PAD SUBROUTINE EXECUTE     *
[1941]               ***********************************************************
[1942]               *                          AORG >8300                     *
[1943] CA3D 83,02    CPUPGM DATA >8302 * CPUPGM DATA >8302  First address.     *
[1944] CA3F 04,20           DATA >0420 *        BLWP @>834A Switch contex      *
[1945] CA41 83,4A           DATA >834A *                    FAC not used       *
[1946] CA43 04,E0           DATA >04E0 *        CLR  @>837C Clear for GPL      *
[1947] CA45 83,7C           DATA >837C *                                       *
[1948] CA47 04,5B           DATA >045B *        RT          Return to GPL.     *
[1949]                                 *        END                            *
[1950]               ***********************************************************
[1951]               * CALL EXE(address[,...])       BL @address               *
[1952]               ***********************************************************
[1953] CA49 D3,92    EXEBL  DATA PSAVE
[1954] CA4B 03,45,58        STRI 'EXE'
       CA4E 45
[1955] CA4F CA,51           DATA  $+2
[1956] CA51 06,BF,E0        CALL COMB               (?
[1957] CA54 06,BF,F6 EXEBLA CALL SUBLP3
[1958] CA57 BD,00,4A        DST  @FAC,@PAD          Load address    
[1959] CA5A 0F,F0           XML  >F0                Execute address 
[1960] CA5C D6,42,B3        CEQ  COMMAZ,@CHAT       Comma?
[1961] CA5F 6A,54           BS   EXEBLA             Repeat
[1962] CA61 44,18           BR   GC429
[1963]               ***********************************************************
[1964]               * CALL ISRON(variable)                                    *
[1965]               ***********************************************************
[1966] CA63 CA,83    ISRON  DATA ISROFF
[1967] CA65 05,49,53        STRI 'ISRON'           
       CA68 52,4F,4E
[1968] CA6B CA,6D           DATA $+2
[1969] CA6D 06,BF,E0        CALL COMB           * (?
[1970] CA70 06,BF,F6        CALL SUBLP3         * Get value
[1971] CA73 8F,4A           DCZ  @FAC           * 0?
[1972] CA75 65,30           BS   ERRBV          * ERROR BAD VALUE
[1973] CA77 06,CA,7C        CALL SISRON         * Do ISR

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0035 
RXB 2024
[1974] CA7A 43,05           BR   PEEK5          * Return
[1975] CA7C 86,8F,DD SISRON CLR  @>6004         * Set ROM PAGE 3 at >6004
       CA7F 04
[1976] CA80 0F,7C           XML  >7C            * ISR ON Assembly
[1977] CA82 00              RTN                 * Return
[1978]               ***********************************************************
[1979]               * CALL ISROFF(variable)                                   *
[1980]               ***********************************************************
[1981] CA83 CA,A8    ISROFF DATA USER
[1982] CA85 06,49,53        STRI 'ISROFF'          
       CA88 52,4F,46
       CA8B 46
[1983] CA8C CA,8E           DATA $+2
[1984] CA8E 06,BF,E0        CALL COMB         * (?
[1985] CA91 0F,79           XML  PGMCHR       * Skip  
[1986] CA93 06,BF,F0        CALL SNDER        * Send to XB 
[1987] CA96 06,BF,FA        CALL CLRFAC       * Clear FAC for FP
[1988] CA99 06,CA,A1        CALL SISROF       * Do ISR
[1989] CA9C 06,BF,F2        CALL CIFSND       * Send value
[1990] CA9F 43,05           BR   PEEK5        * Return
[1991] CAA1 86,8F,DD SISROF CLR  @>6004       * Set ROM PAGE 3 at >6004
       CAA4 04
[1992] CAA5 0F,7D           XML  >7D          * ISR OFF Assembly
[1993] CAA7 00              RTN               * Return
[1994]               **********************************************************
[1995]               * CALL USER(path-string)                                 *
[1996]               **********************************************************
[1997] CAA8 D8,20    USER   DATA POKER
[1998] CAAA 04,55,53        STRI 'USER'           
       CAAD 45,52
[1999] CAAF CA,B1           DATA $+2
[2000] CAB1 06,BF,E0        CALL COMB              PARSE UP TO "
[2001] CAB4 06,BF,E6        CALL STRGET            Get path 
[2002] CAB7 BE,A8,C0        ST   >20,V@RECBUF      Clear byte
       CABA 20
[2003] CABB 35,00,50        MOVE 80,V@RECBUF,V@RECBUF+1 Ripple 80 times
       CABE A8,C1,A8
       CAC1 C0
[2004] CAC2 31,00,04        MOVE 4,G@UPAB,V@RECBUF+1  Set up USER PAB
       CAC5 A8,C1,CA
       CAC8 D9
[2005] CAC9 BC,A8,C9        ST   @FAC7,V@>08C9     Set length
       CACC 51
[2006] CACD 34,50,A8        MOVE @FAC6,V*FAC4,V@>08CA Load PAB path
       CAD0 CA,B0,4E
[2007] CAD3 BE,A3,BB        ST   >FF,V@CONFLG      Set USER flag
       CAD6 FF
[2008] CAD7 43,05           BR   PEEK5
[2009] CAD9 14,09,00 UPAB   BYTE >14,>09,>00,80
       CADC 50
[2010]               ***********************************************************
[2011]              
[2012]                      AORG >0B00
[2013]               ***********************************************************
[2014]               *                BASIC KEYWORD TABLE
[2015]               *      THE TOKEN IS ITS LEFT BINDING POWER
[2016]               ***********************************************************
[2017] CB00 CB,14,CB KEYTAB DATA CHAR1,CHAR2,CHAR3,CHAR4,CHAR5
       CB03 35,CB,4E
       CB06 CB,E7,CC
       CB09 51
[2018] CB0A CC,A0,CC        DATA CHAR6,CHAR7,CHAR8,CHAR9,CHARA
       CB0D EE,CD,27
       CB10 CD,55,CD

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0036 
RXB 2024
       CB13 60
[2019] CB14 21       CHAR1  TEXT '!'
[2020] CB15 83              BYTE TREMZ             *  !
[2021] CB16 23              TEXT '#'
[2022] CB17 FD              BYTE NUMBEZ            *  #
[2023] CB18 26              TEXT '&'
[2024] CB19 B8              BYTE CONCZ             *  &
[2025] CB1A 28              TEXT '('
[2026] CB1B B7              BYTE LPARZ             *  (
[2027] CB1C 29              TEXT ')'
[2028] CB1D B6              BYTE RPARZ             *  )
[2029] CB1E 2A              TEXT '*'
[2030] CB1F C3              BYTE MULTZ             *  *
[2031] CB20 2B              TEXT '+'
[2032] CB21 C1              BYTE PLUSZ             *  +
[2033] CB22 2C              TEXT ','
[2034] CB23 B3              BYTE COMMAZ            *  ,
[2035] CB24 2D              TEXT '-'
[2036] CB25 C2              BYTE MINUSZ            *  -
[2037] CB26 2F              TEXT '/'
[2038] CB27 C4              BYTE DIVIZ             *  /
[2039] CB28 3A              TEXT ':'
[2040] CB29 B5              BYTE COLONZ            *  :
[2041] CB2A 3B              TEXT ';'
[2042] CB2B B4              BYTE SEMICZ            *  ;
[2043] CB2C 3C              TEXT '<'
[2044] CB2D BF              BYTE LESSZ             *  <
[2045] CB2E 3D              TEXT '='
[2046] CB2F BE              BYTE EQUALZ            *  =
[2047] CB30 3E              TEXT '>'
[2048] CB31 C0              BYTE GREATZ            *  >
[2049] CB32 5E              TEXT '^'
[2050] CB33 C5              BYTE CIRCUZ            *  ^
[2051] CB34 FF              BYTE >FF
[2052] CB35 3A,3A    CHAR2  TEXT '::'
[2053] CB37 82              BYTE SSEPZ             *  ::
[2054] CB38 41,54           TEXT 'AT'
[2055] CB3A F0              BYTE ATZ               *  AT
[2056] CB3B 47,4F           TEXT 'GO'
[2057] CB3D 85              BYTE GOZ               *  GO * RXB MOTION
[2058] CB3E 49,46           TEXT 'IF'
[2059] CB40 84              BYTE IFZ               *  IF
[2060] CB41 4F,4E           TEXT 'ON'
[2061] CB43 9B              BYTE ONZ               *  ON * RXB ONKEY
[2062] CB44 4F,52           TEXT 'OR'
[2063] CB46 BA              BYTE ORZ               *  OR
[2064] CB47 50,49           TEXT 'PI'
[2065] CB49 DD              BYTE PIZ               *  PI
[2066] CB4A 54,4F           TEXT 'TO'
[2067] CB4C B1              BYTE TOZ               *  TO
[2068] CB4D FF              BYTE >FF
[2069] CB4E 41,42,53 CHAR3  TEXT 'ABS'
[2070] CB51 CB              BYTE ABSZ              *  ABS
[2071] CB52 41,4C,4C        TEXT 'ALL'
[2072] CB55 EC              BYTE ALLZ              *  ALL
[2073] CB56 41,4E,44        TEXT 'AND'
[2074] CB59 BB              BYTE ANDZ              *  AND
[2075] CB5A 41,53,43        TEXT 'ASC'
[2076] CB5D DC              BYTE ASCZ              *  ASC
[2077] CB5E 41,54,4E        TEXT 'ATN'
[2078] CB61 CC              BYTE ATNZ              *  ATN
[2079] CB62 42,59,45        TEXT 'BYE'
[2080] CB65 03              BYTE >03               *  BYE
[2081] CB66 43,4F,4E        TEXT 'CON'

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0037 
RXB 2024
[2082] CB69 01              BYTE >01               *  CONtinue
[2083] CB6A 43,4F,53        TEXT 'COS'
[2084] CB6D CD              BYTE COSZ              *  COS
[2085] CB6E 44,45,46        TEXT 'DEF'
[2086] CB71 89              BYTE DEFZ              *  DEF
[2087]               * GKXB added token
[2088] CB72 44,45,4C        TEXT 'DEL'
[2089] CB75 09              BYTE >09               *  DEL
[2090] CB76 44,49,4D        TEXT 'DIM'
[2091] CB79 8A              BYTE DIMZ              *  DIM
[2092] CB7A 45,4E,44        TEXT 'END'
[2093] CB7D 8B              BYTE ENDZ              *  END
[2094] CB7E 45,4F,46        TEXT 'EOF'
[2095] CB81 CA              BYTE EOFZ              *  EOF
[2096] CB82 45,58,50        TEXT 'EXP'
[2097] CB85 CE              BYTE EXPZZ             *  EXP
[2098] CB86 46,4F,52        TEXT 'FOR'
[2099] CB89 8C              BYTE FORZ              *  FOR
[2100] CB8A 49,4E,54        TEXT 'INT'
[2101] CB8D CF              BYTE INTZ              *  INT
[2102] CB8E 4C,45,4E        TEXT 'LEN'
[2103] CB91 D5              BYTE LENZ              *  LEN
[2104] CB92 4C,4F,47        TEXT 'LOG'
[2105] CB95 D0              BYTE LOGZ              *  LOG
[2106] CB96 4D,41,58        TEXT 'MAX'
[2107] CB99 DF              BYTE MAXZ              *  MAX
[2108] CB9A 4D,49,4E        TEXT 'MIN'
[2109] CB9D E0              BYTE MINZ              *  MIN
[2110] CB9E 4E,45,57        TEXT 'NEW'
[2111] CBA1 00              BYTE >00               *  NEW * RXB CALL NEW
[2112] CBA2 4E,4F,54        TEXT 'NOT'
[2113] CBA5 BD              BYTE NOTZ              *  NOT
[2114] CBA6 4E,55,4D        TEXT 'NUM'
[2115] CBA9 04              BYTE >04               *  NUMber
[2116] CBAA 4F,4C,44        TEXT 'OLD'
[2117] CBAD 05              BYTE >05               *  OLD * RXB SAMS
[2118] CBAE 50,4F,53        TEXT 'POS'
[2119] CBB1 D9              BYTE POSZ              *  POS
[2120] CBB2 52,45,43        TEXT 'REC'
[2121] CBB5 DE              BYTE RECZ              *  REC
[2122] CBB6 52,45,4D        TEXT 'REM'
[2123] CBB9 9A              BYTE REMZ              *  REMark
[2124] CBBA 52,45,53        TEXT 'RES'
[2125] CBBD 06              BYTE >06               *  RESequence
[2126] CBBE 52,4E,44        TEXT 'RND'
[2127] CBC1 D7              BYTE RNDZ              *  RND * RXB CHANGED
[2128] CBC2 52,55,4E        TEXT 'RUN'
[2129] CBC5 A9              BYTE RUNZ              *  RUN * RXB SAMS
[2130] CBC6 53,47,4E        TEXT 'SGN'
[2131] CBC9 D1              BYTE SGNZZ             *  SGN
[2132] CBCA 53,49,4E        TEXT 'SIN'
[2133] CBCD D2              BYTE SINZ              *  SIN
[2134] CBCE 53,51,52        TEXT 'SQR'
[2135] CBD1 D3              BYTE SQRZ              *  SQR
[2136] CBD2 53,55,42        TEXT 'SUB'
[2137] CBD5 A1              BYTE SUBZ              *  SUB
[2138] CBD6 54,41,42        TEXT 'TAB'
[2139] CBD9 FC              BYTE TABZ              *  TAB
[2140] CBDA 54,41,4E        TEXT 'TAN'
[2141] CBDD D4              BYTE TANZ              *  TAN
[2142] CBDE 56,41,4C        TEXT 'VAL'
[2143] CBE1 DA              BYTE VALZ              *  VAL
[2144] CBE2 58,4F,52        TEXT 'XOR'
[2145] CBE5 BC              BYTE XORZ              *  XOR

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0038 
RXB 2024
[2146] CBE6 FF              BYTE >FF
[2147] CBE7 42,41,53 CHAR4  TEXT 'BASE'
       CBEA 45
[2148] CBEB F1              BYTE BASEZ             *  BASE
[2149] CBEC 42,45,45        TEXT 'BEEP'
       CBEF 50
[2150] CBF0 EE              BYTE BEEPZ             *  BEEP
[2151] CBF1 43,41,4C        TEXT 'CALL'
       CBF4 4C
[2152] CBF5 9D              BYTE CALLZ             *  CALL
[2153] CBF6 43,48,52        TEXT 'CHR$'
       CBF9 24
[2154] CBFA D6              BYTE CHRZZ             *  CHR$
[2155]               * GKXB added token
[2156] CBFB 43,4F,50        TEXT 'COPY'
       CBFE 59
[2157] CBFF 0A              BYTE >0A               *  COPY
[2158] CC00 44,41,54        TEXT 'DATA'
       CC03 41
[2159] CC04 93              BYTE DATAZ             *  DATA
[2160] CC05 45,4C,53        TEXT 'ELSE'
       CC08 45
[2161] CC09 81              BYTE ELSEZ             *  ELSE
[2162] CC0A 47,4F,54        TEXT 'GOTO'
       CC0D 4F
[2163] CC0E 86              BYTE GOTOZ             *  GOTO * RXB ONKEY
[2164] CC0F 4C,49,53        TEXT 'LIST'
       CC12 54
[2165] CC13 02              BYTE >02               *  LIST
[2166]               * GKXB added token
[2167] CC14 4D,4F,56        TEXT 'MOVE'
       CC17 45
[2168] CC18 0B              BYTE >0B               *  MOVE
[2169] CC19 4E,45,58        TEXT 'NEXT'
       CC1C 54
[2170] CC1D 96              BYTE NEXTZ             *  NEXT
[2171] CC1E 4F,50,45        TEXT 'OPEN'
       CC21 4E
[2172] CC22 9F              BYTE OPENZ             *  OPEN
[2173] CC23 52,45,41        TEXT 'READ'
       CC26 44
[2174] CC27 97              BYTE READZ             *  READ
[2175] CC28 52,50,54        TEXT 'RPT$'
       CC2B 24
[2176] CC2C E1              BYTE RPTZZ             *  RPT$
[2177] CC2D 53,41,56        TEXT 'SAVE'
       CC30 45
[2178] CC31 07              BYTE >07               *  SAVE * RXB SAVE IV254
[2179] CC32 53,45,47        TEXT 'SEG$'
       CC35 24
[2180] CC36 D8              BYTE SEGZZ             *  SEG$
[2181] CC37 53,49,5A        TEXT 'SIZE'
       CC3A 45
[2182] CC3B EB              BYTE SIZEZ             *  SIZE * RXB CALL SIZE
[2183] CC3C 53,54,45        TEXT 'STEP'
       CC3F 50
[2184] CC40 B2              BYTE STEPZ             *  STEP
[2185] CC41 53,54,4F        TEXT 'STOP'
       CC44 50
[2186] CC45 98              BYTE STOPZ             *  STOP * RXB MOTION
[2187] CC46 53,54,52        TEXT 'STR$'
       CC49 24
[2188] CC4A DB              BYTE STRZZ             *  STR$
[2189] CC4B 54,48,45        TEXT 'THEN'

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0039 
RXB 2024
       CC4E 4E
[2190] CC4F B0              BYTE THENZ             *  THEN
[2191] CC50 FF              BYTE >FF
[2192] CC51 42,52,45 CHAR5  TEXT 'BREAK'
       CC54 41,4B
[2193] CC56 8E              BYTE BREAKZ            *  BREAK
[2194] CC57 43,4C,4F        TEXT 'CLOSE'
       CC5A 53,45
[2195] CC5C A0              BYTE CLOSEZ            *  CLOSE
[2196] CC5D 44,49,47        TEXT 'DIGIT'
       CC60 49,54
[2197] CC62 E9              BYTE DIGITZ            *  DIGIT
[2198] CC63 45,52,41        TEXT 'ERASE'
       CC66 53,45
[2199] CC68 EF              BYTE ERASEZ            *  ERASE
[2200] CC69 45,52,52        TEXT 'ERROR'
       CC6C 4F,52
[2201] CC6E A5              BYTE ERRORZ            *  ERROR
[2202] CC6F 46,49,58        TEXT 'FIXED'
       CC72 45,44
[2203] CC74 FA              BYTE FIXEDZ            *  FIXED
[2204] CC75 47,4F,53        TEXT 'GOSUB'
       CC78 55,42
[2205] CC7A 87              BYTE GOSUBZ            *  GOSUB
[2206] CC7B 49,4D,41        TEXT 'IMAGE'
       CC7E 47,45
[2207] CC80 A3              BYTE IMAGEZ            *  IMAGE
[2208] CC81 49,4E,50        TEXT 'INPUT'
       CC84 55,54
[2209] CC86 92              BYTE INPUTZ            *  INPUT
[2210] CC87 4D,45,52        TEXT 'MERGE'
       CC8A 47,45
[2211] CC8C 08              BYTE >08               *  MERGE
[2212] CC8D 50,52,49        TEXT 'PRINT'
       CC90 4E,54
[2213] CC92 9C              BYTE PRINTZ            *  PRINT
[2214] CC93 54,52,41        TEXT 'TRACE'
       CC96 43,45
[2215] CC98 90              BYTE TRACEZ            *  TRACE
[2216] CC99 55,53,49        TEXT 'USING'
       CC9C 4E,47
[2217] CC9E ED              BYTE USINGZ            *  USING
[2218] CC9F FF              BYTE >FF
[2219] CCA0 41,43,43 CHAR6  TEXT 'ACCEPT'
       CCA3 45,50,54
[2220] CCA6 A4              BYTE ACCEPZ            *  ACCEPT
[2221] CCA7 41,50,50        TEXT 'APPEND'
       CCAA 45,4E,44
[2222] CCAD F9              BYTE APPENZ            *  APPEND
[2223] CCAE 44,45,4C        TEXT 'DELETE'
       CCB1 45,54,45
[2224] CCB4 99              BYTE DELETZ            *  DELETE
[2225] CCB5 4C,49,4E        TEXT 'LINPUT'
       CCB8 50,55,54
[2226] CCBB AA              BYTE LINPUZ            *  LINPUT
[2227] CCBC 4E,55,4D        TEXT 'NUMBER'
       CCBF 42,45,52
[2228] CCC2 04              BYTE >04               *  NUMBER
[2229] CCC3 4F,50,54        TEXT 'OPTION'
       CCC6 49,4F,4E
[2230] CCC9 9E              BYTE OPTIOZ            *  OPTION
[2231] CCCA 4F,55,54        TEXT 'OUTPUT'
       CCCD 50,55,54
[2232] CCD0 F7              BYTE OUTPUZ            *  OUTPUT

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0040 
RXB 2024
[2233] CCD1 52,45,54        TEXT 'RETURN'
       CCD4 55,52,4E
[2234] CCD7 88              BYTE RETURZ            *  RETURN
[2235] CCD8 53,55,42        TEXT 'SUBEND'
       CCDB 45,4E,44
[2236] CCDE A8              BYTE SUBNDZ            *  SUBEND
[2237] CCDF 55,41,4C        TEXT 'UALPHA'
       CCE2 50,48,41
[2238] CCE5 EA              BYTE UALPHZ            *  UALPHA
[2239] CCE6 55,50,44        TEXT 'UPDATE'
       CCE9 41,54,45
[2240] CCEC F8              BYTE UPDATZ            *  UPDATE
[2241] CCED FF              BYTE >FF
[2242] CCEE 44,49,53 CHAR7  TEXT 'DISPLAY'
       CCF1 50,4C,41
       CCF4 59
[2243] CCF5 A2              BYTE DISPLZ            *  DISPLAY
[2244] CCF6 4E,55,4D        TEXT 'NUMERIC'
       CCF9 45,52,49
       CCFC 43
[2245] CCFD E8              BYTE NUMERZ            *  NUMERIC
[2246] CCFE 52,45,53        TEXT 'RESTORE'
       CD01 54,4F,52
       CD04 45
[2247] CD05 94              BYTE RESTOZ            *  RESTORE
[2248] CD06 53,55,42        TEXT 'SUBEXIT'
       CD09 45,58,49
       CD0C 54
[2249] CD0D A7              BYTE SUBXTZ            *  SUBEXIT
[2250] CD0E 55,4E,42        TEXT 'UNBREAK'
       CD11 52,45,41
       CD14 4B
[2251] CD15 8F              BYTE UNBREZ            *  UNBREAK
[2252] CD16 55,4E,54        TEXT 'UNTRACE'
       CD19 52,41,43
       CD1C 45
[2253] CD1D 91              BYTE UNTRAZ            *  UNTRACE
[2254] CD1E 57,41,52        TEXT 'WARNING'
       CD21 4E,49,4E
       CD24 47
[2255] CD25 A6              BYTE WARNZ             *  WARNING
[2256] CD26 FF              BYTE >FF
[2257] CD27 43,4F,4E CHAR8  TEXT 'CONTINUE'
       CD2A 54,49,4E
       CD2D 55,45
[2258] CD2F 01              BYTE >01               *  CONTINUE
[2259] CD30 49,4E,54        TEXT 'INTERNAL'
       CD33 45,52,4E
       CD36 41,4C
[2260] CD38 F5              BYTE INTERZ            *  INTERNAL
[2261] CD39 52,45,4C        TEXT 'RELATIVE'
       CD3C 41,54,49
       CD3F 56,45
[2262] CD41 F4              BYTE RELATZ            *  RELATIVE
[2263] CD42 56,41,4C        TEXT 'VALIDATE'
       CD45 49,44,41
       CD48 54,45
[2264] CD4A FE              BYTE VALIDZ            *  VALIDATE
[2265] CD4B 56,41,52        TEXT 'VARIABLE'
       CD4E 49,41,42
       CD51 4C,45
[2266] CD53 F3              BYTE VARIAZ            *  VARIABLE
[2267] CD54 FF              BYTE >FF
[2268] CD55 52,41,4E CHAR9  TEXT 'RANDOMIZE'

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0041 
RXB 2024
       CD58 44,4F,4D
       CD5B 49,5A,45
[2269] CD5E 95              BYTE RANDOZ            *  RANDOMIZE
[2270] CD5F FF              BYTE >FF
[2271] CD60 53,45,51 CHARA  TEXT 'SEQUENTIAL'
       CD63 55,45,4E
       CD66 54,49,41
       CD69 4C
[2272] CD6A F6              BYTE SEQUEZ            *  SEQUENTIAL
[2273] CD6B FF              BYTE >FF
[2274]               ***********************************************************
[2275]                      
[2276]                      AORG >0D77
[2277]               * GROM ADDRESS >CD77 FOR ERRTAB
[2278]               ***********************************************************
[2279]               * ERRTAB - Error table containing all of the error messages
[2280]               *          error numbers and the severity code for each
[2281]               *          error. The error call number is the data byte
[2282]               *          that must follow the CALL ERRZZ or CALL WARNZZ.
[2283]               *          Messages with severity of zero are system
[2284]               *          messages and not error messages.
[2285]               *
[2286]               *  Message, Error #, Severity                     CALL #
[2287]               ***********************************************************
[2288] CD77 60,40    ERRTAB DATA MSGFST            * "READY"
* Warning - Address not even in 2288
[2289] CD79 00,00           BYTE 0,0
[2290] CD7B 60,48           DATA MSGBRK            * "BREAKPOINT"
[2291] CD7D 00,00           BYTE 0,0
[2292] CD7F 60,65           DATA MSG10             * "NUMERIC OVERFLOW"
[2293] CD81 0A,01           BYTE 10,1
[2294] CD83 60,76           DATA MSG14             * "SYNTAX ERROR"
[2295] CD85 0E,09           BYTE 14,9
[2296] CD87 60,83           DATA MSG16             * "ILLEGAL AFTER SUBPROGRAM"
[2297] CD89 10,09           BYTE 16,9
[2298] CD8B 60,9C           DATA MSG17             * "UNMATCHED QUOTES"
[2299] CD8D 11,09           BYTE 17,9
[2300] CD8F 60,AD           DATA MSG19             * "NAME TOO LONG"
[2301] CD91 13,09           BYTE 19,9
[2302] CD93 60,BB           DATA MSG24             * "STRING-NUMBER MISMATCH"
[2303] CD95 18,09           BYTE 24,9
[2304] CD97 60,D2           DATA MSG25             * "OPTION BASE ERROR"
[2305] CD99 19,09           BYTE 25,9
[2306] CD9B 60,E4           DATA MSG28             * "IMPROPERLY USED NAME"
[2307] CD9D 1C,09           BYTE 28,9
[2308] CD9F 61,10           DATA MSG36             * "IMAGE ERROR"
[2309] CDA1 24,09           BYTE 36,9
[2310] CDA3 61,1C           DATA MSG39             * "MEMORY FULL"
[2311] CDA5 27,09           BYTE 39,9
[2312] CDA7 61,28           DATA MSG40             * "STACK OVERFLOW"
[2313] CDA9 28,09           BYTE 40,9
[2314] CDAB 61,37           DATA MSG43             * "NEXT WITHOUT FOR"
[2315] CDAD 2B,09           BYTE 43,9
[2316] CDAF 61,48           DATA MSG44             * "FOR-NEXT NESTING"
[2317] CDB1 2C,09           BYTE 44,9
[2318] CDB3 61,59           DATA MSG47             * "MUST BE IN SUBPROGRAM"
[2319] CDB5 2F,09           BYTE 47,9
[2320] CDB7 61,6F           DATA MSG48             * "RECURSIVE SUBPROGRAM CALL"
[2321] CDB9 30,09           BYTE 48,9
[2322] CDBB 61,89           DATA MSG49             * "MISSING SUBEND"
[2323] CDBD 31,09           BYTE 49,9
[2324] CDBF 61,98           DATA MSG51             * "RETURN WITHOUT GOSUB"
[2325] CDC1 33,09           BYTE 51,9
[2326] CDC3 61,AD           DATA MSG54             * "STRING TRUNCATED"

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0042 
RXB 2024
[2327] CDC5 36,01           BYTE 54,1
[2328] CDC7 61,BE           DATA MSG57             * "BAD SUBSCRIPT"
[2329] CDC9 39,09           BYTE 57,9
[2330] CDCB 63,24           DATA MSG56             * "SPEECH STRING TOO LONG"
[2331] CDCD 38,09           BYTE 56,9
[2332] CDCF 61,CC           DATA MSG60             * "LINE NOT FOUND"
[2333] CDD1 3C,09           BYTE 60,9
[2334] CDD3 61,DB           DATA MSG61             * "BAD LINE NUMBER"
[2335] CDD5 3D,09           BYTE 61,9
[2336] CDD7 62,C5           DATA MSG62             * "LINE TOO LONG"
[2337] CDD9 3E,09           BYTE 62,9
[2338] CDDB 61,EB           DATA MSG67             * "CAN'T CONTINUE"
[2339] CDDD 43,09           BYTE 67,9
[2340] CDDF 61,FA           DATA MSG69             * "COMMAND ILLEGAL IN PROGRAM
[2341] CDE1 45,09           BYTE 69,9
[2342] CDE3 62,15           DATA MSG70             * "ONLY LEGAL IN A PROGRAM"
[2343] CDE5 46,09           BYTE 70,9
[2344] CDE7 62,2D           DATA MSG74             * "BAD ARGUMENT"
[2345] CDE9 4A,09           BYTE 74,9
[2346] CDEB 62,3A           DATA MSG78             * "NO PROGRAM PRESENT"
[2347] CDED 4E,01           BYTE 78,1
[2348] CDEF 62,4D           DATA MSG79             * "BAD VALUE"
[2349] CDF1 4F,09           BYTE 79,9
[2350] CDF3 62,57           DATA MSG81             * "INCORRECT ARGUMENT LIST"
[2351] CDF5 51,09           BYTE 81,9
[2352] CDF7 62,6F           DATA MSG83             * "INPUT ERROR" (WARNING)
[2353] CDF9 53,01           BYTE 83,1
[2354] CDFB 62,7B           DATA MSG84             * "DATA ERROR"
[2355] CDFD 54,09           BYTE 84,9
[2356] CDFF 62,9B           DATA MSG109            * "FILE ERROR"
[2357] CE01 6D,09           BYTE 109,9
[2358] CE03 62,A6           DATA MSG130            * "I/O ERROR" (WARNING)
[2359] CE05 82,01           BYTE 130,1
[2360] CE07 62,A6           DATA MSG130            * "I/O ERROR"
[2361] CE09 82,09           BYTE 130,9
[2362] CE0B 62,B0           DATA MSG135            * "SUBPROGRAM NOT FOUND"
[2363] CE0D 87,09           BYTE 135,9
[2364] CE0F 61,CC           DATA MSG60             * "LINE NOT FOUND" (WARNING)
[2365] CE11 3C,01           BYTE 60,1
[2366] CE13 62,86           DATA MSG97             * "PROTECTION VIOLATION"
[2367] CE15 61,09           BYTE 97,9
[2368] CE17 60,F9           DATA MSG34             * "UNRECOGNIZED CHARACTER"
[2369] CE19 14,09           BYTE 20,9
[2370]               * Following message is added 6/24/81 for the INPUT bug.
[2371] CE1B 62,6F           DATA MSG83             * "INPUT ERROR"
[2372] CE1D 53,09           BYTE 83,9
[2373]               ***********************************************************
[2374]               * TRACBK - Is used to trace back the error levels through
[2375]               *          nested function references and subprogram calls.
[2376]               *          It takes care of issuing the trace back info
[2377]               *          messages in these two cases. It leaves the stack
[2378]               *          unchanged except in the case of a prescan error
[2379]               *          occurring in an external subprogram. If any
[2380]               *          messages are issued, it returns with the staus
[2381]               *          set, else reset.
[2382]               ***********************************************************
[2383] CE1F BD,52,6E TRACBK DST  @VSPTR,@FAC8      Get a temp stack pointer
[2384] CE22 C5,52,24 GCE22  DCH  @STVSPT,@FAC8     While not end of stack
[2385] CE25 4E,48           BR   GCE48
[2386] CE27 D6,E0,02        CEQ  >68,V@2(@FAC8)    If UDF entry
       CE2A 52,68
[2387] CE2C 6E,49           BS   TRAC05
[2388] CE2E D6,E0,02        CEQ  >70,V@2(@FAC8)    If temp UDF entry
       CE31 52,70

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0043 
RXB 2024
[2389] CE33 4E,3B           BR   GCE3B
[2390] CE35 A7,6E,00        DSUB 8,@VSPTR          Trash it so DELINK won't
       CE38 08
[2391] CE39 4E,49           BR   TRAC05             mess up the symbol table
[2392] CE3B D6,E0,02 GCE3B  CEQ  >6A,V@2(@FAC8)    If subprogram
       CE3E 52,6A
[2393] CE40 6E,F8           BS   TRAC50
[2394] CE42 A7,52,00        DSUB 8,@FAC8           Goto next entry on stack
       CE45 08
[2395] CE46 4E,22           BR   GCE22
[2396] CE48 00       GCE48  RTN                    If no UDF or subprograms acti
[2397]               * Trace back UDF reference
[2398] CE49 86,56    TRAC05 CLR  @FAC12            To cheat on ERPRNT
[2399] CE4B C0,56,44        EX   @PRGFLG,@FAC12    Force line # NOT to be printe
[2400] CE4E D6,57,01        CEQ  1,@FAC13          If warning message
[2401] CE51 4E,58           BR   GCE58
[2402]               * Place for the message already set in WRNZZ3
[2403] CE53 06,6E,1B        CALL ERPNT5            Don't restore char set
[2404] CE56 4E,5B           BR   GCE5B
[2405] CE58 06,6E,0E GCE58  CALL ERPRNT            Print the real error messgae
[2406] CE5B BC,44,56 GCE5B  ST   @FAC12,@PRGFLG    Restore program/imperative fl
[2407] CE5E BD,5C,2C        DST  @PGMPTR,@ARG      Get the place of error for FN
[2408] CE61 06,CF,73        CALL FNDLNE            Find the line that the error
[2409]               *                              is in
[2410] CE64 BF,A2,E4        DST  >A9AE,V@NLNADD+2  Say 'in' xx
       CE67 A9,AE
[2411] CE69 BF,20,02        DST  NLNADD+5,@VARW    Start place of line number
       CE6C E7
[2412] CE6D 06,6F,BA        CALL DISO              Put out the line number
[2413] CE70 0F,83           XML  SCROLL
[2414] CE72 BD,5C,B0 TRAC09 DST  V*FAC8,@ARG       Save PGMPTR from the entry
       CE75 52
[2415] CE76 A7,52,00 TRAC10 DSUB 8,@FAC8           Go on to next entry
       CE79 08
[2416] CE7A C5,52,24        DCH  @STVSPT,@FAC8     If not end of stack
[2417] CE7D 4E,E2           BR   GCEE2
[2418] CE7F D6,E0,02        CEQ  >68,V@2(@FAC8)    If function entry
       CE82 52,68
[2419] CE84 4E,C8           BR   GCEC8
[2420] CE86 D5,B0,52        DCEQ @ARG,V*FAC8       If recursive
       CE89 5C
[2421] CE8A 4E,B3           BR   GCEB3
[2422] CE8C 31,00,0F        MOVE 15,G@MSGCIS,V@NLNADD+2
       CE8F A2,E4,63
       CE92 0A
[2423] CE93 0F,83           XML  SCROLL            * CALLS ITSELF
[2424] CE95 A7,52,00 TRAC12 DSUB 8,@FAC8           Goto next entry on stack
       CE98 08
[2425] CE99 D6,E0,02 GCE99  CEQ  >68,V@2(@FAC8)    While functions
       CE9C 52,68
[2426] CE9E 4E,AC           BR   GCEAC
[2427] CEA0 D5,B0,52        DCEQ @ARG,V*FAC8
       CEA3 5C
[2428] CEA4 4E,72           BR   TRAC09
[2429] CEA6 A7,52,00        DSUB 8,@FAC8           Goto next entry on stack
       CEA9 08
[2430] CEAA 4E,99           BR   GCE99
[2431] CEAC CE,E0,02 GCEAC  CGT  >65,V@2(@FAC8)    If string is numeric
       CEAF 52,65
[2432] CEB1 4E,95           BR   TRAC12
[2433] CEB3 31,00,0B GCEB3  MOVE 11,G@MSGCF,V@NLNADD+2
       CEB6 A2,E4,63
       CEB9 19
[2434] CEBA 06,CF,73        CALL FNDLNE            Find the line

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0044 
RXB 2024
[2435] CEBD BF,20,02        DST  NLNADD+14,@VARW   Place to display it
       CEC0 F0
[2436] CEC1 06,6F,BA        CALL DISO              Display the line number
[2437] CEC4 0F,83           XML  SCROLL            * CALLED FROM
[2438] CEC6 4E,72           BR   TRAC09            Go on
[2439]               * Jump always
[2440] CEC8 CA,E0,02 GCEC8  CHE  >66,V@2(@FAC8)    If not permanent
       CECB 52,66
[2441] CECD 4E,76           BR   TRAC10
[2442] CECF C7,52,09 GCECF  DCH  VRAMVS,@FAC8      While still not at bottom
       CED2 58
[2443] CED3 4E,E2           BR   GCEE2
[2444] CED5 D6,E0,02        CEQ  >6A,V@2(@FAC8)    If subprogram
       CED8 52,6A
[2445] CEDA 6F,09           BS   TRAC51
[2446] CEDC A7,52,00        DSUB 8,@FAC8           Go down an entry
       CEDF 08
[2447] CEE0 4E,CF           BR   GCECF
[2448] CEE2 8E,44    GCEE2  CZ   @PRGFLG           If not imperative
[2449] CEE4 6E,F6           BS   GCEF6
[2450] CEE6 31,00,0B        MOVE 11,G@MSGCF,V@NLNADD+2
       CEE9 A2,E4,63
       CEEC 19
[2451] CEED BF,20,02        DST  NLNADD+14,@VARW   Place to display line #
       CEF0 F0
[2452] CEF1 06,A0,0A        CALL ASC               Display it
[2453] CEF4 0F,83           XML  SCROLL
[2454] CEF6 4F,65    GCEF6  BR   RTNSET            Return with condition set
[2455]               * Trace back subprogram calls
[2456] CEF8 D6,57,01 TRAC50 CEQ  1,@FAC13          If warning message only
[2457] CEFB 4F,02           BR   GCF02
[2458] CEFD 06,6E,1B        CALL ERPNT5            Don't restore char set
[2459] CF00 4F,05           BR   GCF05
[2460] CF02 06,6E,0E GCF02  CALL ERPRNT            Print the real message
[2461] CF05 8E,44    GCF05  CZ   @PRGFLG
[2462] CF07 6F,65           BS   RTNSET
[2463] CF09 8E,44    TRAC51 CZ   @PRGFLG
[2464] CF0B 6F,68           BS   RETNOS
[2465] CF0D BF,A2,E4        DST  >A9AE,V@NLNADD+2  Display 'IN'
       CF10 A9,AE
[2466] CF12 BF,56,02        DST  NLNADD+6,@FAC12   Display location of name
       CF15 E8
[2467] CF16 BD,5A,B0 TRAC55 DST  V*FAC8,@FAC16     Get S.T. pointer
       CF19 52
[2468] CF1A 86,54           CLR  @FAC10            Need a double length
[2469] CF1C BC,55,E0        ST   V@1(@FAC16),@FAC10+1 Get the name length
       CF1F 01,5A
[2470] CF21 BD,5A,E0        DST  V@4(@FAC16),@FAC16   Get the name pointer
       CF24 04,5A
[2471] CF26 34,54,B0        MOVE @FAC10,V*FAC16,V*FAC12   Display
       CF29 56,B0,5A
[2472] CF2C A2,B0,56 GCF2C  ADD  OFFSET,V*FAC12
       CF2F 60
[2473] CF30 91,56           DINC @FAC12
[2474] CF32 93,54           DDEC @FAC10
[2475] CF34 8F,54           DCZ  @FAC10
[2476] CF36 4F,2C           BR   GCF2C
[2477] CF38 0F,83           XML  SCROLL            Scroll the screen 'CALLED FRO
[2478] CF3A 31,00,0B        MOVE 11,G@MSGCF,V@NLNADD+2
       CF3D A2,E4,63
       CF40 19
[2479] CF41 BD,54,52        DST  @FAC8,@FAC10      In case at top level
[2480] CF44 BD,52,E0        DST  V@6(@FAC8),@FAC8  Get LSUBP off stack
       CF47 06,52

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0045 
RXB 2024
[2481] CF49 8F,52           DCZ  @FAC8             If not top level call
[2482] CF4B 6F,53           BS   GCF53
[2483] CF4D BF,56,02        DST  NLNADD+15,@FAC12  Display location of name
       CF50 F1
[2484] CF51 4F,16           BR   TRAC55
[2485]               * Now find original number
[2486] CF53 BD,5E,EF GCF53  DST  V@-6(@FAC10),@ARG2 Get pointer to line number
       CF56 FF,FA,54
[2487] CF59 06,CF,69        CALL GETLN2            Get the actual line number
[2488] CF5C BF,20,02        DST  NLNADD+15,@VARW   Place to put line number
       CF5F F1
[2489] CF60 06,6F,BA        CALL DISO              Display the line number
[2490] CF63 0F,83           XML  SCROLL            Scroll the mess up
[2491]               * RETURN WITH CONDITION BIT SET
[2492] CF65 D4,00,00 RTNSET CEQ  @>8300,@>8300     SET CONDITION BIT
[2493] CF68 01       RETNOS RTNC
[2494] CF69 97,5E    GETLN2 DDECT @ARG2
[2495] CF6B 06,80,2C        CALL GRSUB2            Read 2 bytes of data from ERA
[2496] CF6E 5E              BYTE >5E             * (use GREAD1) or VDP   (>5E=AR
[2497] CF6F BD,5E,58        DST  @EEE1,@ARG2       Put the result into @ARG2
[2498] CF72 00              RTN
[2499]               * Given a specific PGMPTR (in ARG) find the line number of
[2500]               * the line it points into and put the actual line number
[2501]               * in ARG2
[2502] CF73 BD,60,30 FNDLNE DST  @STLN,@ARG4       Get pointer into # buffer
[2503] CF76 95,60           DINCT @ARG4            Point at the line pointer
[2504] CF78 BD,5E,60        DST  @ARG4,@ARG2       Get line pointer
[2505] CF7B 87,62           DCLR @ARG6             Start with a zero value
[2506] CF7D C9,60,32 GCF7D  DCHE @ENLN,@ARG4       While in line buffer
[2507] CF80 6F,9C           BS   GCF9C
[2508] CF82 06,80,2C        CALL GRSUB2            Get the line # from ERAM/VDP
[2509] CF85 60              BYTE >60             * @ARG4: Source address on ERAM
[2510] CF86 CD,58,5C        DCGT @ARG,@EEE1
[2511] CF89 6F,96           BS   GCF96
[2512] CF8B C5,58,62        DCH  @ARG6,@EEE1       If closer
[2513] CF8E 4F,96           BR   GCF96
[2514] CF90 BD,5E,60        DST  @ARG4,@ARG2       Make it the one
[2515] CF93 BD,62,58        DST  @EEE1,@ARG6
[2516] CF96 A3,60,00 GCF96  DADD 4,@ARG4           Goto next line in buffer
       CF99 04
[2517] CF9A 4F,7D           BR   GCF7D
[2518] CF9C 06,CF,69 GCF9C  CALL GETLN2            Get the line number
[2519] CF9F B2,5E,7F        AND  >7F,@ARG2         Reset the breakpoint if any
[2520] CFA2 00              RTN
[2521]               ***********************************************************
[2522] CFA3 8E,A3,BB USERFG CZ   V@CONFLG         USER FLAG set?
[2523] CFA6 6F,B1           BS   NOUSR            Yes, skip ahead
[2524] CFA8 D7,A8,C2        DCEQ >0900,V@>08C2    USER PAB there?
       CFAB 09,00
[2525] CFAD 70,F3           BS   GD0F3            Yes, flag set
[2526] CFAF 50,CC           BR   SAVLN5
[2527] CFB1 34,4A,A8 NOUSR  MOVE @FAC,V*VARW,V@RECBUF Save line
       CFB4 C0,B0,20
[2528] CFB7 50,CC           BR   SAVLN5           Continue   
[2529]               ***********************************************************
[2530]               *
[2531]               * EDTZZ0 EQU >D000
[2532]              
[2533]                      AORG >1000
[2534]               ***********************************************************
[2535]               * EDIT routine - display requested line and edit any change
[2536]               *                in the program segment.
[2537]               *
[2538]               * FAC contains the line number just read in

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0046 
RXB 2024
[2539] D000 D5,30,32 EDTZZ0 DCEQ @ENLN,@STLN       If no program
[2540] D003 50,08           BR   GD008
[2541] D005 05,64,EF        B    ILLST
[2542] D008 0F,7E    GD008  XML  SPEED
[2543] D00A 03              BYTE SEETWO          * Try to find the line (# in FA
[2544] D00B 50,AC           BR   EDTZ08            * LINE NOT FOUND
[2545] D00D BE,06,1D EDTZ00 ST   29,@CCPPTR        Force new record on first lin
[2546]               * The entry in the line number table is in EXTRAM
[2547] D010 BE,17,60        ST   OFFSET,@DSRFLG    Set screen output mode
[2548] D013 BE,07,1C        ST   28,@RECLEN        Select standard record length
[2549] D016 87,04           DCLR @PABPTR           I/O to the screen
[2550] D018 8E,80,84        CZ   @RAMTOP           If ERAM
[2551] D01B 70,20           BS   GD020
[2552] D01D 06,80,2A        CALL GRMLST            Prepare to list from ERAM
[2553] D020 06,6A,74 GD020  CALL LLIST             List the line
[2554]               * VARW contains the position of the first character followi
[2555]               *      the line number.
[2556] D023 C4,06,07        CH   @RECLEN,@CCPPTR   Exactly at end of line
[2557] D026 50,32           BR   GD032
[2558] D028 0F,83           XML  SCROLL            Scroll up one line
[2559] D02A A7,20,00        DSUB 32,@VARW          And correct both VARW
       D02D 20
[2560] D02E A7,08,00        DSUB 28,@CCPADR         and CCPADR
       D031 1C
[2561] D032 BD,5E,20 GD032  DST  @VARW,@ARG2       Set cursor at start position
[2562] D035 B2,5F,E0        AND  >E0,@ARG3         Back to beginning of line
[2563] D038 A3,5E,00        DADD 157,@ARG2         Compute theoretically highest
       D03B 9D
[2564] D03C BD,2A,08        DST  @CCPADR,@VARA     Use current high position
[2565]               *                              as high
[2566] D03F C9,5E,2A        DCHE @VARA,@ARG2       If > 4 then lines-correct
[2567] D042 70,48           BS   GD048
[2568] D044 BF,5E,03        DST  >031D,@ARG2       Allow for one more line
       D047 1D
[2569]               *----------------------------------------------------------
[2570]               * Fix "You cannot add characters to a line whose number is
[2571]               *      multiple of 256, if that line was reached ty typing
[2572]               *      either an up arrow or a down arrow from a previous
[2573]               *      line" bug, the following line is changed
[2574]               *      CALL READL1            Allow user to make change
[2575] D048 06,6A,8A GD048  CALL READL3            Allow user to make change
[2576]               *----------------------------------------------------------
[2577] D04B 06,D0,AF        CALL SAVLIN            Save the line for recall
[2578] D04E 8E,80,84        CZ   @RAMTOP           If ERAM exists
[2579] D051 70,56           BS   GD056
[2580] D053 BD,2E,58        DST  @FAC14,@EXTRAM     saves EXTRAM in FAC
[2581] D056 DA,45,01 GD056  CLOG 1,@FLAG           Autonumber
[2582] D059 50,79           BR   EDTZ01
[2583] D05B D6,75,0B        CEQ  UPARR,@RKEY       Ended in UP arrow
[2584] D05E 50,6B           BR   GD06B
[2585] D060 A3,2E,00        DADD 4,@EXTRAM         Point at next line to list
       D063 04
[2586] D064 C5,2E,32        DCH  @ENLN,@EXTRAM     Doesn't exist
[2587] D067 70,79           BS   EDTZ01
[2588] D069 50,7E           BR   EDTZ02
[2589] D06B D6,75,0A GD06B  CEQ  DWNARR,@RKEY      Want next program line
[2590] D06E 50,85           BR   GD085
[2591] D070 A7,2E,00        DSUB 4,@EXTRAM         Point at next line to list
       D073 04
[2592] D074 C9,2E,30        DCHE @STLN,@EXTRAM     Passed high program
[2593] D077 70,7E           BS   EDTZ02
[2594] D079 BE,75,0D EDTZ01 ST   CHRTN,@RKEY       Set no more editing
[2595] D07C 50,85           BR   GD085
[2596] D07E 06,80,2E EDTZ02 CALL GRSUB3            Read from  ERAM, use GREAD

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0047 
RXB 2024
[2597]               *                              or VDP, Reset possible
[2598]               *                              breakpoint too
[2599] D081 2E              BYTE >2E             * @EXTRAM: Source address on ER
[2600] D082 BD,62,58        DST  @EEE1,@ARG6       Save for general use
[2601] D085 8E,60    GD085  CZ   @ARG4             If current, the line was chan
[2602] D087 50,A1           BR   GD0A1
[2603] D089 BF,0A,08        DST  CRNBUF,@RAMPTR    Initialize crunch pointer
       D08C 20
[2604] D08D 0F,7F           XML  CRUNCH            Crunch the input line
[2605] D08F 00              BYTE 0               * Normal crunch mode
[2606] D090 8F,22           DCZ  @ERRCOD           If error
[2607] D092 70,97           BS   GD097
[2608] D094 05,64,33        B    TOPL42
[2609]               *----------------------------------------------------------
[2610]               * Fix "Illegal line number 0 can be created by editting a
[2611]               *      line" bug, 5/23/81
[2612]               *  Add the following line, and the label TOPL55 at line
[2613]               *   (TOPL45+9)
[2614] D097 8F,4A    GD097  DCZ  @FAC              If line number has
[2615] D099 50,9E           BR   GD09E              been deleted - treated as
[2616] D09B 05,64,62        B    TOPL55              imperative state
[2617]               *----------------------------------------------------------
[2618] D09E 06,66,CF GD09E  CALL EDITLN            And edit into program buffer
[2619] D0A1 BD,4A,62 GD0A1  DST  @ARG6,@FAC        Line number for next line
[2620] D0A4 D6,75,0D        CEQ  CHRTN,@RKEY       Stop on carriage return
[2621] D0A7 50,08           BR   GD008
[2622] D0A9 05,63,DD        B    TOPL15            Don't kill the symbol table
[2623]               * JUMP ALWAYS
[2624] 698C          G698C  EQU  >698C
[2625] D0AC 05,69,8C EDTZ08 B    G698C             LINE NOT FOUND
[2626]               * Save input line for edit recall
[2627] D0AF B2,21,E0 SAVLIN AND  >E0,@VARW+1       Correct in case autonumber
[2628] D0B2 94,21           INCT @VARW+1           Skip edge characters
[2629] D0B4 BD,4A,2A        DST  @VARA,@FAC        Get pointer to end of line
[2630] D0B7 A5,4A,20        DSUB @VARW,@FAC        Compute length of line
[2631] D0BA 70,CC           BS   SAVLN5            If zero, length line
[2632] D0BC C7,4A,00        DCH  160,@FAC          If line longer then buffer
       D0BF A0
[2633] D0C0 50,C6           BR   GD0C6
[2634] D0C2 BF,4A,00        DST  160,@FAC          Default to max buffer size
       D0C5 A0
[2635]               * RXB PATCH CODE FIX USER / REDO KEY **********************
[2636]               * GD0C6  MOVE @FAC,V*VARW,V@RECBUF  Save line
[2637] D0C6 05,CF,A3 GD0C6  B    USERFG            Check for USER FLAG
[2638]               ***********************************************************
[2639]               * 
[2640]              
[2641]                      AORG >10CC 
[2642] D0CC BD,A3,8C SAVLN5 DST  @VARW,V@BUFSRT    Save pointer to line start
       D0CF 20
[2643] D0D0 BD,A3,8E        DST  @VARA,V@BUFEND    Save pointer to line end
       D0D3 2A
[2644] D0D4 CB,A3,8C GD0D4  DCHE >0262,V@BUFSRT    If try more than 160
       D0D7 02,62
[2645] D0D9 70,E7           BS   GD0E7
[2646]               *----------------------------------------------------------
[2647]               * Fix bug "Delete characters while in REDO mode, next REDO
[2648]               *          still may show those deleted characters, 5/26/81
[2649]               *   Replace following line
[2650]               *      DST  >02FE,V@BUFEND    Update pointer to line end
[2651] D0DB A3,A3,8E        DADD 32,V@BUFEND       Shift the whole buffer 32
       D0DE 00,20
[2652]               *                              down at a time
[2653]               *----------------------------------------------------------

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0048 
RXB 2024
[2654] D0E0 A3,A3,8C        DADD 32,V@BUFSRT       Update pointer for 160 chars
       D0E3 00,20
[2655] D0E5 50,D4           BR   GD0D4
[2656]               *----------------------------------------------------------
[2657]               * Also add following 3 lines for the bug above
[2658] D0E7 C7,A3,8E GD0E7  DCH  >02FE,V@BUFEND    Update pointer to line end
       D0EA 02,FE
[2659] D0EC 50,F3           BR   GD0F3
[2660] D0EE BF,A3,8E        DST  >02FE,V@BUFEND
       D0F1 02,FE
[2661]               *----------------------------------------------------------
[2662] D0F3 00       GD0F3  RTN
[2663]               ***********************************************************
[2664]              
[2665]                      AORG >10F4 
[2666]               ***********************************************************
[2667]               * AMS BRANCH TABLE FOR AMS ROUTINES  *    FIXED           *
[2668] D0F4 49,88           BR   MAPAMS                   *     AT             *
[2669] D0F6 49,6D           BR   PASAMS                   *    >D0F4           *
[2670] D0F8 49,7F           BR   OFFAMS                   *  PERMANENTLY       *
[2671] D0FA 49,76           BR   ONAMS                    *   ADD TO THE       *
[2672] D0FC 4A,7C           BR   SISRON                   *    TABLE IF        *
[2673] D0FE 4A,A1           BR   SISROF                   *    NEEDED.         *
[2674]               ***********************************************************
[2675] D100 B6,80,C2 RUNRXB OR   >10,@GKFLAG       QUIT KEY
       D103 10
[2676] D104 B2,45,F7        AND  >F7,@FLAG         Set flag
[2677] D107 BD,02,7E        DST  @YPT,@STPT        Save Row/Col values
[2678] D10A 07,80           ALL  >80
[2679] D10C D7,AF,22        DCEQ >994A,V@>2254
       D10F 54,99,4A
[2680] D112 72,70           BS   RUNXB
[2681] D114 D6,A3,71        CEQ  '1',V@LODFLG
       D117 31
[2682] D118 71,32           BS   SCNKEY
[2683] D11A 8E,A3,71        CZ   V@LODFLG
[2684] D11D 71,32           BS   SCNKEY
[2685] D11F D6,A3,71        CEQ  >3A,V@LODFLG
       D122 3A
[2686] D123 79,D6           BS   RXBRUN
[2687] D125 03              SCAN
[2688] D126 D6,75,FF        CEQ  >FF,@RKEY
[2689] D129 52,61           BR   LDKEY
[2690] D12B BC,A8,24        ST   V@LODFLG,V@>0824
       D12E A3,71
[2691] D130 52,68           BR   SRCHLP
[2692]               * RXB SCREEN
[2693] D132 08       SCNKEY FMT
[2694] D133 FC,60           SCRO >60
[2695] D135 FE,00           ROW  0
[2696] D137 FF,08           COL  8
[2697] D139 0D,56,45        HTEX 'VERSION = 2024'              
       D13C 52,53,49
       D13F 4F,4E,20
       D142 3D,20,32
       D145 30,32,34
[2698] D148 FE,02           ROW  2                  
[2699] D14A FF,0B           COL  11
[2700] D14C 06,52,20        HTEX 'R  X  B'                  
       D14F 20,58,20
       D152 20,42
[2701] D154 FE,04           ROW  4                
[2702] D156 FF,0B           COL  11                                      
[2703] D158 06,63,72        HTEX 'creator'

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0049 
RXB 2024
       D15B 65,61,74
       D15E 6F,72
[2704] D160 FE,06           ROW  6
[2705] D162 FF,08           COL  8
[2706] D164 0E,52,49        HTEX 'RICH GILBERTSON'
       D167 43,48,20
       D16A 47,49,4C
       D16D 42,45,52
       D170 54,53,4F
       D173 4E
[2707] D174 FE,0D           ROW  13
[2708] D176 FF,00           COL  0
[2709] D178 1F,3E,3E        HTEX '>> press ============= result <<'
       D17B 20,70,72
       D17E 65,73,73
       D181 20,3D,3D
       D184 3D,3D,3D
       D187 3D,3D,3D
       D18A 3D,3D,3D
       D18D 3D,3D,20
       D190 72,65,73
       D193 75,6C,74
       D196 20,3C,3C
[2710] D199 FE,0F           ROW  15
[2711] D19B FF,02           COL  2
[2712] D19D 15,41,4E        HTEX 'ANY KEY    = DSK#.LOAD'
       D1A0 59,20,4B
       D1A3 45,59,20
       D1A6 20,20,20
       D1A9 3D,20,44
       D1AC 53,4B,23
       D1AF 2E,4C,4F
       D1B2 41,44
[2713] D1B4 FE,11           ROW  17
[2714] D1B6 FF,02           COL  2
[2715] D1B8 16,45,4E        HTEX 'ENTER      = DSK#.UTIL1'
       D1BB 54,45,52
       D1BE 20,20,20
       D1C1 20,20,20
       D1C4 3D,20,44
       D1C7 53,4B,23
       D1CA 2E,55,54
       D1CD 49,4C,31
[2716] D1D0 FE,13           ROW  19
[2717] D1D2 FF,02           COL  2
[2718] D1D4 16,28,43        HTEX '(COMMA) ,  = DSK#.BATCH'
       D1D7 4F,4D,4D
       D1DA 41,29,20
       D1DD 2C,20,20
       D1E0 3D,20,44
       D1E3 53,4B,23
       D1E6 2E,42,41
       D1E9 54,43,48
[2719] D1EC FE,15           ROW  21
[2720] D1EE FF,02           COL  2
[2721] D1F0 1C,53,50        HTEX 'SPACE BAR  = RXB COMMAND MODE'
       D1F3 41,43,45
       D1F6 20,42,41
       D1F9 52,20,20
       D1FC 3D,20,52
       D1FF 58,42,20
       D202 43,4F,4D
       D205 4D,41,4E
       D208 44,20,4D

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0050 
RXB 2024
       D20B 4F,44,45
[2722] D20E FE,17           ROW  23
[2723] D210 FF,02           COL  2
[2724] D212 1C,28,50        HTEX '(PERIOD) . = EDITOR ASSEMBLER'
       D215 45,52,49
       D218 4F,44,29
       D21B 20,2E,20
       D21E 3D,20,45
       D221 44,49,54
       D224 4F,52,20
       D227 41,53,53
       D22A 45,4D,42
       D22D 4C,45,52
[2725] D230 FB              FEND
[2726] D231 BF,58,10        DST  >1000,@FAC14      DELAY VALUE
       D234 00
[2727] D235 BF,7E,0F RSCAN  DST  >0F12,@YPT
       D238 12
[2728] D239 06,D3,31        CALL CBKEY
[2729] D23C 72,44           BS   RSCAN2
[2730] D23E 93,58           DDEC @FAC14
[2731] D240 72,68           BS   SRCHLP
[2732] D242 52,35           BR   RSCAN
[2733] D244 D6,75,0D RSCAN2 CEQ  >0D,@RKEY         ENTER?
[2734] D247 72,81           BS   UTIL1
[2735] D249 D6,75,2C        CEQ  >2C,@RKEY         COMMA?
[2736] D24C 72,DE           BS   BATCH
[2737] D24E D6,75,2E        CEQ  >2E,@RKEY         PERIOD?
[2738] D251 72,CA           BS   UTIL4
[2739] D253 D6,75,30        CEQ  >30,@RKEY         0? (ZERO)
[2740] D256 52,61           BR   LDKEY
[2741] D258 31,00,0B        MOVE 11,G@WSD,V@CRNBUF WSD1.LOAD
       D25B A8,20,D3
       D25E 3F
[2742] D25F 90,75           INC  @RKEY             MAKE IT A 1
[2743] D261 86,A3,71 LDKEY  CLR  V@LODFLG
[2744] D264 BC,A8,24        ST   @RKEY,V@>0824
       D267 75
[2745] D268 07,80    SRCHLP ALL  >80               Clear Screen
[2746] D26A BD,7E,02        DST  @STPT,@YPT        Restore YPT/XPT
[2747] D26D 05,64,A0        B    SZRUNL
[2748]               * EA RUN XB PROGRAM OR SET SEARCH *************************
[2749] D270 35,00,32 RUNXB  MOVE 50,V@>2256,V@>0820
       D273 A8,20,AF
       D276 22,56
[2750] D278 86,A3,71        CLR  V@LODFLG
[2751] D27B 87,AF,22        DCLR V@>2254           Clear flag
       D27E 54
[2752] D27F 52,68           BR   SRCHLP
[2753]               ***********************************************************
[2754] D281 86,AF,22 UTIL1  CLR  V@>2256
       D284 56
[2755] D285 08              FMT
[2756] D286 FF,00           COL  0
[2757] D288 FE,0F           ROW  15
[2758] D28A 5F,20           HCHA 32,32
[2759] D28C FB              FEND
[2760] D28D 86,4A           CLR  @FAC
[2761] D28F BF,58,10        DST  >1000,@FAC14    DELAY VALUE
       D292 00
[2762] D293 BE,42,35        ST   >35,@CHAT
[2763] D296 BF,7E,11 UTIL2  DST  >1112,@YPT
       D299 12
[2764] D29A 06,D3,31        CALL CBKEY

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0051 
RXB 2024
[2765] D29D 72,A5           BS   UTIL3
[2766] D29F 93,58           DDEC @FAC14
[2767] D2A1 72,D7           BS   UTIL5
[2768] D2A3 52,96           BR   UTIL2
[2769] D2A5 D6,75,0D UTIL3  CEQ  >0D,@RKEY         ENTER?
[2770] D2A8 72,96           BS   UTIL2
[2771] D2AA D6,75,20        CEQ  >20,@RKEY         SPACE?
[2772] D2AD 72,61           BS   LDKEY
[2773] D2AF D6,75,2C        CEQ  >2C,@RKEY         COMMA?
[2774] D2B2 72,DE           BS   BATCH
[2775] D2B4 D6,75,2E        CEQ  >2E,@RKEY         PERIOD?
[2776] D2B7 72,DA           BS   UTIL6
[2777] D2B9 D6,75,30        CEQ  >30,@RKEY         0? (ZERO)
[2778] D2BC 52,CA           BR   UTIL4
[2779] D2BE 31,00,0C        MOVE 12,G@EAWSD,V@>2256
       D2C1 AF,22,56
       D2C4 D3,56
[2780] D2C6 90,75           INC  @RKEY
[2781] D2C8 52,D2           BR   EA0
[2782] D2CA 31,00,0C UTIL4  MOVE 12,G@EAU1,V@>2256
       D2CD AF,22,56
       D2D0 D3,4A
[2783] D2D2 BC,AF,22 EA0    ST   @RKEY,V@>225A
       D2D5 5A,75
[2784] D2D7 05,E0,25 UTIL5  B    GE025
[2785] D2DA 86,42    UTIL6  CLR  @CHAT
[2786] D2DC 52,D7           BR   UTIL5
[2787]               *********************************
[2788] D2DE 35,00,80 BATCH  MOVE 128,V@>01E0,V@>01E1
       D2E1 A1,E1,A1
       D2E4 E0
[2789] D2E5 BF,58,10        DST  >1000,@FAC14     LOAD DELAY
       D2E8 00
[2790] D2E9 86,4A           CLR  @FAC
[2791] D2EB BF,7E,13 BATCH1 DST  >1312,@YPT        ROW/COL
       D2EE 12
[2792] D2EF 06,D3,31        CALL CBKEY
[2793] D2F2 72,FA           BS   BATCH2
[2794] D2F4 93,58           DDEC @FAC14
[2795] D2F6 73,10           BS   BATCH3
[2796] D2F8 52,EB           BR   BATCH1
[2797] D2FA D6,75,0D BATCH2 CEQ  >0D,@RKEY         ENTER?
[2798] D2FD 71,32           BS   SCNKEY
[2799] D2FF D6,75,20        CEQ  >20,@RKEY         SPACE?
[2800] D302 71,32           BS   SCNKEY
[2801] D304 D6,75,2C        CEQ  >2C,@RKEY         COMMA?
[2802] D307 72,EB           BS   BATCH1
[2803] D309 D6,75,2E        CEQ  >2E,@RKEY         PERIOD?
[2804] D30C 71,32           BS   SCNKEY
[2805] D30E 53,13           BR   BATCH4
[2806] D310 BE,75,31 BATCH3 ST   >31,@RKEY         1 IN RKEY
[2807] D313 BE,A8,C0 BATCH4 ST   >20,V@RECBUF
       D316 20
[2808] D317 35,00,50        MOVE 80,V@RECBUF,V@RECBUF+1
       D31A A8,C1,A8
       D31D C0
[2809] D31E 31,00,14        MOVE 20,G@UBATCH,V@RECBUF
       D321 A8,C0,D3
       D324 62
[2810] D325 84,A3,BB        INV  V@CONFLG          SET USER FLAG >FF
[2811] D328 BC,A8,CD        ST   @RKEY,V@>08CD
       D32B 75
[2812] D32C 86,A3,71        CLR  V@LODFLG
[2813] D32F 5A,C2           BR   NEWSZ

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0052 
RXB 2024
[2814]               *********************************
[2815] D331 BC,80,C1 CBKEY  ST   @TIMER,@>83C1
       D334 79
[2816] D335 DA,59,01        CLOG >01,@FAC15
[2817] D338 53,3E           BR   CBKEY2
[2818] D33A C0,4A,7D        EX   @CB,@FAC
[2819] D33D 03              SCAN
[2820] D33E 01       CBKEY2 RTNC
[2821]               **************************************
[2822]               * RXB HARD DRIVE PATH
[2823] D33F 09       WSD    BYTE 9
[2824] D340 57,53,44        TEXT 'WSD1.LOAD'
       D343 31,2E,4C
       D346 4F,41,44
[2825] D349 00              BYTE 0
[2826]               * EDITOR ASSEMBLER
[2827] D34A 0A,44,53 EAU1   STRI 'DSK1.UTIL1'
       D34D 4B,31,2E
       D350 55,54,49
       D353 4C,31
[2828] D355 0D              BYTE >0D
[2829] D356 0A,57,53 EAWSD  STRI 'WSD1.UTIL1'
       D359 44,31,2E
       D35C 55,54,49
       D35F 4C,31
[2830] D361 0D              BYTE >0D
[2831]               * USER PAB & BATCH FILE
[2832] D362 00,14,09 UBATCH BYTE 0,>14,9,0,80,0,0,0,0
       D365 00,50,00
       D368 00,00,00
[2833] D36B 0A,44,53        STRI 'DSK1.BATCH'
       D36E 4B,31,2E
       D371 42,41,54
       D374 43,48
[2834]               * 
[2835]               ***********************************************************
[2836]               * CALL BEEP                                               *
[2837]               ***********************************************************
[2838] D376 D3,84    BEEP   DATA HONK
[2839] D378 04,42,45        STRI 'BEEP'            
       D37B 45,50
[2840] D37D D3,7F           DATA $+2
[2841] D37F 06,00,34        CALL ACCTON
[2842] D382 43,0C           BR   PEEK6
[2843]               ***********************************************************
[2844]               * CALL HONK                                               *
[2845]               ***********************************************************
[2846] D384 D4,34    HONK   DATA MODZ
[2847] D386 04,48,4F        STRI 'HONK'            
       D389 4E,4B
[2848] D38B D3,8D           DATA $+2
[2849] D38D 06,00,36        CALL BADTON
[2850] D390 43,0C           BR   PEEK6
[2851]               *********************************************************
[2852]               * CALL PSAVE(boundry,pathstring)                        *
[2853]               *********************************************************
[2854] D392 D3,BA    PSAVE  DATA PLOAD
[2855] D394 05,50,53        STRI 'PSAVE'           
       D397 41,56,45
[2856] D39A D3,9C           DATA $+2
[2857] D39C 06,BF,E0        CALL COMB          * ( ?
[2858] D39F 06,D3,F6 BSAVEL CALL MYSAL         * Get pathname
[2859] D3A2 BE,B0,00        ST   >06,V*PAD     * LOAD opcode
       D3A5 06

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0053 
RXB 2024
[2860] D3A6 35,10,00        MOVE >1000,@0(@TEMP),V@>40(@PAD) * COPY IT TO VDP
       D3A9 E0,40,00
       D3AC CF,7D,00
       D3AF 16
[2861] D3B0 06,D3,E2        CALL MYDOIT        * DSRLNK opcode
[2862] D3B3 D6,42,B3        CEQ  COMMAZ,@CHAT  * COMMA?
[2863] D3B6 73,9F           BS   BSAVEL        * Yes loop
[2864] D3B8 43,05           BR   PEEK5         * Done
[2865]               **********************************************************
[2866]               * CALL PLOAD(boundry,pathstring)                         *
[2867]               **********************************************************
[2868] D3BA CA,63    PLOAD  DATA ISRON
[2869] D3BC 05,50,4C        STRI 'PLOAD'           
       D3BF 4F,41,44
[2870] D3C2 D3,C4           DATA $+2
[2871] D3C4 06,BF,E0        CALL COMB          * ( ?
[2872] D3C7 06,D3,F6 BLOADL CALL MYSAL         * Get pathname
[2873] D3CA BE,B0,00        ST   >05,V*PAD     * LOAD opcode
       D3CD 05
[2874] D3CE 06,D3,E2        CALL MYDOIT        * DSRLNK opcode
[2875] D3D1 35,10,00        MOVE >1000,V@>40(@PAD),@0(@TEMP) * COPY IT TO RAM
       D3D4 CF,7D,00
       D3D7 16,E0,40
       D3DA 00
[2876] D3DB D6,42,B3        CEQ  COMMAZ,@CHAT  * COMMA?
[2877] D3DE 73,C7           BS   BLOADL        * Yes loop
[2878] D3E0 43,05           BR   PEEK5         * Done
[2879] D3E2 BD,56,00 MYDOIT DST  @PAD,@FAC12   * Get buffer address in VDP
[2880] D3E5 A2,57,09        ADD  9,@FAC13      * Point to name length
[2881] D3E8 06,00,10        CALL LINK          * DSRLNK
[2882] D3EB 08              BYTE >08
[2883] D3EC 65,43           BS   ERRFE         * File Error
[2884] D3EE DA,E0,01        CLOG >E0,V@1(@PAD) * Set error bits
       D3F1 00,E0
[2885] D3F3 45,43           BR   ERRFE
[2886] D3F5 00              RTN
[2887] D3F6 0F,79    MYSAL  XML  PGMCHR        * Skip ( OR COMMA 
[2888] D3F8 06,C9,D5        CALL SAMS4A        * TEMP will have address 
[2889] D3FB 0F,70           XML  COMPCT        * Garbage collection VDP
[2890] D3FD CB,1A,1C        DCHE >1C81,@STREND * Enough VDP space?
       D400 81
[2891] D401 44,E8           BR   ERRSO         * ERROR STACK OVERFLOW
[2892] D403 BF,00,0C        DST  >0C00,@PAD    * Buffer for BSAVE/BLOAD
       D406 00
[2893] D407 06,BF,E6        CALL STRGET        * Pathstring
[2894] D40A 86,B0,00        CLR  V*PAD         * 0 BYTE
[2895] D40D 35,10,80        MOVE >1080,V@0(@PAD),V@1(@PAD) * Ripple
       D410 E0,01,00
       D413 E0,00,00
[2896] D416 BD,5C,00        DST  @PAD,@ARG     * Get PAB address 
[2897] D419 A2,5D,40        ADD  >40,@ARG1     * Add in PAB buffer
[2898] D41C BD,E0,02        DST  @ARG,V@2(@PAD)  * Buffer address
       D41F 00,5C
[2899] D421 BF,E0,06        DST  >1000,V@6(@PAD) * Number of bytes
       D424 00,10,00
[2900] D427 BC,E0,09        ST   @FAC7,V@9(@PAD) * Length byte
       D42A 00,51
[2901] D42C 34,50,E0        MOVE @FAC6,V*FAC4,V@10(@PAD) * Pathstring
       D42F 0A,00,B0
       D432 4E
[2902] D433 00              RTN   
[2903]               ***********************************************************
[2904]               * CALL MOD(number,divisor,quotiant,remanider[,...])       *
[2905]               *   M=N-INT(N/D)*D                                        *

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0054 
RXB 2024
[2906]               ***********************************************************
[2907] D434 D4,81    MODZ   DATA SBIAS
[2908] D436 03,4D,4F        STRI 'MOD'
       D439 44
[2909] D43A D4,3C           DATA $+2
[2910] D43C 06,BF,E0        CALL COMB
[2911] D43F 06,BF,F6 MODAGN CALL SUBLP3           Get NUMBER 
[2912] D442 8F,4A           DCZ  @FAC             0?
[2913] D444 65,30           BS   ERRBV            ERROR BAD VALUE
[2914] D446 86,00           CLR  @PAD             Clear PAD
[2915] D448 35,00,08        MOVE 8,@PAD,@PAD1     Ripple 8 bytes
       D44B 01,00
[2916] D44D BD,02,4A        DST  @FAC,@PAD2        Save NUMBER
[2917] D450 06,BF,F6        CALL SUBLP3           Get DIVISOR
[2918] D453 8F,4A           DCZ  @FAC             0?
[2919] D455 65,30           BS   ERRBV            ERROR BAD VALUE
[2920] D457 BD,06,4A        DST  @FAC,@PAD6       Save DIVISOR
[2921] D45A 0F,79           XML  PGMCHR           Skip COMMA
[2922] D45C AD,00,06        DDIV @PAD6,@PAD       NUMBER/DIVISOR
[2923] D45F 06,BF,F0        CALL SNDER            Get variable info
[2924] D462 06,BF,FA        CALL CLRFAC           Clear for FP
[2925] D465 BD,4A,00        DST  @PAD,@FAC        Get QUOTIENT
[2926] D468 06,BF,F2        CALL CIFSND           Send QUOTIENT
[2927] D46B 0F,79           XML  PGMCHR           Skip COMMA
[2928] D46D 06,BF,F0        CALL SNDER            Get variable info 
[2929] D470 06,BF,FA        CALL CLRFAC           Clear for FP       
[2930] D473 BD,4A,02        DST  @PAD2,@FAC       REMAINDER
[2931] D476 06,BF,F2        CALL CIFSND           Send REMAINDER 
[2932] D479 D6,42,B3        CEQ  COMMAZ,@CHAT     ,?
[2933] D47C 74,3F           BS   MODAGN           Yes 
[2934] D47E 05,A0,1C ENDMOD B    LNKRTN           Done return
[2935]               *********************************************************
[2936]               * CALL BIAS(numeric-variable,string-variable)           *
[2937]               *********************************************************
[2938] D481 D4,BE    SBIAS  DATA SRIGHT
[2939] D483 04,42,49        STRI 'BIAS'            BIAS
       D486 41,53
[2940] D488 D4,8A           DATA $+2
[2941] D48A 06,BF,E0        CALL COMB              (
[2942] D48D 06,BF,FC BIASAG CALL GETNUM            Get number 
[2943] D490 BD,00,4A        DST  @FAC,@PAD         Save number
[2944] D493 06,BF,E6        CALL STRGET            Get string
[2945] D496 BD,04,4E        DST  @FAC4,@PAD4       Save location
[2946] D499 BD,06,50        DST  @FAC6,@PAD6       Save length  
[2947] D49C BC,4B,B0 BIASLP ST   V*PAD4,@FAC1      * Character.
       D49F 04
[2948] D4A0 8F,00           DCZ  @PAD              0?
[2949] D4A2 74,A9           BS   BIASM             Yes.
[2950] D4A4 A2,4B,60        ADD  96,@FAC1          ADD OFFSET
[2951] D4A7 54,AC           BR   BIASSV
[2952] D4A9 A6,4B,60 BIASM  SUB  96,@FAC1          MINUS OFFSET
[2953] D4AC BC,B0,04 BIASSV ST   @FAC1,V*PAD4      Store it 
       D4AF 4B
[2954] D4B0 91,04           DINC @PAD4             Next one in string
[2955] D4B2 93,06           DDEC @PAD6             Counter-1
[2956] D4B4 54,9C           BR   BIASLP            Loop till zero
[2957] D4B6 D6,42,B3        CEQ  COMMAZ,@CHAT      ,?
[2958] D4B9 74,8D           BS   BIASAG            Yes 
[2959] D4BB 05,A0,1C RTNLNK B    LNKRTN            Done return
[2960]               *********************************************************
[2961]               * CALL SCROLLRIGHT                                      *
[2962]               * CALL SCROLLRIGHT(repetition,string)                   *
[2963]               * CALL SCROLLRIGHT(repetition,string,tab)               *
[2964]               *********************************************************

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0055 
RXB 2024
[2965] D4BE D5,59    SRIGHT DATA SLEFT
[2966] D4C0 0B,53,43        STRI 'SCROLLRIGHT'     SCROLLRIGHT
       D4C3 52,4F,4C
       D4C6 4C,52,49
       D4C9 47,48,54
[2967] D4CC D4,CE           DATA $+2
[2968] D4CE D6,42,B7        CEQ  LPARZ,@CHAT       (?
[2969] D4D1 74,EE           BS   SRAGN             Normal 
[2970] D4D3 BF,00,00        DST  1,@PAD            Defualt 1 line
       D4D6 01
[2971] D4D7 86,8F,DD        CLR  @>6004            Set ROM3 page
       D4DA 04
[2972] D4DB 0F,70           XML  RROLL             RIGHT ROLL ASSEMBLY
[2973] D4DD 87,02           DCLR @PAD2             Screen Address
[2974] D4DF BE,00,20        ST   32,@PAD           Space Character
[2975] D4E2 BF,4A,00        DST  24,@FAC           Repetition
       D4E5 18
[2976] D4E6 86,8F,DD        CLR  @>6004            Set ROM3 page
       D4E9 04
[2977] D4EA 0F,75           XML  VCHAR             Disply SPACE
[2978] D4EC 43,0C           BR   PEEK6             Done
[2979] D4EE 06,BF,F6 SRAGN  CALL SUBLP3            Skip comma,REPETITION
[2980] D4F1 8F,4A           DCZ  @FAC              0?
[2981] D4F3 65,30           BS   ERRBV             ERROR BAD VALUE
[2982] D4F5 BD,00,4A        DST  @FAC,@PAD         ROLL REPETITION 
[2983] D4F8 86,8F,DD SRLOOP CLR  @>6004            Set ROM3 page
       D4FB 04
[2984] D4FC 0F,70           XML  RROLL             RIGHT ROLL ASSEMBLY
[2985] D4FE BD,04,00        DST  @PAD,@PAD4        Save ROLL REPETITION
[2986] D501 87,02           DCLR @PAD2             Screen Address
[2987] D503 BE,00,20        ST   32,@PAD           Space character
[2988] D506 BF,4A,00        DST  24,@FAC           Repetition
       D509 18
[2989] D50A 86,8F,DD        CLR  @>6004            Set ROM3 page
       D50D 04
[2990] D50E 0F,75           XML  VCHAR             Disply them
[2991] D510 BD,00,04        DST  @PAD4,@PAD        Restore ROLL REPETITION
[2992] D513 93,00           DDEC @PAD              REPETITION-1
[2993] D515 54,F8           BR   SRLOOP            0? No loop
[2994] D517 D6,42,B6        CEQ  RPARZ,@CHAT       )?
[2995] D51A 74,BB           BS   RTNLNK            Done return
[2996] D51C 06,D7,27        CALL SSNCHK            Skip comma, $/# 
[2997] D51F 87,4A           DCLR @FAC              Clear SCREEN ADDRESS
[2998] D521 BD,04,4E        DST  @FAC4,@PAD4       Save $ Address
[2999] D524 BD,06,50        DST  @FAC6,@PAD6       Save $ Length
[3000] D527 D6,42,B6        CEQ  RPARZ,@CHAT       )?
[3001] D52A 75,48           BS   SRVAL             SHOW IT
[3002] D52C D6,42,B3        CEQ  COMMAZ,@CHAT      ,?
[3003] D52F 44,C1           BR   ERRSYN            SYNTAX ERROR
[3004] D531 06,BF,F6        CALL SUBLP3            Get TAB
[3005] D534 8F,4A           DCZ  @FAC              0?
[3006] D536 75,48           BS   SRVAL             0 can not be shifted
[3007] D538 CB,4A,00        DCHE 25,@FAC           25 or higher?
       D53B 19
[3008] D53C 65,30           BS   ERRBV             ERROR BAD VALUE
[3009] D53E 92,4B           DEC  @FAC1             Adjust for Assembly
[3010] D540 8E,4B           CZ   @FAC1             0? Avoid DSLL? 
[3011] D542 75,48           BS   SRVAL             Yes
[3012] D544 E3,4A,00        DSLL 5,@FAC            32*LENGTH
       D547 05
[3013] D548 BD,02,4A SRVAL  DST  @FAC,@PAD2        Screen Address
[3014] D54B BD,4E,04        DST  @PAD4,@FAC4       String Address
[3015] D54E BD,50,06        DST  @PAD6,@FAC6       Length
[3016] D551 86,8F,DD        CLR  @>6004            Set ROM3 page

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0056 
RXB 2024
       D554 04
[3017] D555 0F,78           XML  VPUT              Put String on screen
[3018] D557 54,BB           BR   RTNLNK            Done return
[3019]               *********************************************************
[3020]               * CALL SCROLLLEFT                                       *
[3021]               * CALL SCROLLLEFT(repetition,string)                    *
[3022]               * CALL SCROLLLEFT(repetition,string,tab)                *
[3023]               *********************************************************
[3024] D559 D5,F9    SLEFT  DATA SUP
[3025] D55B 0A,53,43        STRI 'SCROLLLEFT'      SCROLLLEFT
       D55E 52,4F,4C
       D561 4C,4C,45
       D564 46,54
[3026] D566 D5,68           DATA $+2
[3027] D568 D6,42,B7        CEQ  LPARZ,@CHAT       (?
[3028] D56B 75,8A           BS   SLAGN             Normal 
[3029] D56D BF,00,00        DST  1,@PAD            Defualt 1 line
       D570 01
[3030] D571 86,8F,DD        CLR  @>6004            Set ROM3 page
       D574 04
[3031] D575 0F,71           XML  LROLL             RIGHT ROLL ASSEMBLY
[3032] D577 BF,02,00        DST  31,@PAD2          Screen Address 
       D57A 1F
[3033] D57B BE,00,20        ST   32,@PAD           Space
[3034] D57E BF,4A,00        DST  24,@FAC           Repetition
       D581 18
[3035] D582 86,8F,DD        CLR  @>6004            Set ROM3 page
       D585 04
[3036] D586 0F,75           XML  VCHAR             Disply them
[3037] D588 43,0C           BR   PEEK6             Done
[3038] D58A 06,BF,F6 SLAGN  CALL SUBLP3            Skip comma,REPETITION
[3039] D58D 8F,4A           DCZ  @FAC              0?
[3040] D58F 65,30           BS   ERRBV             ERROR BAD VALUE
[3041] D591 BD,00,4A        DST  @FAC,@PAD         REPETITION 
[3042] D594 86,8F,DD SLLOOP CLR  @>6004            Set ROM3 page
       D597 04
[3043] D598 0F,71           XML  LROLL             RIGHT ROLL ASSEMBLY
[3044] D59A BD,04,00        DST  @PAD,@PAD4        Save ROLL REPETITION
[3045] D59D BF,02,00        DST  31,@PAD2          Screen Address 
       D5A0 1F
[3046] D5A1 BE,00,20        ST   32,@PAD           Space
[3047] D5A4 BF,4A,00        DST  24,@FAC           Repetition
       D5A7 18
[3048] D5A8 86,8F,DD        CLR  @>6004            Set ROM3 page
       D5AB 04
[3049] D5AC 0F,75           XML  VCHAR             Disply them
[3050] D5AE BD,00,04        DST  @PAD4,@PAD        Restore ROLL REPETITION
[3051] D5B1 93,00           DDEC @PAD              REPETITION-1
[3052] D5B3 55,94           BR   SLLOOP            0? No loop
[3053] D5B5 D6,42,B6        CEQ  RPARZ,@CHAT       )?
[3054] D5B8 74,BB           BS   RTNLNK            Done
[3055] D5BA 06,D7,27        CALL SSNCHK            Skip comma, $/# 
[3056] D5BD BF,4A,00        DST  31,@FAC           Top row
       D5C0 1F
[3057] D5C1 BD,04,4E        DST  @FAC4,@PAD4       Save $ Address
[3058] D5C4 BD,06,50        DST  @FAC6,@PAD6       Save $ Length
[3059] D5C7 D6,42,B6        CEQ  RPARZ,@CHAT       )?
[3060] D5CA 75,E8           BS   SLVAL2            SHOW IT
[3061] D5CC D6,42,B3        CEQ  COMMAZ,@CHAT      ,?
[3062] D5CF 44,C1           BR   ERRSYN            SYNTAX ERROR
[3063] D5D1 06,BF,F6        CALL SUBLP3            Get TAB
[3064] D5D4 8F,4A           DCZ  @FAC              0?
[3065] D5D6 75,48           BS   SRVAL             0 can not be shifted
[3066] D5D8 CB,4A,00        DCHE 25,@FAC           25 or higher?

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0057 
RXB 2024
       D5DB 19
[3067] D5DC 65,30           BS   ERRBV             ERROR BAD VALUE
[3068] D5DE 92,4B           DEC  @FAC1             Adjust for Assembly
[3069] D5E0 E3,4A,00        DSLL 5,@FAC            32*LENGTH
       D5E3 05
[3070] D5E4 A3,4A,00 SLVAL  DADD 31,@FAC           Right side of screen
       D5E7 1F
[3071] D5E8 BD,02,4A SLVAL2 DST  @FAC,@PAD2        Screen Address
[3072] D5EB BD,4E,04        DST  @PAD4,@FAC4       String Address
[3073] D5EE BD,50,06        DST  @PAD6,@FAC6       Length
[3074] D5F1 86,8F,DD        CLR  @>6004            Set ROM3 page
       D5F4 04
[3075] D5F5 0F,78           XML  VPUT              Put String on screen
[3076] D5F7 54,BB           BR   RTNLNK            Done return
[3077]               *********************************************************
[3078]               * CALL SCROLLUP                                         *
[3079]               * CALL SCROLLUP(repetition,string)                      *
[3080]               * CALL SCROLLUP(repetition,string,tab)                  *
[3081]               *********************************************************
[3082] D5F9 D6,91    SUP    DATA SDOWN
[3083] D5FB 08,53,43        STRI 'SCROLLUP'        SCROLLU
       D5FE 52,4F,4C
       D601 4C,55,50
[3084] D604 D6,06           DATA $+2
[3085] D606 D6,42,B7        CEQ  LPARZ,@CHAT       (?
[3086] D609 76,28           BS   SUAGN             Normal 
[3087] D60B BF,00,00        DST  1,@PAD            Defualt 1 line
       D60E 01
[3088] D60F 86,8F,DD        CLR  @>6004            Set ROM3 page
       D612 04
[3089] D613 0F,72           XML  UROLL             UP ROLL ASSEMBLY
[3090] D615 BF,02,02        DST  736,@PAD2         Screen Address 
       D618 E0
[3091] D619 BE,00,20        ST   32,@PAD           Space
[3092] D61C BF,4A,00        DST  32,@FAC           Repetition
       D61F 20
[3093] D620 86,8F,DD        CLR  @>6004            Set ROM3 page
       D623 04
[3094] D624 0F,74           XML  HCHAR             Disply them
[3095] D626 43,0C           BR   PEEK6             Done
[3096] D628 06,BF,F6 SUAGN  CALL SUBLP3            Skip comma,REPETITION
[3097] D62B 8F,4A           DCZ  @FAC              0?
[3098] D62D 65,30           BS   ERRBV             ERROR BAD VALUE  
[3099] D62F BD,00,4A        DST  @FAC,@PAD         REPETITION  
[3100] D632 86,8F,DD SULOOP CLR  @>6004            Set ROM3 page
       D635 04
[3101] D636 0F,72           XML  UROLL             UP ROLL ASSEMBLY
[3102] D638 BD,04,00        DST  @PAD,@PAD4        Save ROLL REPETITION
[3103] D63B BF,02,02        DST  736,@PAD2         Screen Address 
       D63E E0
[3104] D63F BE,00,20        ST   32,@PAD           Space
[3105] D642 BF,4A,00        DST  32,@FAC           Repetition
       D645 20
[3106] D646 86,8F,DD        CLR  @>6004            Set ROM3 page
       D649 04
[3107] D64A 0F,74           XML  HCHAR             Disply them
[3108] D64C BD,00,04        DST  @PAD4,@PAD        Restore ROLL REPETITION
[3109] D64F 93,00           DDEC @PAD              REPETITION-1
[3110] D651 56,32           BR   SULOOP            0? No loop
[3111] D653 D6,42,B6        CEQ  RPARZ,@CHAT       )?
[3112] D656 74,BB           BS   RTNLNK            Done
[3113] D658 06,D7,27        CALL SSNCHK            Skip comma, $/#  
[3114] D65B 87,4A           DCLR @FAC              Clear SCREEN ADDRESS
[3115] D65D BD,04,4E        DST  @FAC4,@PAD4       Save $ Address

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0058 
RXB 2024
[3116] D660 BD,06,50        DST  @FAC6,@PAD6       Save $ Length
[3117] D663 D6,42,B6        CEQ  RPARZ,@CHAT       )?
[3118] D666 76,80           BS   SUVAL             SHOW IT
[3119] D668 D6,42,B3        CEQ  COMMAZ,@CHAT      ,?
[3120] D66B 44,C1           BR   ERRSYN            SYNTAX ERROR
[3121] D66D 06,BF,F6        CALL SUBLP3            Get TAB
[3122] D670 8F,4A           DCZ  @FAC              0?
[3123] D672 76,80           BS   SUVAL             0 can not be shifted
[3124] D674 CB,4A,00        DCHE 33,@FAC           32 or higher?
       D677 21
[3125] D678 65,30           BS   ERRBV             ERROR BAD VALUE
[3126] D67A 92,4B           DEC  @FAC1             Adjust for Assembly
[3127] D67C BF,02,02        DST  736,@PAD2         ROW 24       
       D67F E0
[3128] D680 A1,02,4A SUVAL  DADD @FAC,@PAD2        Screen Address+TAB
[3129] D683 BD,4E,04        DST  @PAD4,@FAC4       String Address
[3130] D686 BD,50,06        DST  @PAD6,@FAC6       Length
[3131] D689 86,8F,DD        CLR  @>6004            Set ROM3 page
       D68C 04
[3132] D68D 0F,77           XML  HPUT              Put String on screen
[3133] D68F 54,BB           BR   RTNLNK            Done return
[3134]               *********************************************************
[3135]               * CALL SCROLLDOWN                                       *
[3136]               * CALL SCROLLDOWN(repetion,string)                      *
[3137]               * CALL SCROLLDOWN(repetition,string,tab)                *
[3138]               *********************************************************
[3139] D691 D7,51    SDOWN  DATA ROLLR
[3140] D693 0A,53,43        STRI 'SCROLLDOWN'      SCROLLD
       D696 52,4F,4C
       D699 4C,44,4F
       D69C 57,4E
[3141] D69E D6,A0           DATA $+2
[3142] D6A0 D6,42,B7        CEQ  LPARZ,@CHAT       (?
[3143] D6A3 76,C0           BS   SDAGN             Normal 
[3144] D6A5 BF,00,00        DST  1,@PAD            Defualt 1 line
       D6A8 01
[3145] D6A9 86,8F,DD        CLR  @>6004            Set ROM3 page
       D6AC 04
[3146] D6AD 0F,73           XML  DROLL             RIGHT ROLL ASSEMBLY
[3147] D6AF 87,02           DCLR @PAD2             Screen Address 
[3148] D6B1 BE,00,20        ST   32,@PAD           Space
[3149] D6B4 BF,4A,00        DST  32,@FAC           Repetition
       D6B7 20
[3150] D6B8 86,8F,DD        CLR  @>6004            Set ROM3 page
       D6BB 04
[3151] D6BC 0F,74           XML  HCHAR             Disply them
[3152] D6BE 43,0C           BR   PEEK6             Done
[3153] D6C0 06,BF,F6 SDAGN  CALL SUBLP3            Skip comma,REPETITION
[3154] D6C3 8F,4A           DCZ  @FAC              0?
[3155] D6C5 65,30           BS   ERRBV             ERROR BAD VALUE
[3156] D6C7 BD,00,4A        DST  @FAC,@PAD         REPETITION  
[3157] D6CA 86,8F,DD SDLOOP CLR  @>6004            Set ROM3 page
       D6CD 04
[3158] D6CE 0F,73           XML  DROLL             RIGHT ROLL ASSEMBLY
[3159] D6D0 BD,04,00        DST  @PAD,@PAD4        Save ROLL REPETITION
[3160] D6D3 87,02           DCLR @PAD2             Screen Address 
[3161] D6D5 BE,00,20        ST   32,@PAD           Space
[3162] D6D8 BF,4A,00        DST  32,@FAC           Repetition
       D6DB 20
[3163] D6DC 86,8F,DD        CLR  @>6004            Set ROM3 page
       D6DF 04
[3164] D6E0 0F,74           XML  HCHAR             Disply them
[3165] D6E2 BD,00,04        DST  @PAD4,@PAD        Restore ROLL REPETITION
[3166] D6E5 93,00           DDEC @PAD              REPETITION-1

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0059 
RXB 2024
[3167] D6E7 56,CA           BR   SDLOOP            0? No loop
[3168] D6E9 D6,42,B6        CEQ  RPARZ,@CHAT       )?
[3169] D6EC 74,BB           BS   RTNLNK            Done
[3170] D6EE 06,D7,27        CALL SSNCHK            Skip comma, $/# 
[3171] D6F1 87,4A           DCLR @FAC              Clear SCREEN ADDRESS
[3172] D6F3 BD,04,4E        DST  @FAC4,@PAD4       Save $ Address
[3173] D6F6 BD,06,50        DST  @FAC6,@PAD6       Save $ Length
[3174] D6F9 D6,42,B6        CEQ  RPARZ,@CHAT       )?
[3175] D6FC 77,16           BS   SDVAL             SHOW IT
[3176] D6FE D6,42,B3        CEQ  COMMAZ,@CHAT      ,?
[3177] D701 44,C1           BR   ERRSYN            SYNTAX ERROR
[3178] D703 06,BF,F6        CALL SUBLP3            Get TAB
[3179] D706 8F,4A           DCZ  @FAC              0?
[3180] D708 77,16           BS   SDVAL             0 can not be shifted
[3181] D70A CB,4A,00        DCHE 33,@FAC           32 or higher?
       D70D 21
[3182] D70E 65,30           BS   ERRBV             ERROR BAD VALUE
[3183] D710 92,4B           DEC  @FAC1             Adjust for Assembly
[3184] D712 8E,4B           CZ   @FAC1             ROW 0?
[3185] D714 77,16           BS   SDVAL             0 can not be shifted
[3186]               * ROW 1 COL 1    
[3187] D716 BD,02,4A SDVAL  DST  @FAC,@PAD2        Screen Address
[3188] D719 BD,4E,04        DST  @PAD4,@FAC4       String Address
[3189] D71C BD,50,06        DST  @PAD6,@FAC6       Length   
[3190] D71F 86,8F,DD        CLR  @>6004            Set ROM3 page   
       D722 04
[3191] D723 0F,77           XML  HPUT              Put String on screen
[3192] D725 54,BB           BR   RTNLNK            Done return  
[3193]               *******************************
[3194] D727 06,BF,E2 SSNCHK CALL STRFCH            Skip COMMA get $ or # 
[3195] D72A D6,4C,65        CEQ  >65,@FAC2         $?
[3196] D72D 77,50           BS   SSNOUT            Yes
[3197] D72F 86,55           CLR  @FAC11            Select XB FLP
[3198] D731 0F,73           XML  XBCNS             Convert Number to String
[3199] D733 D6,90,55        CEQ  SPACE,*FAC11      Leading space?
       D736 20
[3200] D737 57,3D           BR   SSNGET
[3201] D739 90,55           INC  @FAC11            Supress space out
[3202] D73B 92,56           DEC  @FAC12            Shorten length
[3203] D73D 86,0C    SSNGET CLR  @BYTES
[3204] D73F BC,0D,56        ST   @FAC12,@BYTES+1        Length
[3205] D742 0F,71           XML  GETSTR                 Get string
[3206] D744 34,0C,B0        MOVE @BYTES,*FAC11,V*SREF   Store in VDP rollout
       D747 1C,90,55
[3207] D74A BD,4E,1C        DST  @SREF,@FAC4            VDP rollout address
[3208] D74D BD,50,0C        DST  @BYTES,@FAC6           Store length
[3209] D750 00       SSNOUT RTN
[3210]               *********************************************************
[3211]               * CALL ROLLRIGHT                                        *
[3212]               * CALL ROLLRIGHT(repetion)                              *
[3213]               *********************************************************
[3214] D751 D7,86    ROLLR  DATA ROLLL
[3215] D753 09,52,4F        STRI 'ROLLRIGHT'       ROLLRIGHT
       D756 4C,4C,52
       D759 49,47,48
       D75C 54
[3216] D75D D7,5F           DATA $+2
[3217] D75F D6,42,B7        CEQ  LPARZ,@CHAT       (?
[3218] D762 77,70           BS   ROLLRA            Normal 
[3219] D764 BF,00,00        DST  1,@PAD            Defualt 1 line
       D767 01
[3220] D768 86,8F,DD        CLR  @>6004            Set ROM3 page
       D76B 04
[3221] D76C 0F,70           XML  RROLL             RIGHT ROLL ASSEMBLY      

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0060 
RXB 2024
[3222] D76E 43,0C           BR   PEEK6             Done
[3223] D770 06,BF,F6 ROLLRA CALL SUBLP3            Get Repetition
[3224] D773 BD,00,4A        DST  @FAC,@PAD         Save Repetition
[3225] D776 8F,00           DCZ  @PAD              0?
[3226] D778 74,BB           BS   RTNLNK            Done return
[3227] D77A 86,8F,DD RLOOP  CLR  @>6004            Set ROM3 page
       D77D 04
[3228] D77E 0F,70           XML  RROLL             RIGHT ROLL ASSEMBLY
[3229] D780 92,01           DEC  @PAD1             REPETITION-1
[3230] D782 57,7A           BR   RLOOP             0? No loop
[3231] D784 54,BB           BR   RTNLNK            Done
[3232]               *********************************************************
[3233]               * CALL ROLLLEFT                                         *
[3234]               * CALL ROLLLEFT(repetion)                               *
[3235]               *********************************************************
[3236] D786 D7,BA    ROLLL  DATA ROLLU
[3237] D788 08,52,4F        STRI 'ROLLLEFT'        ROLLLEFT
       D78B 4C,4C,4C
       D78E 45,46,54
[3238] D791 D7,93           DATA $+2
[3239] D793 D6,42,B7        CEQ  LPARZ,@CHAT       (?
[3240] D796 77,A4           BS   ROLLLA            Normal 
[3241] D798 BF,00,00        DST  1,@PAD            Defualt 1 line
       D79B 01
[3242] D79C 86,8F,DD        CLR  @>6004            Set ROM3 page
       D79F 04
[3243] D7A0 0F,71           XML  LROLL             RIGHT ROLL ASSEMBLY
[3244] D7A2 43,0C           BR   PEEK6             Done 
[3245] D7A4 06,BF,F6 ROLLLA CALL SUBLP3            Get Repetition
[3246] D7A7 BD,00,4A        DST  @FAC,@PAD         Save Repetition
[3247] D7AA 8F,00           DCZ  @PAD              0?
[3248] D7AC 74,BB           BS   RTNLNK            Done return
[3249] D7AE 86,8F,DD LLOOP  CLR  @>6004            Set ROM3 page
       D7B1 04
[3250] D7B2 0F,71           XML  LROLL             RIGHT ROLL ASSEMBLY
[3251] D7B4 92,01           DEC  @PAD1             REPETITION-1
[3252] D7B6 57,AE           BR   LLOOP             0? No loop
[3253] D7B8 54,BB           BR   RTNLNK            Done return
[3254]               *********************************************************
[3255]               * CALL ROLLUP                                           *
[3256]               * CALL ROLLUP(repetion)                                 *
[3257]               *********************************************************
[3258] D7BA D7,EC    ROLLU  DATA ROLLD
[3259] D7BC 06,52,4F        STRI 'ROLLUP'          ROLLUP
       D7BF 4C,4C,55
       D7C2 50
[3260] D7C3 D7,C5           DATA $+2
[3261] D7C5 D6,42,B7        CEQ  LPARZ,@CHAT       (?
[3262] D7C8 77,D6           BS   ROLLUA            Normal 
[3263] D7CA BF,00,00        DST  1,@PAD            Defualt 1 line
       D7CD 01
[3264] D7CE 86,8F,DD        CLR  @>6004            Set ROM3 page
       D7D1 04
[3265] D7D2 0F,72           XML  UROLL             RIGHT ROLL ASSEMBLY
[3266] D7D4 43,0C           BR   PEEK6             Done  
[3267] D7D6 06,BF,F6 ROLLUA CALL SUBLP3            Get Repetition
[3268] D7D9 BD,00,4A        DST  @FAC,@PAD         Save Repetition
[3269] D7DC 8F,00           DCZ  @PAD              0?
[3270] D7DE 74,BB           BS   RTNLNK            Done return
[3271] D7E0 86,8F,DD ULOOP  CLR  @>6004            Set ROM3 page
       D7E3 04
[3272] D7E4 0F,72           XML  UROLL             RIGHT ROLL ASSEMBLY
[3273] D7E6 92,01           DEC  @PAD1             REPETITION-1
[3274] D7E8 57,E0           BR   ULOOP             0? No loop 

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0061 
RXB 2024
[3275] D7EA 54,BB           BR   RTNLNK            Done return
[3276]               *********************************************************
[3277]               * CALL ROLLDOWN                                         *
[3278]               * CALL ROLLDOWN(repetion)                               *
[3279]               *********************************************************
[3280] D7EC CA,19    ROLLD  DATA EXECLK
[3281] D7EE 08,52,4F        STRI 'ROLLDOWN'        ROLLDOWN
       D7F1 4C,4C,44
       D7F4 4F,57,4E
[3282] D7F7 D7,F9           DATA $+2
[3283] D7F9 D6,42,B7        CEQ  LPARZ,@CHAT       (?
[3284] D7FC 78,0A           BS   ROLLDA            Normal 
[3285] D7FE BF,00,00        DST  1,@PAD            Defualt 1 line
       D801 01
[3286] D802 86,8F,DD        CLR  @>6004            Set ROM3 page
       D805 04
[3287] D806 0F,73           XML  DROLL             RIGHT ROLL ASSEMBLY
[3288] D808 43,0C           BR   PEEK6             Done
[3289] D80A 06,BF,F6 ROLLDA CALL SUBLP3            Get Repetition
[3290] D80D BD,00,4A        DST  @FAC,@PAD         Save Repetition
[3291] D810 8F,00           DCZ  @PAD              0?
[3292] D812 74,BB           BS   RTNLNK            Done return
[3293] D814 86,8F,DD DLOOP  CLR  @>6004            Set ROM3 page
       D817 04
[3294] D818 0F,73           XML  DROLL             RIGHT ROLL ASSEMBLY
[3295] D81A 92,01           DEC  @PAD1             REPETITION-1
[3296] D81C 58,14           BR   DLOOP             0? No loop 
[3297] D81E 54,BB           BR   RTNLNK            Done return
[3298]               ***********************************************************
[3299]               * CALL POKER(vdpr#,value)                                 *
[3300]               ***********************************************************
[3301] D820 D8,89    POKER  DATA INVS
[3302] D822 05,50,4F        STRI 'POKER'           
       D825 4B,45,52
[3303] D828 D8,2A           DATA $+2
[3304] D82A 06,BF,E0        CALL COMB
[3305] D82D 06,BF,FC POKAGN CALL GETNUM
[3306] D830 CB,4A,00        DCHE 255,@FAC
       D833 FF
[3307] D834 65,30           BS   ERRBV
[3308] D836 BC,00,4B        ST   @FAC1,@PAD
[3309] D839 06,BF,F6        CALL SUBLP3
[3310] D83C 8A,00           CASE @PAD
[3311] D83E 58,7D           BR   PREG0
[3312] D840 58,76           BR   PREG1
[3313] D842 58,6F           BR   PREG2
[3314] D844 58,68           BR   PREG3
[3315] D846 58,61           BR   PREG4
[3316] D848 58,5A           BR   PREG5
[3317] D84A 58,53           BR   PREG6
[3318] D84C 3D,00,01        MOVE 1,@FAC1,#7
       D84F 07,4B
[3319] D851 58,82           BR   POKEND
[3320] D853 3D,00,01 PREG6  MOVE 1,@FAC1,#6
       D856 06,4B
[3321] D858 58,82           BR   POKEND
[3322] D85A 3D,00,01 PREG5  MOVE 1,@FAC1,#5
       D85D 05,4B
[3323] D85F 58,82           BR   POKEND
[3324] D861 3D,00,01 PREG4  MOVE 1,@FAC1,#4
       D864 04,4B
[3325] D866 58,82           BR   POKEND
[3326] D868 3D,00,01 PREG3  MOVE 1,@FAC1,#3
       D86B 03,4B

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0062 
RXB 2024
[3327] D86D 58,82           BR   POKEND
[3328] D86F 3D,00,01 PREG2  MOVE 1,@FAC1,#2
       D872 02,4B
[3329] D874 58,82           BR   POKEND
[3330] D876 3D,00,01 PREG1  MOVE 1,@FAC1,#1
       D879 01,4B
[3331] D87B 58,82           BR   POKEND
[3332] D87D 3D,00,01 PREG0  MOVE 1,@FAC1,#0
       D880 00,4B
[3333] D882 D6,42,B3 POKEND CEQ  COMMAZ,@CHAT
[3334] D885 78,2D           BS   POKAGN
[3335] D887 43,05           BR   PEEK5
[3336]               ***********************************************************
[3337]               * CALL INVERSE(char-number[,...])                          
[3338]               * CALL INVERSE(ALL)                                        
[3339]               ***********************************************************
[3340] D889 D8,C6    INVS   DATA RXBIO
[3341] D88B 07,49,4E        STRI 'INVERSE'
       D88E 56,45,52
       D891 53,45
[3342] D893 D8,95           DATA $+2
[3343] D895 06,BF,E0        CALL COMB             * INVERSE(CHAR#)
[3344] D898 0F,79    INVAGN XML  PGMCHR           * Skip (
[3345] D89A D6,42,EC        CEQ  ALLZ,@CHAT       * ALL?
[3346] D89D 58,A7           BR   INOALL           * No
[3347] D89F 0F,7E           XML  SPEED
[3348] D8A1 00,EC           DATA >00EC            * ALL token?  
[3349] D8A3 87,4A           DCLR @FAC             * ALL flag for Assembly
[3350] D8A5 58,B8           BR   INVLP            * Go ALL option 
[3351] D8A7 0F,74    INOALL XML  PARSE            * Get Character #
[3352] D8A9 B6              BYTE RPARZ
[3353] D8AA 0F,7E           XML  SPEED            * CHECK FROM
[3354] D8AC 02,1E           DATA >021E            * 30 TO 159
[3355] D8AE 00,9F           DATA >009F            
[3356] D8B0 E3,4A,00        DSLL 3,@FAC           * Adjust 
       D8B3 03
[3357] D8B4 A3,4A,03        DADD >0300,@FAC       * Add in Char address
       D8B7 00
[3358] D8B8 86,8F,DD INVLP  CLR  @>6004           * Set ROM3 page
       D8BB 04
[3359] D8BC 0F,79           XML  INVERS           * ROM 3 INVERSE ASSEMBLY 
[3360] D8BE D6,42,B3 INVNOK CEQ  COMMAZ,@CHAT
[3361] D8C1 78,98           BS   INVAGN
[3362] D8C3 05,A0,1C        B    LNKRTN
[3363]               *********************************************************
[3364]               * CALL IO(type,address,...)                             *
[3365]               * CALL IO(type,bits,cru-base,variable,variable,...)     *
[3366]               * CALL IO(type,length,VDP-address,...)                  *
[3367]               *********************************************************
[3368] D8C6 D9,93    RXBIO  DATA SXBRUN
[3369] D8C8 02,49,4F        STRI 'IO'           
[3370] D8CB D8,CD           DATA $+2
[3371] D8CD 06,BF,E0        CALL COMB         * IO
[3372] D8D0 06,BF,FC IOAGN  CALL GETNUM       * TYPE 0-6
[3373] D8D3 CA,4B,07        CHE  >07,@FAC1    * 7 or more error
[3374] D8D6 65,30           BS   ERRBV        * ERROR BAD VALUE
[3375] D8D8 BC,04,4B        ST   @FAC1,@PAD4  * Get TYPE
[3376] D8DB 06,BF,F6        CALL SUBLP3       * ADDRESS/
[3377] D8DE 8A,04           CASE @PAD4        * BITS/BYTES
[3378] D8E0 58,EE           BR   SOG          * IO Sound GROM
[3379] D8E2 58,F3           BR   SOV          * IO Sound VDP
[3380] D8E4 58,F8           BR   CRUI         * IO CRU IN 
[3381] D8E6 59,23           BR   CRUO         * IO CRU OUT
[3382] D8E8 59,4D           BR   CSW          * IO Cassette Write

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0063 
RXB 2024
[3383] D8EA 59,55           BR   CSR          * IO Cassette Read
[3384] D8EC 59,5D           BR   CSV          * IO Cassette Verify   
[3385] D8EE F6,4A,00 SOG    I/O  0,@FAC         IO Sound GROM
[3386] D8F1 59,63           BR   IODONE
[3387] D8F3 F6,4A,01 SOV    I/O  1,@FAC         IO Sound VDP 
[3388] D8F6 59,63           BR   IODONE
[3389] D8F8 06,D9,73 CRUI   CALL CRUSET
[3390] D8FB F6,0E,02        I/O  2,@BUFPNT      IO CRU IN 
[3391] D8FE 0F,79           XML  PGMCHR
[3392] D900 06,BF,F0        CALL SNDER
[3393] D903 06,BF,FA        CALL CLRFAC
[3394] D906 BC,4B,00        ST   @PAD,@FAC1
[3395] D909 06,BF,F2        CALL CIFSND       * VARIABLE1
[3396] D90C CA,04,09        CHE  >09,@PAD4
[3397] D90F 79,13           BS   CRUI16
[3398] D911 59,63           BR   IODONE
[3399] D913 0F,79    CRUI16 XML  PGMCHR
[3400] D915 06,BF,F0        CALL SNDER
[3401] D918 06,BF,FA        CALL CLRFAC
[3402] D91B BC,4B,01        ST   @PAD1,@FAC1
[3403] D91E 06,BF,F2        CALL CIFSND       * VARIABLE2
[3404] D921 59,63           BR   IODONE
[3405] D923 06,D9,73 CRUO   CALL CRUSET
[3406] D926 06,BF,F6        CALL SUBLP3       * VARIABLE1
[3407] D929 CB,4A,01        DCHE >0100,@FAC
       D92C 00
[3408] D92D 65,30           BS   ERRBV
[3409] D92F CA,04,09        CHE  >09,@PAD4
[3410] D932 79,39           BS   CRUO16
[3411] D934 BC,00,4B        ST   @FAC1,@PAD
[3412] D937 59,48           BR   CRUO8
[3413] D939 BD,00,4A CRUO16 DST  @FAC,@PAD
[3414] D93C 06,BF,F6        CALL SUBLP3       * VARIABLE2
[3415] D93F CB,4A,01        DCHE >0100,@FAC
       D942 00
[3416] D943 65,30           BS   ERRBV
[3417] D945 BC,01,4B        ST   @FAC1,@PAD1
[3418] D948 F6,0E,03 CRUO8  I/O  3,@BUFPNT      IO CRU OUT
[3419] D94B 59,63           BR   IODONE
[3420] D94D 06,D9,89 CSW    CALL CSLOAD
[3421] D950 F6,0E,04        I/O  4,@BUFPNT      IO Cassette Write
[3422] D953 59,63           BR   IODONE
[3423] D955 06,D9,89 CSR    CALL CSLOAD
[3424] D958 F6,0E,05        I/O  5,@BUFPNT      IO Cassette Read 
[3425] D95B 59,63           BR   IODONE
[3426] D95D 06,D9,89 CSV    CALL CSLOAD
[3427] D960 F6,0E,06        I/O  6,@BUFPNT      IO Cassette Verify 
[3428] D963 D6,42,B3 IODONE CEQ  COMMAZ,@CHAT
[3429] D966 78,D0           BS   IOAGN
[3430] D968 05,A0,1C        B    LNKRTN
[3431] D96B BD,0E,4A CRUTMP DST  @FAC,@BUFPNT
[3432] D96E 87,10           DCLR @VAR5
[3433] D970 87,00           DCLR @PAD
[3434] D972 00              RTN
[3435] D973 8E,4B    CRUSET CZ   @FAC1          
[3436] D975 65,30           BS   ERRBV
[3437] D977 CA,4A,11        CHE  >11,@FAC
[3438] D97A 65,30           BS   ERRBV
[3439] D97C BC,04,4B        ST   @FAC1,@PAD4
[3440] D97F 06,BF,F6        CALL SUBLP3       * CRU-ADDRESS
[3441] D982 06,D9,6B        CALL CRUTMP
[3442] D985 BC,10,04        ST   @PAD4,@VAR5
[3443] D988 00              RTN
[3444] D989 06,D9,6B CSLOAD CALL CRUTMP

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0064 
RXB 2024
[3445] D98C 06,BF,F6        CALL SUBLP3       * ADDRESS
[3446] D98F BD,10,4A        DST  @FAC,@VAR5
[3447] D992 00              RTN
[3448]               **********************************************************
[3449]               * CALL XB                                                *
[3450]               * CALL XB("PATHNAME")                                    *
[3451]               * CALL XB("PATHNAME",file#)                              *
[3452]               **********************************************************
[3453] D993 D9,D9    SXBRUN DATA SFILES
[3454] D995 02,58,42        STRI 'XB'   * CALL XB(pathname) 
[3455] D998 D9,9A           DATA XBPGM
[3456] D99A 06,80,12 XBPGM  CALL CLSALL            Close all open files
[3457] D99D 8E,42           CZ   @CHAT             ?
[3458] D99F 59,A4           BR   XBRUN             NO, XBRUN PATH
[3459] D9A1 05,D9,D6        B    RXBRUN            Run it
[3460]               * CALL XB("PATHNAME")
[3461] D9A4 06,BF,E0 XBRUN  CALL COMB              (?
[3462] D9A7 06,BF,E6        CALL STRGET            Skip ( and get $      
[3463] D9AA 8F,50    XBFIL  DCZ  @FAC6             Zero string length?
[3464] D9AC 65,66           BS   WRNNPP            NO PROGRAM PRESENT
[3465] D9AE 86,AF,22        CLR  V@>2254           Clear buffer 
       D9B1 54
[3466] D9B2 35,00,32        MOVE 50,V@>2254,V@>2255 Ripple clear
       D9B5 AF,22,55
       D9B8 AF,22,54
[3467] D9BB BF,AF,22        DST  >994A,V@>2254     Set flag 
       D9BE 54,99,4A
[3468] D9C1 BC,AF,22        ST   @FAC7,V@>2256     Save length byte
       D9C4 56,51
[3469] D9C6 34,50,AF        MOVE @FAC6,V@0(@FAC4),V@>2257 Save string
       D9C9 22,57,E0
       D9CC 00,4E
[3470] D9CE D6,42,B3 RXBXBP CEQ  COMMAZ,@CHAT      Comma?
[3471] D9D1 59,D6           BR   RXBRUN            No
[3472] D9D3 06,D9,EE        CALL RXBFIL            Set files
[3473] D9D6 05,63,72 RXBRUN B    TOPLEV            RUN IT
[3474]               ***********************************************************
[3475]               * CALL FILES(number)  0 to 15                             *
[3476]               ***********************************************************
[3477] D9D9 DA,3B    SFILES DATA SSIZE
[3478] D9DB 05,46,49        STRI 'FILES'       *   FILES
       D9DE 4C,45,53
[3479] D9E1 D9,E3           DATA $+2
[3480] D9E3 06,BF,E0        CALL COMB          *   (
[3481] D9E6 06,80,12        CALL CLSALL        *   Close all open files
[3482] D9E9 06,D9,EE        CALL RXBFIL        *   Set files
[3483] D9EC 5A,BC           BR   RXBNEW        *   Go do a NEW
[3484] D9EE 06,BF,F6 RXBFIL CALL SUBLP3        *   Get Files value
[3485] D9F1 8F,4A           DCZ  @FAC          *   Zero?
[3486] D9F3 7A,2F           BS   RXBF0         *   Yes, RXB CALL FILES(0)
[3487] D9F5 CB,4A,00        DCHE 16,@FAC       *   16 or more to high
       D9F8 10
[3488] D9F9 65,30           BS   ERRBV         *   Yes, BAD VALUE error
[3489] D9FB D6,42,B6        CEQ  RPARZ,@CHAT   *   )?
[3490] D9FE 44,C1           BR   ERRSYN        *   SYNTAX ERROR 
[3491] DA00 0F,79           XML  PGMCHR        *   Skip )
[3492] DA02 87,4C           DCLR @FAC2         *   Clear         
[3493] DA04 BC,4C,4B        ST   @FAC1,@FAC2   *   Load file value
[3494] DA07 BF,A3,C0        DST  >0116,V@VROAZ *   Set files buffer space
       DA0A 01,16
[3495] DA0C CB,00,01        DCHE 256,@PAD      *   
       DA0F 00
[3496] DA10 5A,17           BR   DSRDSS        *
[3497] DA12 A2,8F,80        ADD  >10,@VROAZ+1  *

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0065 
RXB 2024
       DA15 C1,10
[3498] DA17 BF,56,03 DSRDSS DST  VROAZ,@FAC12  *
       DA1A C0
[3499] DA1B 06,00,10        CALL LINK          *
[3500] DA1E 0A              BYTE >0A           *
[3501] DA1F BC,02,7C        ST   @ERCODE,@PAD2 *
[3502] DA22 E6,50,04        SRL  4,@FAC6       *
[3503] DA25 8E,50           CZ   @FAC6         *
[3504] DA27 45,43           BR   ERRFE         *
[3505] DA29 D6,02,20        CEQ  >20,@PAD2     *
[3506] DA2C 65,43           BS   ERRFE         *
[3507] DA2E 00              RTN                *
[3508] DA2F D6,42,B6 RXBF0  CEQ  RPARZ,@CHAT   * )?
[3509] DA32 44,C1           BR   ERRSYN        * SYNTAX ERROR 
[3510] DA34 0F,79           XML  PGMCHR        * Skip )
[3511] DA36 BF,70,3D        DST  >3DE9,@>8370  * Set FILE(0) VDP Highest address
       DA39 E9
[3512] DA3A 00              RTN                * Return
[3513]               ***********************************************************
[3514]               * CALL SIZE                                                
[3515]               ***********************************************************
[3516] DA3B DA,47    SSIZE  DATA VDPSTK
[3517] DA3D 04,53,49        STRI 'SIZE'           SIZE
       DA40 5A,45
[3518] DA42 DA,44           DATA $+2
[3519] 65C8          SZSIZE EQU  >65C8
[3520] DA44 05,65,C8        B    SZSIZE           CALL SIZE
[3521]               ***********************************************************
[3522]               * CALL VDPSTACK(address)                                  *
[3523]               ***********************************************************
[3524] DA47 DA,6F    VDPSTK DATA UP24K
[3525] DA49 08,56,44        STRI 'VDPSTACK'
       DA4C 50,53,54
       DA4F 41,43,4B
[3526] DA52 DA,54           DATA $+2
[3527] DA54 06,BF,E0        CALL COMB         * (
[3528] DA57 06,BF,F6        CALL SUBLP3       * Get address
[3529] DA5A C9,4A,70        DCHE @>8370,@FAC  * Highest possible address
[3530] DA5D 64,E8           BS   ERRSO        * ERROR STACK OVERFLOW
[3531] DA5F BD,6E,4A        DST  @FAC,@>836E  * Save VDP Stack address 
[3532] DA62 BD,24,4A        DST  @FAC,@>8324  * Save VDP Stack address
[3533] DA65 D6,42,B6 ENDRTN CEQ  RPARZ,@CHAT  * )?
[3534] DA68 44,C1           BR   ERRSYN       * Syntax Error
[3535] DA6A 0F,79           XML  PGMCHR       * Skip ")"
[3536] DA6C 05,DA,BC EXTRTN B    RXBNEW       * End program, files, reset
[3537]               ***********************************************************
[3538]               * CALL PRAM(start-address,end-address)                    *
[3539]               ***********************************************************
[3540] DA6F DA,A4    UP24K  DATA CLOSEA
[3541] DA71 04,50,52        STRI 'PRAM'
       DA74 41,4D
[3542] DA76 DA,78           DATA $+2  
[3543] DA78 8E,80,84        CZ   @RAMTOP      * CONSOLE ONLY?            
[3544] DA7B 74,BB           BS   RTNLNK       * Yes, do not run
[3545] DA7D 06,BF,E0        CALL COMB         * (
[3546] DA80 06,BF,FC        CALL GETNUM       * Get START address
[3547] DA83 BD,00,4A        DST  @FAC,@PAD    * SAVE START
[3548] DA86 CB,00,A0        DCHE >A000,@PAD   * LOW LIMIT >A000
       DA89 00
[3549] DA8A 45,30           BR   ERRBV        * ERROR BAD VALUE 
[3550] DA8C 06,BF,F6        CALL SUBLP3       * Get END address
[3551] DA8F CB,4A,A0        DCHE >A000,@FAC   * LOW LIMIT
       DA92 00
[3552] DA93 45,30           BR   ERRBV        * ERROR BAD VALUE

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0066 
RXB 2024
[3553] DA95 BD,80,84        DST  @PAD,@RAMTOP * LOAD START ADDRESS
       DA98 00
[3554] DA99 BD,80,86        DST  @RAMTOP,@RAMFRE * PROGRAM FREE ADDRESS
       DA9C 80,84
[3555] DA9E BD,A3,A0        DST  @FAC,V@PMEM  * LOAD END ADDRESS
       DAA1 4A
[3556] DAA2 5A,65           BR   ENDRTN
[3557]               ***********************************************************
[3558]               * CALL CLSALL                                             *
[3559]               ***********************************************************
[3560] DAA4 DA,B4    CLOSEA DATA NEWNEW
[3561] DAA6 06,43,4C        STRI 'CLSALL'          CLSALL
       DAA9 53,41,4C
       DAAC 4C
[3562] DAAD DA,AF           DATA $+2
[3563] DAAF 06,80,12        CALL CLSALL            Close all open files
[3564] DAB2 43,0C           BR   PEEK6       
[3565]               ***********************************************************
[3566]               * CALL NEW                                                *
[3567]               ***********************************************************
[3568] DAB4 DA,C5    NEWNEW DATA QTON
[3569] DAB6 03,4E,45        STRI 'NEW'             NEW
       DAB9 57
[3570] DABA DA,BC           DATA $+2
[3571] DABC 86,A3,71 RXBNEW CLR  V@LODFLG          Clear AUTOLOAD flag
[3572] DABF 06,80,12        CALL CLSALL
[3573] DAC2 05,60,20 NEWSZ  B    SZNEW
[3574]               ***********************************************************
[3575]               * CALL QUITON                                             *
[3576]               ***********************************************************
[3577] DAC5 DA,D7    QTON   DATA QTOFF
[3578] DAC7 06,51,55        STRI 'QUITON'
       DACA 49,54,4F
       DACD 4E
[3579] DACE DA,D0           DATA QTON1
[3580] DAD0 B2,80,C2 QTON1  AND  >EF,@GKFLAG  Reset QUIT bit
       DAD3 EF
[3581] DAD4 05,C1,E0        B    LDRET2       Return
[3582]               ***********************************************************
[3583]               * CALL QUITOFF                                            *
[3584]               ***********************************************************
[3585] DAD7 DA,E9    QTOFF  DATA BASIC
[3586] DAD9 07,51,55        STRI 'QUITOFF'
       DADC 49,54,4F
       DADF 46,46
[3587] DAE1 DA,E3           DATA QTOFF1
[3588] DAE3 B6,80,C2 QTOFF1 OR   >10,@GKFLAG  Set QUIT bit
       DAE6 10
[3589] DAE7 41,E0           BR   LDRET2       Return
[3590]               ********************************************************
[3591]               * CALL BASIC                                           *
[3592]               ********************************************************
[3593] DAE9 DB,03    BASIC  DATA SEARUN
[3594] DAEB 05,42,41        STRI 'BASIC'           
       DAEE 53,49,43
[3595] DAF1 DA,F3           DATA $+2
[3596] DAF3 06,80,12        CALL CLSALL            * Close all files
[3597] DAF6 86,A0,00        CLR  V@0
[3598] DAF9 35,3F,FF        MOVE >3FFF,V@0,V@1     * Clear 4K VDP
       DAFC A0,01,A0
       DAFF 00
[3599] 216E          SBASIC EQU  >216E
[3600] DB00 05,21,6E        B    SBASIC            * GO TO BASIC
[3601]               *********************************************************

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0067 
RXB 2024
[3602]               * CALL EA                                               *
[3603]               *********************************************************
[3604] DB03 DB,1A    SEARUN DATA BYEBYE
[3605] DB05 02,45,41        STRI 'EA'           *  EA menu
[3606] DB08 DB,0A           DATA $+2
[3607] DB0A 06,80,12        CALL CLSALL            Close all open files
[3608] DB0D 86,A0,00        CLR  V@0
[3609] DB10 35,3F,FF        MOVE >3FFF,V@0,V@1     Clear 4K VDP
       DB13 A0,01,A0
       DB16 00
[3610] DB17 05,E0,25        B    GE025             Got to EA CART
[3611]               ***********************************************************
[3612]               * CALL BYE                                                *
[3613]               ***********************************************************
[3614] DB1A DB,26    BYEBYE DATA CALPHA
[3615] DB1C 03,42,59        STRI 'BYE'             BYE
       DB1F 45
[3616] DB20 DB,22           DATA $+2
[3617] DB22 06,80,12        CALL CLSALL            Close all open files
[3618] DB25 0B              EXIT
[3619]               ***********************************************************
[3620]               * CALL ALPHALOCK(numeric-variable)                        *
[3621]               ***********************************************************
[3622] DB26 DB,48    CALPHA DATA VERSN
[3623] DB28 09,41,4C        STRI 'ALPHALOCK'
       DB2B 50,48,41
       DB2E 4C,4F,43
       DB31 4B
[3624] DB32 DB,34           DATA  $+2
[3625] DB34 06,BF,E0        CALL COMB          Insure have left parenthesis
[3626] DB37 0F,79           XML  PGMCHR        Skip (
[3627] DB39 06,BF,F0        CALL SNDER         Get variable info
[3628] DB3C 86,8F,DD        CLR  @>6004        Set ROM 3 page
       DB3F 04
[3629] DB40 0F,7E           XML  ALPHA         Check ALPHA LOCK KEY
[3630] DB42 06,BF,F2        CALL CIFSND        Convert to floating point
[3631]               *                         Assign and return to caller
[3632] DB45 05,A0,1C        B    LNKRTN
[3633]               ***********************************************************
[3634]               *               SUBPROGRAM FOR VERSION                    *
[3635]               ***********************************************************
[3636]               * CALL VERSION(numeric-variable)                          *
[3637]               ***********************************************************
[3638] DB48 00,00    VERSN  DATA >0000
[3639] DB4A 07,56,45        STRI 'VERSION'
       DB4D 52,53,49
       DB50 4F,4E
[3640] DB52 DB,54           DATA $+2
[3641] DB54 06,BF,E0        CALL COMB            Insure have left parenthesis
[3642] DB57 0F,79           XML  PGMCHR          Skip (
[3643] DB59 06,BF,F0        CALL SNDER           Get variable info    
[3644] DB5C BF,4A,07        DST  2024,@FAC       11/29/2023
       DB5F E8
[3645] DB60 06,BF,F2        CALL CIFSND          Convert to floating point
[3646]               *                           Assign and return to caller
[3647] DB63 05,A0,1C        B    LNKRTN
[3648]               ***********************************************************
[3649]                      END

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0068 
RXB 2024
Symbol Table #1 (New,alpha)  
00CB ABSZ       00A4 ACCEPZ     00EC ALLZ       007E ALPHA      0020 ALSUP      
C90C AMSCRU     C949 AMSMAP     C955 AMSOFF     C961 AMSON      C992 AMSSUB     
00BB ANDZ       00F9 APPENZ     835D ARG1       835E ARG2       835F ARG3       
8360 ARG4       8361 ARG5       8362 ARG6       C36B ARRAY      C37E ARRAY2     
A00A ASC        0076 ASCHEX     00DC ASCZ       007C ASSGNV     00CC ATNZ       
00F0 ATZ        00F1 BASEZ      DAE9 BASIC      D2DE BATCH      D2EB BATCH1     
D2FA BATCH2     D310 BATCH3     D313 BATCH4     D376 BEEP       00EE BEEPZ      
D48D BIASAG     D49C BIASLP     D4A9 BIASM      D4AC BIASSV     D3C7 BLOADL     
008E BREAKZ     D39F BSAVEL     0002 BUF        038E BUFEND     830E BUFPNT     
038C BUFSRT     DB1A BYEBYE     830C BYTES      009D CALLZ      DB26 CALPHA     
C655 CATLOG     837D CB         D331 CBKEY      D33E CBKEY2     8308 CCPADR     
8306 CCPPTR     BFEA CFIFCH     CB14 CHAR1      CB35 CHAR2      CB4E CHAR3      
CBE7 CHAR4      CC51 CHAR5      CCA0 CHAR6      CCEE CHAR7      CD27 CHAR8      
CD55 CHAR9      CD60 CHARA      C034 CHARPT     8342 CHAT       6A78 CHKEND     
C1E8 CHKIN      8302 CHKSUM     0005 CHRCNT     0082 CHRPAT     000D CHRTN      
00D6 CHRZZ      0080 CIF        BFF2 CIFSND     008B CINIT      00C5 CIRCUZ     
DAA4 CLOSEA     00A0 CLOSEZ     BFFA CLRFAC     8012 CLSALL     C268 CLSIT      
C295 CLSNOE     00B5 COLONZ     BFE0 COMB       00B3 COMMAZ     0070 COMPCT     
00B8 CONCZ      03BB CONFLG     0075 CONT       00CD COSZ       8312 COUNT      
CA3D CPUPGM     0820 CRNBUF     D8F8 CRUI       D913 CRUI16     007F CRUNCH     
D923 CRUO       D939 CRUO16     D948 CRUO8      D973 CRUSET     D96B CRUTMP     
D989 CSLOAD     D955 CSR        D95D CSV        D94D CSW        830E CURINC     
8314 CURLIN     C645 DARROW     0093 DATAZ      0089 DEFZ       0099 DELETZ     
C8E6 DEV0       C8FE DEV1       C8E3 DEVASC     8317 DEVNUM     00E9 DIGITZ     
008A DIMZ       C65D DIRECT     6FBA DISO       00A2 DISPLZ     00C4 DIVIZ      
D814 DLOOP      0073 DROLL      C8A8 DSKDSR     C281 DSKERR     C8C7 DSKNAM     
C8C2 DSKSUB     C26C DSRCAL     DA17 DSRDSS     8317 DSRFLG     000A DWNARR     
D2D2 EA0        D34A EAU1       D356 EAWSD      C58F ECRTN      C588 ECSET      
C58B ECSET2     66CF EDITLN     D00D EDTZ00     D079 EDTZ01     D07E EDTZ02     
D0AC EDTZ08     D000 EDTZZ0     8358 EEE1       0081 ELSEZ      C57E ENDCHK     
D47E ENDMOD     DA65 ENDRTN     008B ENDZ       8332 ENLN       00CA EOFZ       
00BE EQUALZ     00EF ERASEZ     837C ERCODE     6E1B ERPNT5     6E0E ERPRNT     
C528 ERRBA      C514 ERRBLN     C508 ERRBS      C530 ERRBV      C51C ERRCC      
C520 ERRCIP     8322 ERRCOD     C53F ERRDAT     C53C ERRDE1     C543 ERRFE      
C4F0 ERRFNN     C534 ERRIAL     C4C5 ERRIBS     C4DD ERRIM      C538 ERRINP     
C547 ERRIO      C556 ERRIVN     C510 ERRLNF     C518 ERRLTL     C4E4 ERRMEM     
C4E1 ERRMF1     C4FC ERRMS      C4D9 ERRMUV     C4B7 ERRN01     C4BA ERRNO      
C52C ERRNPP     C4C9 ERRNQS     C4CD ERRNTL     C4EC ERRNWF     C4D5 ERROBE     
C524 ERROLP     C457 ERROR      00A5 ERRORZ     C54F ERRPV      C4F8 ERRRSC     
C500 ERRRWG     C54B ERRSNF     C4D1 ERRSNM     C4F4 ERRSNS     C4E8 ERRSO      
C50C ERRSSL     C504 ERRST      C4BE ERRSY1     C4C1 ERRSYN     CD77 ERRTAB     
C553 ERRUC1     6A84 ERRZZ      CA28 EXAGN      C3F4 EXE01      CA49 EXEBL      
CA54 EXEBLA     CA19 EXECLK     00CE EXPZZ      832E EXTRAM     DA6C EXTRTN     
834B FAC1       8354 FAC10      8355 FAC11      8356 FAC12      8357 FAC13      
8358 FAC14      8359 FAC15      835A FAC16      835B FAC17      834C FAC2       
834D FAC3       834E FAC4       834F FAC5       8350 FAC6       8351 FAC7       
8352 FAC8       8353 FAC9       8311 FIELD      00FA FIXEDZ     8345 FLAG       
0001 FLG        CF73 FNDLNE     008C FORZ       830A FREEND     8340 FREPTR     
8308 FRESTA     2002 FSLOC      698C G698C      6D78 G6D78      C0C4 GC0C7      
C0D2 GC0D5      C0E0 GC0E3      C0F1 GC0F4      C119 GC11C      C1BE GC1C1      
C204 GC213      C215 GC224      C2AA GC2B9      C2F7 GC308      C38C GC39D      
C390 GC3A1      C3AB GC3BC      C3AD GC3BE      C3B4 GC3C5      C3CF GC3E0      
C3D2 GC3E3      C3E5 GC3F6      C418 GC429      CE22 GCE22      CE3B GCE3B      
CE48 GCE48      CE58 GCE58      CE5B GCE5B      CE99 GCE99      CEAC GCEAC      
CEB3 GCEB3      CEC8 GCEC8      CECF GCECF      CEE2 GCEE2      CEF6 GCEF6      
CF02 GCF02      CF05 GCF05      CF2C GCF2C      CF53 GCF53      CF7D GCF7D      
CF96 GCF96      CF9C GCF9C      C41E GCHR2      D008 GD008      D020 GD020      
D032 GD032      D048 GD048      D056 GD056      D06B GD06B      D085 GD085      
D097 GD097      D09E GD09E      D0A1 GD0A1      D0C6 GD0C6      D0D4 GD0D4      
D0E7 GD0E7      D0F3 GD0F3      E025 GE025      C41B GETCHR     CF69 GETLN2     
BFFC GETNUM     0071 GETSTR     C665 GKCAT      C696 GKCAT2     C767 GKCAT3     
C7B2 GKCAT5     C857 GKCAT6     C7DB GKCAT7     C668 GKCATA     C6A1 GKCATL     
C6D3 GKCLSF     C7EB GKDF       C844 GKDIR      C86E GKDNU1     C87C GKDNU2     

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0069 
RXB 2024
C868 GKDNUM     C6B3 GKDONE     C6EF GKDSR      C6E3 GKDSRL     C88E GKDSTR     
C7FD GKDV       C6C4 GKERR      83C2 GKFLAG     C863 GKFNA1     C7A1 GKFNAM     
C80F GKIF       C5AE GKINIT     C821 GKIV       C595 GKLOAD     C6F8 GKPABD     
C5BE GKPEEK     C833 GKPR       C798 GKSCL1     C78C GKSCL2     C77E GKSCRL     
C701 GKSCRN     C5DE GKSETG     C5D5 GKSETV     C778 GKTKE1     C779 GKTKE2     
C770 GKTKE3     C768 GKTKEY     BFEC GNRTN      0087 GOSUBZ     0086 GOTOZ      
0085 GOZ        00C0 GREATZ     802A GRMLST     802C GRSUB2     802E GRSUB3     
0074 HCHAR      8370 HIVDP      D384 HONK       0077 HPUT       0084 IFZ        
64EF ILLST      00A3 IMAGEZ     835E INDEX      8315 INDEXC     C2AB INIT       
2006 INITF      D8A7 INOALL     0092 INPUTZ     00F5 INTERZ     00CF INTZ       
D898 INVAGN     0079 INVERS     D8B8 INVLP      D8BE INVNOK     D889 INVS       
D8D0 IOAGN      D963 IODONE     CA83 ISROFF     CA63 ISRON      CB00 KEYTAB     
C1B7 LDDNE      C60B LDGRAM     C1F1 LDIPCS     D261 LDKEY      C1CF LDNE2      
C04E LDP1       C08D LDP2       C060 LDP4       C085 LDP5       C0A8 LDRD       
C1DE LDRET      C1E0 LDRET2     C0AF LDTG       C153 LDTG2      C132 LDTG3      
0004 LEN        00D5 LENZ       00BF LESSZ      008D LETZ       C314 LINKIT     
00AA LINPUZ     6A74 LLIST      D7AE LLOOP      A01A LNKRT2     A01C LNKRTN     
00C9 LNZ        C040 LOAD       C61D LOADDT     0371 LODFLG     00D0 LOGZ       
00B7 LPARZ      C047 LPD0       0071 LROLL      C988 MAPAMS     00DF MAXZ       
00C2 MINUSZ     00E0 MINZ       8302 MNUM       D43F MODAGN     D434 MODZ       
039E MRGPAB     6065 MSG10      629B MSG109     62A6 MSG130     62B0 MSG135     
6076 MSG14      6083 MSG16      609C MSG17      60AD MSG19      60BB MSG24      
60D2 MSG25      60E4 MSG28      60F9 MSG34      6110 MSG36      611C MSG39      
6128 MSG40      6137 MSG43      6148 MSG44      6159 MSG47      616F MSG48      
6189 MSG49      6198 MSG51      61AD MSG54      6324 MSG56      61BE MSG57      
61CC MSG60      61DB MSG61      62C5 MSG62      61EB MSG67      61FA MSG69      
6215 MSG70      622D MSG74      623A MSG78      624D MSG79      6257 MSG81      
626F MSG83      627B MSG84      6286 MSG97      6048 MSGBRK     6319 MSGCF      
630A MSGCIS     6040 MSGFST     00C3 MULTZ      0089 MVUP       D3E2 MYDOIT     
D3F6 MYSAL      DAB4 NEWNEW     DAC2 NEWSZ      0096 NEXTZ      BFEE NGOOD      
0009 NLEN       02E2 NLNADD     C40E NOERR      00BD NOTZ       CFB1 NOUSR      
00FD NUMBEZ     00C8 NUMCOZ     00E8 NUMERZ     BFE8 NUMFCH     00C8 NUMZ       
8306 OFFADD     C97F OFFAMS     0060 OFFSET     8310 OLDS       0005 OLDZ       
C976 ONAMS      009B ONZ        C216 OPENIT     009F OPENZ      009E OPTIOZ     
00BA ORZ        00F7 OUTPUZ     000A PABLEN     8304 PABPTR     8301 PAD1       
8302 PAD2       8304 PAD4       8306 PAD6       C1E8 PAGE       C336 PAR01      
0074 PARSE      C96D PASAMS     8304 PC         C2B9 PEEK       C2D7 PEEK2      
C305 PEEK5      C30C PEEK6      C63A PEEKDT     C5E7 PEEKG      C5C5 PEEKV      
00FB PERMAZ     0079 PGMCHR     832C PGMPTR     00DD PIZ        C5F1 PKG        
C62A PKGRAM     C5CF PKV        D3BA PLOAD      00C1 PLUSZ      03A0 PMEM       
C601 POG        D82D POKAGN     C5F7 POKEG      D882 POKEND     D820 POKER      
C59A POKEV      00D9 POSZ       C5A4 POV        D87D PREG0      D876 PREG1      
D86F PREG2      D868 PREG3      D861 PREG4      D85A PREG5      D853 PREG6      
8344 PRGFLG     009C PRINTZ     D392 PSAVE      C3E9 PUSH       DAD7 QTOFF      
DAE3 QTOFF1     DAC5 QTON       DAD0 QTON1      8386 RAMFRE     830A RAMPTR     
8384 RAMTOP     0095 RANDOZ     C254 READIT     6A8A READL3     0097 READZ      
08C0 RECBUF     8307 RECLEN     00DE RECZ       C3D4 REF01      00F4 RELATZ     
009A REMZ       0094 RESTOZ     CF68 RETNOS     0088 RETURZ     8375 RKEY       
D77A RLOOP      00D7 RNDZ       D7EC ROLLD      D80A ROLLDA     D786 ROLLL      
D7A4 ROLLLA     D751 ROLLR      D770 ROLLRA     D7BA ROLLU      D7D6 ROLLUA     
00B6 RPARZ      00E1 RPTZZ      0070 RROLL      D235 RSCAN      D244 RSCAN2     
D4BB RTNLNK     CF65 RTNSET     D100 RUNRXB     D270 RUNXB      00A9 RUNZ       
DA2F RXBF0      D9EE RXBFIL     D8C6 RXBIO      DABC RXBNEW     D9D6 RXBRUN     
D9CE RXBXBP     C91E SAMS       C92A SAMS2      0032 SAMS2Z     C9C6 SAMS3      
0033 SAMS3Z     C9CB SAMS4      C9D5 SAMS4A     C9F7 SAMSAL     0041 SAMSAZ     
0042 SAMSBZ     0043 SAMSCZ     CA16 SAMSD      0044 SAMSDZ     0045 SAMSEZ     
0046 SAMSFZ     CA0A SAMSLP     C9F6 SAMSP3     C999 SAMSPS     C931 SAMSTR     
C98F SAMSUB     0007 SAVEZ      D0AF SAVLIN     D0CC SAVLN5     216E SBASIC     
D481 SBIAS      D132 SCNKEY     0008 SCR        0083 SCROLL     D6C0 SDAGN      
D6CA SDLOOP     D691 SDOWN      D716 SDVAL      DB03 SEARUN     0003 SEETWO     
00D8 SEGZZ      00B4 SEMICZ     00F6 SEQUEZ     8308 SETCRU     D9D9 SFILES     
00D1 SGNZZ      C022 SINITR     00D2 SINZ       CAA1 SISROF     CA7C SISRON     
00EB SIZEZ      D58A SLAGN      D559 SLEFT      D594 SLLOOP     C019 SLOADF     
D5E4 SLVAL      D5E8 SLVAL2     007B SMB        BFF4 SNDASS     BFF0 SNDER      

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0070 
RXB 2024
D8EE SOG        D8F3 SOV        0020 SPACE      007E SPEED      C02B SPEEK      
00D3 SQRZ       D4EE SRAGN      D268 SRCHLP     831C SREF       D4BE SRIGHT     
D4F8 SRLOOP     D548 SRVAL      0082 SSEPZ      DA3B SSIZE      D727 SSNCHK     
D73D SSNGET     D750 SSNOUT     00B2 STEPZ      8330 STLN       0098 STOPZ      
8314 STORE      8302 STPT       831A STREND     BFE2 STRFCH     BFE6 STRGET     
0065 STRING     00C7 STRINZ     BFE4 STRPAR     8312 STRPTR     00DB STRZZ      
8324 STVSPT     D628 SUAGN      BFF6 SUBLP3     BFF8 SUBLP4     00A8 SUBNDZ     
00A7 SUBXTZ     00A1 SUBZ       D632 SULOOP     D5F9 SUP        D680 SUVAL      
D993 SXBRUN     007A SYM        0376 SYMBOL     0000 SYNCHK     6020 SZNEW      
64A0 SZRUNL     65C8 SZSIZE     00FC TABZ       8310 TAG        C145 TAG0       
C15A TAG5       C15D TAG6       C18F TAG7       C19C TAG9       C199 TAGA       
C1A5 TAGB       C1A2 TAGC       00D4 TANZ       8310 TBLPTR     8316 TEMP       
8354 TEMP1      8356 TEMP2      00B0 THENZ      8379 TIMER      63DD TOPL15     
6433 TOPL42     6462 TOPL55     6372 TOPLEV     00B1 TOZ        CE49 TRAC05     
CE72 TRAC09     CE76 TRAC10     CE95 TRAC12     CEF8 TRAC50     CF09 TRAC51     
CF16 TRAC55     CE1F TRACBK     0090 TRACEZ     0083 TREMZ      00EA UALPHZ     
D362 UBATCH     D7E0 ULOOP      008F UNBREZ     00C8 UNQSTZ     0091 UNTRAZ     
DA6F UP24K      CAD9 UPAB       000B UPARR      00F8 UPDATZ     0072 UROLL      
CAA8 USER       CFA3 USERFG     00ED USINGZ     D281 UTIL1      D296 UTIL2      
D2A5 UTIL3      D2CA UTIL4      D2D7 UTIL5      D2DA UTIL6      C3B6 VAL01      
00FE VALIDZ     00DA VALZ       8310 VAR5       8311 VAR6       8314 VAR9       
832A VARA       8316 VARB       00F3 VARIAZ     8320 VARW       0075 VCHAR      
DA47 VDPSTK     DB48 VERSN      0078 VPOP       0077 VPUSH      0078 VPUT       
0958 VRAMVS     03C0 VROAZ      00A6 WARNZ      6A82 WARNZZ     C56C WRNINP     
C572 WRNIO      C578 WRNLNF     C55A WRNNO      C566 WRNNPP     C560 WRNST      
D33F WSD        0073 XBCNS      D9AA XBFIL      D99A XBPGM      D9A4 XBRUN      
00BC XORZ       

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0071 
RXB 2024
Symbol Table #2 (New,value)  
0000 SYNCHK     0001 FLG        0002 BUF        0003 SEETWO     0004 LEN        
0005 CHRCNT     0005 OLDZ       0007 SAVEZ      0008 SCR        0009 NLEN       
000A DWNARR     000A PABLEN     000B UPARR      000D CHRTN      0020 ALSUP      
0020 SPACE      0032 SAMS2Z     0033 SAMS3Z     0041 SAMSAZ     0042 SAMSBZ     
0043 SAMSCZ     0044 SAMSDZ     0045 SAMSEZ     0046 SAMSFZ     0060 OFFSET     
0065 STRING     0070 COMPCT     0070 RROLL      0071 GETSTR     0071 LROLL      
0072 UROLL      0073 DROLL      0073 XBCNS      0074 HCHAR      0074 PARSE      
0075 CONT       0075 VCHAR      0076 ASCHEX     0077 HPUT       0077 VPUSH      
0078 VPOP       0078 VPUT       0079 INVERS     0079 PGMCHR     007A SYM        
007B SMB        007C ASSGNV     007E ALPHA      007E SPEED      007F CRUNCH     
0080 CIF        0081 ELSEZ      0082 CHRPAT     0082 SSEPZ      0083 SCROLL     
0083 TREMZ      0084 IFZ        0085 GOZ        0086 GOTOZ      0087 GOSUBZ     
0088 RETURZ     0089 DEFZ       0089 MVUP       008A DIMZ       008B CINIT      
008B ENDZ       008C FORZ       008D LETZ       008E BREAKZ     008F UNBREZ     
0090 TRACEZ     0091 UNTRAZ     0092 INPUTZ     0093 DATAZ      0094 RESTOZ     
0095 RANDOZ     0096 NEXTZ      0097 READZ      0098 STOPZ      0099 DELETZ     
009A REMZ       009B ONZ        009C PRINTZ     009D CALLZ      009E OPTIOZ     
009F OPENZ      00A0 CLOSEZ     00A1 SUBZ       00A2 DISPLZ     00A3 IMAGEZ     
00A4 ACCEPZ     00A5 ERRORZ     00A6 WARNZ      00A7 SUBXTZ     00A8 SUBNDZ     
00A9 RUNZ       00AA LINPUZ     00B0 THENZ      00B1 TOZ        00B2 STEPZ      
00B3 COMMAZ     00B4 SEMICZ     00B5 COLONZ     00B6 RPARZ      00B7 LPARZ      
00B8 CONCZ      00BA ORZ        00BB ANDZ       00BC XORZ       00BD NOTZ       
00BE EQUALZ     00BF LESSZ      00C0 GREATZ     00C1 PLUSZ      00C2 MINUSZ     
00C3 MULTZ      00C4 DIVIZ      00C5 CIRCUZ     00C7 STRINZ     00C8 NUMCOZ     
00C8 NUMZ       00C8 UNQSTZ     00C9 LNZ        00CA EOFZ       00CB ABSZ       
00CC ATNZ       00CD COSZ       00CE EXPZZ      00CF INTZ       00D0 LOGZ       
00D1 SGNZZ      00D2 SINZ       00D3 SQRZ       00D4 TANZ       00D5 LENZ       
00D6 CHRZZ      00D7 RNDZ       00D8 SEGZZ      00D9 POSZ       00DA VALZ       
00DB STRZZ      00DC ASCZ       00DD PIZ        00DE RECZ       00DF MAXZ       
00E0 MINZ       00E1 RPTZZ      00E8 NUMERZ     00E9 DIGITZ     00EA UALPHZ     
00EB SIZEZ      00EC ALLZ       00ED USINGZ     00EE BEEPZ      00EF ERASEZ     
00F0 ATZ        00F1 BASEZ      00F3 VARIAZ     00F4 RELATZ     00F5 INTERZ     
00F6 SEQUEZ     00F7 OUTPUZ     00F8 UPDATZ     00F9 APPENZ     00FA FIXEDZ     
00FB PERMAZ     00FC TABZ       00FD NUMBEZ     00FE VALIDZ     02E2 NLNADD     
0371 LODFLG     0376 SYMBOL     038C BUFSRT     038E BUFEND     039E MRGPAB     
03A0 PMEM       03BB CONFLG     03C0 VROAZ      0820 CRNBUF     08C0 RECBUF     
0958 VRAMVS     2002 FSLOC      2006 INITF      216E SBASIC     6020 SZNEW      
6040 MSGFST     6048 MSGBRK     6065 MSG10      6076 MSG14      6083 MSG16      
609C MSG17      60AD MSG19      60BB MSG24      60D2 MSG25      60E4 MSG28      
60F9 MSG34      6110 MSG36      611C MSG39      6128 MSG40      6137 MSG43      
6148 MSG44      6159 MSG47      616F MSG48      6189 MSG49      6198 MSG51      
61AD MSG54      61BE MSG57      61CC MSG60      61DB MSG61      61EB MSG67      
61FA MSG69      6215 MSG70      622D MSG74      623A MSG78      624D MSG79      
6257 MSG81      626F MSG83      627B MSG84      6286 MSG97      629B MSG109     
62A6 MSG130     62B0 MSG135     62C5 MSG62      630A MSGCIS     6319 MSGCF      
6324 MSG56      6372 TOPLEV     63DD TOPL15     6433 TOPL42     6462 TOPL55     
64A0 SZRUNL     64EF ILLST      65C8 SZSIZE     66CF EDITLN     698C G698C      
6A74 LLIST      6A78 CHKEND     6A82 WARNZZ     6A84 ERRZZ      6A8A READL3     
6D78 G6D78      6E0E ERPRNT     6E1B ERPNT5     6FBA DISO       8012 CLSALL     
802A GRMLST     802C GRSUB2     802E GRSUB3     8301 PAD1       8302 CHKSUM     
8302 MNUM       8302 PAD2       8302 STPT       8304 PABPTR     8304 PAD4       
8304 PC         8306 CCPPTR     8306 OFFADD     8306 PAD6       8307 RECLEN     
8308 CCPADR     8308 FRESTA     8308 SETCRU     830A FREEND     830A RAMPTR     
830C BYTES      830E BUFPNT     830E CURINC     8310 OLDS       8310 TAG        
8310 TBLPTR     8310 VAR5       8311 FIELD      8311 VAR6       8312 COUNT      
8312 STRPTR     8314 CURLIN     8314 STORE      8314 VAR9       8315 INDEXC     
8316 TEMP       8316 VARB       8317 DEVNUM     8317 DSRFLG     831A STREND     
831C SREF       8320 VARW       8322 ERRCOD     8324 STVSPT     832A VARA       
832C PGMPTR     832E EXTRAM     8330 STLN       8332 ENLN       8340 FREPTR     
8342 CHAT       8344 PRGFLG     8345 FLAG       834B FAC1       834C FAC2       
834D FAC3       834E FAC4       834F FAC5       8350 FAC6       8351 FAC7       
8352 FAC8       8353 FAC9       8354 FAC10      8354 TEMP1      8355 FAC11      
8356 FAC12      8356 TEMP2      8357 FAC13      8358 EEE1       8358 FAC14      

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0072 
RXB 2024
8359 FAC15      835A FAC16      835B FAC17      835D ARG1       835E ARG2       
835E INDEX      835F ARG3       8360 ARG4       8361 ARG5       8362 ARG6       
8370 HIVDP      8375 RKEY       8379 TIMER      837C ERCODE     837D CB         
8384 RAMTOP     8386 RAMFRE     83C2 GKFLAG     A00A ASC        A01A LNKRT2     
A01C LNKRTN     BFE0 COMB       BFE2 STRFCH     BFE4 STRPAR     BFE6 STRGET     
BFE8 NUMFCH     BFEA CFIFCH     BFEC GNRTN      BFEE NGOOD      BFF0 SNDER      
BFF2 CIFSND     BFF4 SNDASS     BFF6 SUBLP3     BFF8 SUBLP4     BFFA CLRFAC     
BFFC GETNUM     C019 SLOADF     C022 SINITR     C02B SPEEK      C034 CHARPT     
C040 LOAD       C047 LPD0       C04E LDP1       C060 LDP4       C085 LDP5       
C08D LDP2       C0A8 LDRD       C0AF LDTG       C0C4 GC0C7      C0D2 GC0D5      
C0E0 GC0E3      C0F1 GC0F4      C119 GC11C      C132 LDTG3      C145 TAG0       
C153 LDTG2      C15A TAG5       C15D TAG6       C18F TAG7       C199 TAGA       
C19C TAG9       C1A2 TAGC       C1A5 TAGB       C1B7 LDDNE      C1BE GC1C1      
C1CF LDNE2      C1DE LDRET      C1E0 LDRET2     C1E8 CHKIN      C1E8 PAGE       
C1F1 LDIPCS     C204 GC213      C215 GC224      C216 OPENIT     C254 READIT     
C268 CLSIT      C26C DSRCAL     C281 DSKERR     C295 CLSNOE     C2AA GC2B9      
C2AB INIT       C2B9 PEEK       C2D7 PEEK2      C2F7 GC308      C305 PEEK5      
C30C PEEK6      C314 LINKIT     C336 PAR01      C36B ARRAY      C37E ARRAY2     
C38C GC39D      C390 GC3A1      C3AB GC3BC      C3AD GC3BE      C3B4 GC3C5      
C3B6 VAL01      C3CF GC3E0      C3D2 GC3E3      C3D4 REF01      C3E5 GC3F6      
C3E9 PUSH       C3F4 EXE01      C40E NOERR      C418 GC429      C41B GETCHR     
C41E GCHR2      C457 ERROR      C4B7 ERRN01     C4BA ERRNO      C4BE ERRSY1     
C4C1 ERRSYN     C4C5 ERRIBS     C4C9 ERRNQS     C4CD ERRNTL     C4D1 ERRSNM     
C4D5 ERROBE     C4D9 ERRMUV     C4DD ERRIM      C4E1 ERRMF1     C4E4 ERRMEM     
C4E8 ERRSO      C4EC ERRNWF     C4F0 ERRFNN     C4F4 ERRSNS     C4F8 ERRRSC     
C4FC ERRMS      C500 ERRRWG     C504 ERRST      C508 ERRBS      C50C ERRSSL     
C510 ERRLNF     C514 ERRBLN     C518 ERRLTL     C51C ERRCC      C520 ERRCIP     
C524 ERROLP     C528 ERRBA      C52C ERRNPP     C530 ERRBV      C534 ERRIAL     
C538 ERRINP     C53C ERRDE1     C53F ERRDAT     C543 ERRFE      C547 ERRIO      
C54B ERRSNF     C54F ERRPV      C553 ERRUC1     C556 ERRIVN     C55A WRNNO      
C560 WRNST      C566 WRNNPP     C56C WRNINP     C572 WRNIO      C578 WRNLNF     
C57E ENDCHK     C588 ECSET      C58B ECSET2     C58F ECRTN      C595 GKLOAD     
C59A POKEV      C5A4 POV        C5AE GKINIT     C5BE GKPEEK     C5C5 PEEKV      
C5CF PKV        C5D5 GKSETV     C5DE GKSETG     C5E7 PEEKG      C5F1 PKG        
C5F7 POKEG      C601 POG        C60B LDGRAM     C61D LOADDT     C62A PKGRAM     
C63A PEEKDT     C645 DARROW     C655 CATLOG     C65D DIRECT     C665 GKCAT      
C668 GKCATA     C696 GKCAT2     C6A1 GKCATL     C6B3 GKDONE     C6C4 GKERR      
C6D3 GKCLSF     C6E3 GKDSRL     C6EF GKDSR      C6F8 GKPABD     C701 GKSCRN     
C767 GKCAT3     C768 GKTKEY     C770 GKTKE3     C778 GKTKE1     C779 GKTKE2     
C77E GKSCRL     C78C GKSCL2     C798 GKSCL1     C7A1 GKFNAM     C7B2 GKCAT5     
C7DB GKCAT7     C7EB GKDF       C7FD GKDV       C80F GKIF       C821 GKIV       
C833 GKPR       C844 GKDIR      C857 GKCAT6     C863 GKFNA1     C868 GKDNUM     
C86E GKDNU1     C87C GKDNU2     C88E GKDSTR     C8A8 DSKDSR     C8C2 DSKSUB     
C8C7 DSKNAM     C8E3 DEVASC     C8E6 DEV0       C8FE DEV1       C90C AMSCRU     
C91E SAMS       C92A SAMS2      C931 SAMSTR     C949 AMSMAP     C955 AMSOFF     
C961 AMSON      C96D PASAMS     C976 ONAMS      C97F OFFAMS     C988 MAPAMS     
C98F SAMSUB     C992 AMSSUB     C999 SAMSPS     C9C6 SAMS3      C9CB SAMS4      
C9D5 SAMS4A     C9F6 SAMSP3     C9F7 SAMSAL     CA0A SAMSLP     CA16 SAMSD      
CA19 EXECLK     CA28 EXAGN      CA3D CPUPGM     CA49 EXEBL      CA54 EXEBLA     
CA63 ISRON      CA7C SISRON     CA83 ISROFF     CAA1 SISROF     CAA8 USER       
CAD9 UPAB       CB00 KEYTAB     CB14 CHAR1      CB35 CHAR2      CB4E CHAR3      
CBE7 CHAR4      CC51 CHAR5      CCA0 CHAR6      CCEE CHAR7      CD27 CHAR8      
CD55 CHAR9      CD60 CHARA      CD77 ERRTAB     CE1F TRACBK     CE22 GCE22      
CE3B GCE3B      CE48 GCE48      CE49 TRAC05     CE58 GCE58      CE5B GCE5B      
CE72 TRAC09     CE76 TRAC10     CE95 TRAC12     CE99 GCE99      CEAC GCEAC      
CEB3 GCEB3      CEC8 GCEC8      CECF GCECF      CEE2 GCEE2      CEF6 GCEF6      
CEF8 TRAC50     CF02 GCF02      CF05 GCF05      CF09 TRAC51     CF16 TRAC55     
CF2C GCF2C      CF53 GCF53      CF65 RTNSET     CF68 RETNOS     CF69 GETLN2     
CF73 FNDLNE     CF7D GCF7D      CF96 GCF96      CF9C GCF9C      CFA3 USERFG     
CFB1 NOUSR      D000 EDTZZ0     D008 GD008      D00D EDTZ00     D020 GD020      
D032 GD032      D048 GD048      D056 GD056      D06B GD06B      D079 EDTZ01     
D07E EDTZ02     D085 GD085      D097 GD097      D09E GD09E      D0A1 GD0A1      
D0AC EDTZ08     D0AF SAVLIN     D0C6 GD0C6      D0CC SAVLN5     D0D4 GD0D4      
D0E7 GD0E7      D0F3 GD0F3      D100 RUNRXB     D132 SCNKEY     D235 RSCAN      

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0073 
RXB 2024
D244 RSCAN2     D261 LDKEY      D268 SRCHLP     D270 RUNXB      D281 UTIL1      
D296 UTIL2      D2A5 UTIL3      D2CA UTIL4      D2D2 EA0        D2D7 UTIL5      
D2DA UTIL6      D2DE BATCH      D2EB BATCH1     D2FA BATCH2     D310 BATCH3     
D313 BATCH4     D331 CBKEY      D33E CBKEY2     D33F WSD        D34A EAU1       
D356 EAWSD      D362 UBATCH     D376 BEEP       D384 HONK       D392 PSAVE      
D39F BSAVEL     D3BA PLOAD      D3C7 BLOADL     D3E2 MYDOIT     D3F6 MYSAL      
D434 MODZ       D43F MODAGN     D47E ENDMOD     D481 SBIAS      D48D BIASAG     
D49C BIASLP     D4A9 BIASM      D4AC BIASSV     D4BB RTNLNK     D4BE SRIGHT     
D4EE SRAGN      D4F8 SRLOOP     D548 SRVAL      D559 SLEFT      D58A SLAGN      
D594 SLLOOP     D5E4 SLVAL      D5E8 SLVAL2     D5F9 SUP        D628 SUAGN      
D632 SULOOP     D680 SUVAL      D691 SDOWN      D6C0 SDAGN      D6CA SDLOOP     
D716 SDVAL      D727 SSNCHK     D73D SSNGET     D750 SSNOUT     D751 ROLLR      
D770 ROLLRA     D77A RLOOP      D786 ROLLL      D7A4 ROLLLA     D7AE LLOOP      
D7BA ROLLU      D7D6 ROLLUA     D7E0 ULOOP      D7EC ROLLD      D80A ROLLDA     
D814 DLOOP      D820 POKER      D82D POKAGN     D853 PREG6      D85A PREG5      
D861 PREG4      D868 PREG3      D86F PREG2      D876 PREG1      D87D PREG0      
D882 POKEND     D889 INVS       D898 INVAGN     D8A7 INOALL     D8B8 INVLP      
D8BE INVNOK     D8C6 RXBIO      D8D0 IOAGN      D8EE SOG        D8F3 SOV        
D8F8 CRUI       D913 CRUI16     D923 CRUO       D939 CRUO16     D948 CRUO8      
D94D CSW        D955 CSR        D95D CSV        D963 IODONE     D96B CRUTMP     
D973 CRUSET     D989 CSLOAD     D993 SXBRUN     D99A XBPGM      D9A4 XBRUN      
D9AA XBFIL      D9CE RXBXBP     D9D6 RXBRUN     D9D9 SFILES     D9EE RXBFIL     
DA17 DSRDSS     DA2F RXBF0      DA3B SSIZE      DA47 VDPSTK     DA65 ENDRTN     
DA6C EXTRTN     DA6F UP24K      DAA4 CLOSEA     DAB4 NEWNEW     DABC RXBNEW     
DAC2 NEWSZ      DAC5 QTON       DAD0 QTON1      DAD7 QTOFF      DAE3 QTOFF1     
DAE9 BASIC      DB03 SEARUN     DB1A BYEBYE     DB26 CALPHA     DB48 VERSN      
E025 GE025      

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0074 
RXB 2024
Symbol Table #4 (Def,alpha)  
0034 ACCTON     835C ARG        0032 ATN        0036 BADTON     003B BITREV     
0012 CFI        0014 CNS        002C COS        0010 CSN        8372 DATSTK     
0001 DIVZER     0003 ERRIOV     0006 ERRLOG     0005 ERRNIP     0002 ERRSNN     
0004 ERRSQR     0028 EXP        834A FAC        0006 FADD       000A FCOMP      
0009 FDIV       0008 FMUL       836C FPERAD     0007 FSUB       0038 GETSPACE   
0022 INT        0010 LINK       0018 LOCASE     002A LOG        8370 MEMSIZ     
003D NAMLNK     8300 PAD        0024 PWR        0012 RETURN     000B SADD       
000F SCOMP      000E SDIV       8375 SGN        002E SIN        000D SMUL       
8400 SOUND      0026 SQR        000C SSUB       837C STATUS     0016 STCASE     
8373 SUBSTK     0030 TAN        0007 TRIGER     004A UPCASE     836E VSPTR      
0001 WRNOV      837F XPT        837E YPT        

99/4 GPL-ASSEMBLER (Pass 3) correct                                   PAGE 0075 
RXB 2024
Symbol Table #8 (Def,value)  
0001 DIVZER     0001 WRNOV      0002 ERRSNN     0003 ERRIOV     0004 ERRSQR     
0005 ERRNIP     0006 ERRLOG     0006 FADD       0007 FSUB       0007 TRIGER     
0008 FMUL       0009 FDIV       000A FCOMP      000B SADD       000C SSUB       
000D SMUL       000E SDIV       000F SCOMP      0010 CSN        0010 LINK       
0012 CFI        0012 RETURN     0014 CNS        0016 STCASE     0018 LOCASE     
0022 INT        0024 PWR        0026 SQR        0028 EXP        002A LOG        
002C COS        002E SIN        0030 TAN        0032 ATN        0034 ACCTON     
0036 BADTON     0038 GETSPACE   003B BITREV     003D NAMLNK     004A UPCASE     
8300 PAD        834A FAC        835C ARG        836C FPERAD     836E VSPTR      
8370 MEMSIZ     8372 DATSTK     8373 SUBSTK     8375 SGN        837C STATUS     
837E YPT        837F XPT        8400 SOUND      
